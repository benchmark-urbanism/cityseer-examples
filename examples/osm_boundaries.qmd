---
title: Networks for OSM Boundaries
date-format: long
date-modified: last-modified
lang: en
language:
  title-block-modified: "Last update"
---

If you want to download a street network for a specific OSM boundary then you can use `osmnx` to download the boundary, which can then be passed to `cityseer` for generating a network.

## Download Boundary

Download the boundary. Go to OSM and select the relation ID for the boundary that you'd like to download and pass it to `ox.geocode_to_gdf()`.

```{python}
import osmnx as ox

bounds_gdf = ox.geocode_to_gdf(
    "R1536593",  # OSM relation ID
    by_osmid=True,
)
# optionally use to_crs() to project to a target CRS
# returns a geoDataFrame - union for the geom
bounds_geom = bounds_gdf.union_all()
bounds_geom
```

:::{.callout-tip}
You can optionally project to a required CRS by using `geopandas` `to_crs()` methodo before taking the union. This is generally recommended if you want to apply a buffer to the geometry (assuming a unit such as metres).
:::

## Buffer and Simplify

Buffer and simplify depending on preferences. Make sure your distances correspond to the unit of the current CRS!

```{python}
# buffer if wanted
bounds_geom = bounds_geom.buffer(0.01)  # WGS - 4326
# some simplification is recommended
# otherwise the request to the underlying API used by io.osm_graph_from_poly()
# might complain that the boundary description is too long
bounds_geom = bounds_geom.simplify(
    0.001  # WGS - 4326
)  # here the CRS unit is degrees hence the small number
bounds_geom
```

## Generate Network

Now you can pass the boundary to `cityseer` to download and create the network.

```{python}
from cityseer.tools import io, plot

G_nx = io.osm_graph_from_poly(
    bounds_geom,
    # 4326 by default - use projected CRS instead if you projected your GDF
    poly_crs_code=4326,
    simplify=False,  # set to True for automatic simplification
)
plot.plot_nx(G_nx, plot_geoms=True)
```
