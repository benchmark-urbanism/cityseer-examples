---
title: Saving via GeoPandas
editor:
  render-on-save: true
execute:
  enabled: true
  cache: true
  freeze: auto
---

## Generate a network

:::{.callout-tip}
For more details on downloading for a boundary, see [this example](osm_boundaries.qmd).
:::

Assume we have the following network.

```{python}
import osmnx as ox
from cityseer.tools import io, plot

# retrieve a boundary from OSM
bounds_gdf = ox.geocode_to_gdf(
    "R1536593",  # OSM relation ID
    by_osmid=True,
)
# project
bounds_gdf = bounds_gdf.to_crs(3035)  # projected CRS
# extract geom
bounds_geom = bounds_gdf.union_all().simplify(500)
# extract network for geom
G_nx = io.osm_graph_from_poly(
    bounds_geom,
    poly_crs_code=3035,  # set to your CRS
    to_crs_code=3035,  # output CRS
    simplify=False,  # set to True for automatic simplification
)
plot.plot_nx(G_nx, plot_geoms=True)
```

## Convert to GeoPandas

You can now convert the network to a `geopandas` `GeoDataFrame`.

```{python}
# convert to a LineString GeoDataFrame
edges_gdf = io.geopandas_from_nx(G_nx, crs=3035)
edges_gdf.head()
```

## Save

It is then possible to save the `GeoDataFrame`. Create a `temp` folder or update your path accordingly:

```{python}
f_path = "temp/output_file.gpkg"
edges_gdf.to_file(f_path)
```

The GPKG file can now be explored or modified in GIS software such as QGIS.

## Reload

To reload, you can read the data with `geopandas`.

```{python}
import geopandas as gpd

in_edges_gdf = gpd.read_file(f_path)
in_edges_gdf.head()
```

## Convert back to nx

Then use `cityseer` to convert the `LineString` `GeoDataFrame` back into a `networkx` graph.

```{python}
in_G_nx = io.nx_from_generic_geopandas(in_edges_gdf)
plot.plot_nx(in_G_nx, plot_geoms=True)
```
