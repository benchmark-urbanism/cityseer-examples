---
title: Cookbook
editor:
  render-on-save: true
---

This cookbook contains a collection of recipes to illustrate typical usage scenarios for `cityseer`.

The recipes build on each other, so if you are wondering why or how to do something, you may find the answers in another (typically preceding) recipe.

Please open an issue to request the addition of further examples for a given use-case.

## Datasets

The datasets used from the recipes are available on the [datasets](../data/datasets.qmd) page, where you can also find information on the sources.

## Installation

To install `cityseer`, you can use `pip`:

```bash
pip install --upgrade cityseer
```

Or, from a notebook:

```python
!pip install --upgrade cityseer
```

The examples in this cookbook also use packages such as `geopandas`, `networkx`, and `matplotlib`. You can install them using the same method.

## Recipes

### Network Preparation

`cityseer` uses `networkx` [`MultiGraphs`](https://networkx.org/documentation/stable/reference/classes/multigraph.html) to represent pedestrian networks. In doing so, it embeds spatial information in the graph nodes and edges so that it can accurately manipulate the graphs and calculate derivative metrics.

See the [Network Preparation](./recipes/networks/index.qmd) page for examples of how to create a `cityseer` compatible `networkx` graph from:

- OSM data using bounding boxes, radii around points, or from a custom boundary file;
- `geopandas` data including the use of `geopandas` to open and import files such as geopackages and shapefiles;
- Imports from `momepy` and `osmnx`;
- Automatic and manual network simplification;
- Casting primal networks to dual representations to model and visualise metrics using streets instead of intersections.

### Metrics

`cityseer` converts the network into a `rust` data structure prior to computing derivative metrics. This is done to improve performance so that it can be used on large networks.

This is done using [`network_structure_from_nx`](https://cityseer.benchmarkurbanism.com/tools/io#network-structure-from-nx) function which is available in the `cityseer` `io` module. This function returns three objects:

- A nodes `GeoDataFrame` with the graph's nodes. This is used for saving the outputs of calculations, and makes it easy to export the outputs of calculations to files that can be used from QGIS or other GIS software and workflows.
- An edges `GeoDataFrame` with the graph's edges, including information that has been generated for the graph's edges such as metric and angular distances, entry and exit angles, and the overall bearing of the edge.
- A `cityseer` `NetworkStructure` object which is used by `cityseer` for calculating the measures.

Once you've prepared the nodes `GeoDataFrame` and the `NetworkStructure` from the `network_structure_from_nx` function, you can use it over and over again to calculate a variety of metrics.

Keep in mind that if you've converted your `networkx` network into a dual representation, then the nodes `GeoDataFrame` will also contain the primal edges, and these will be used for visualising the outputs of the calculations. Use of the dual representation is optional, but recommended.

See the [Network Centrality](./recipes/centrality/index.qmd) page for examples of how to efficiently calculate a variety of shortest metric and simplest angular centrality metrics.

## Accessibility

### Importing Data

### Calculate the Accessibility of POIs

### Nearest Distances to POIs

## Statistics

### Network Based Spatial Statistics

### Exploring Distributions

### Exploring Correlations

## Examples
