[
  {
    "objectID": "data/datasets.html",
    "href": "data/datasets.html",
    "title": "Datasets",
    "section": "",
    "text": "The datasets used from the recipes are provided for reproducibility and further exploration per the following links. Please refer to the respective sources for the most up-to-date versions. Please use the datasets in accordance with the source licenses (these should be open, but please check) and be sure to cite the original authors of the data.\nDataset preprocessing is done per the ua-dataset-madrid repository, which is intended to be a source for openly reproducible urban analytics data for reproducible papers, workflows, and tutorials.",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#neighbourhoods",
    "href": "data/datasets.html#neighbourhoods",
    "title": "Datasets",
    "section": "Neighbourhoods",
    "text": "Neighbourhoods\nShapefile\nGeoPackage\nSource\nLicense\nOrigin of the data: Madrid City Council (or, where appropriate, administrative body, body or entity in question)\nDescription: Delimitation of the 131 neighborhoods of the municipality of Madrid. The names and codes of each neighborhood and the districts to which they belong are indicated. The initial delimitation corresponds to the territorial restructuring of 1987.",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#blocks",
    "href": "data/datasets.html#blocks",
    "title": "Datasets",
    "section": "Blocks",
    "text": "Blocks\nGeoPackage\nSource\nLicense\nThe Copernicus land monitoring products and services are made available on a principle of full, open and free access, as established by the Commission Delegated Regulation (EU) No 1159/2013 of 12 July 2013. Free, full and open access to the products and services of the Copernicus Land Monitoring Service is made on the conditions that:\n\nWhen distributing or communicating Copernicus Land Monitoring Service products and services (data, software scripts, web services, user and methodological documentation and similar) to the public, users shall inform the public of the source of these products and services.\nWhere the Copernicus Land Monitoring Service products and services have been adapted or modified by the user, the user shall clearly state this.\nUsers shall make sure not to convey the impression to the public that the user’s activities are officially endorsed by the European Union.\n\nUrban Atlas Land Cover/Land Use 2018 (vector), Europe, 6-yearly. European Union’s Copernicus Land Monitoring Service information, https://land.copernicus.eu/en/products/urban-atlas/urban-atlas-2018. https://doi.org/10.2909/fb4dffa1-6ceb-4cc0-8372-1ed354c285e6 (Accessed on DD.MM.YYYY)",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#premises",
    "href": "data/datasets.html#premises",
    "title": "Datasets",
    "section": "Premises",
    "text": "Premises\nGeoPackage\nCSV\nSource\nLicense\nOrigin of the data: Madrid City Council (or, where appropriate, administrative body, body or entity in question)\nDescription: Microdata file of the census of premises and activities of the Madrid City Council, classified according to their type of access (street door or grouped), situation (open, closed…) and indication of the economic activity exercised and the hospitality and restaurant terraces that appear registered in said census.\nPreprocessing performed per: https://github.com/songololo/ua-dataset-madrid.",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#overture-maps-buildings",
    "href": "data/datasets.html#overture-maps-buildings",
    "title": "Datasets",
    "section": "Overture Maps Buildings",
    "text": "Overture Maps Buildings\nGeoPackage\nSource\nLicense\nLicense for theme: ODbL\n\n© OpenStreetMap contributors. Available under the Open Database License.\nEsri Community Maps contributors. Available under CC BY 4.0.\nGlobal ML Building Footprints. Licensed by Microsoft under the Open Database License.\nGoogle Open Buildings. Available under CC BY 4.0.\nUSGS 3D Elevation Program Digital Elevation Program.\nQian Shi, et al. A First High-quality Vector Data of Buildings in East Asian Countries Based on a Comprehensive Large-scale Mapping Framework. Zenodo, 22 July 2023, doi:10.5281/zenodo.8174931. Available under CC BY 4.0.",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#overture-maps-infrastructure",
    "href": "data/datasets.html#overture-maps-infrastructure",
    "title": "Datasets",
    "section": "Overture Maps Infrastructure",
    "text": "Overture Maps Infrastructure\nGeoPackage\nSource\nLicense\nLicense for theme: ODbL\n\n© OpenStreetMap contributors. Available under the Open Database License.\nData from the Daylight Map Distribution\nESA WorldCover. Available under CC BY 4.0 DEED.\nData products from ETOPO1. Available under Open Data Commons Public Domain Dedication and License.\nData from GLOBathy. Available under CC0 1.0 (assumed).",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#streets",
    "href": "data/datasets.html#streets",
    "title": "Datasets",
    "section": "Streets",
    "text": "Streets\nGeoPackage\nSource\nLicense\nOrigin of the data: Madrid City Council (or, where appropriate, administrative body, body or entity in question)\nDescription: Set of roads officially approved by the municipalities of the Community of Madrid, ordered by different characteristics.\nPreprocessing and manual cleaning performed per: https://github.com/songololo/ua-dataset-madrid.",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#census",
    "href": "data/datasets.html#census",
    "title": "Datasets",
    "section": "Census",
    "text": "Census\nGeoPackage\nSource\nLicense\nCopyright European Union 2025 - The source needs to be indicated and when re-use involves modifications to the data or text, this must be stated clearly to the end user of the information. For further information refer to https://ec.europa.eu/eurostat/web/main/help/copyright-notice.\n\n\n\nCode\nDescription\n\n\n\n\nT\nTotal population\n\n\nM\nMale population\n\n\nF\nFemale population\n\n\nY_LT15\nAge under 15 years\n\n\nY_1564\nAge 15 to 64 years\n\n\nY_GE65\nAge 65+ years\n\n\nEMP\nEmployed persons\n\n\nNAT\nBorn in reporting country\n\n\nEU_OTH\nBorn in other EU Member State\n\n\nOTH\nBorn elsewhere\n\n\nSAME\nResidence unchanged in past year\n\n\nCHG_IN\nMoved within reporting country\n\n\nCHG_OUT\nMoved from outside reporting country",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#gtfs---metro",
    "href": "data/datasets.html#gtfs---metro",
    "title": "Datasets",
    "section": "GTFS - Metro",
    "text": "GTFS - Metro\nStops\nStop Times\nSource\nLicense",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "recipes/continuity/continuity_osm.html",
    "href": "recipes/continuity/continuity_osm.html",
    "title": "OSM",
    "section": "",
    "text": "Set the coordinates and buffer distances to your preferred extents.\n\nfrom cityseer.tools import io\n\n# lng, lat, buffer_dist, plot_buffer = -1.7063649924889566, 52.19277374082795, 1500, 1250  # stratford-upon-avon\nlng, lat, buffer_dist, plot_buffer = (\n    -0.13039709427587876,\n    51.516434828344366,\n    6000,\n    5000,\n)  # london\n# lng, lat, buffer_dist, plot_buffer = 18.425702641104582, -33.9204746754594, 3000, 2500  # cape town\npoly_wgs, _ = io.buffered_point_poly(lng, lat, buffer_dist)\npoly_utm, _ = io.buffered_point_poly(lng, lat, buffer_dist, projected=True)\n# select extents for plotting\nplot_bbox = poly_utm.centroid.buffer(plot_buffer).bounds"
  },
  {
    "objectID": "recipes/continuity/continuity_osm.html#preparation",
    "href": "recipes/continuity/continuity_osm.html#preparation",
    "title": "OSM",
    "section": "",
    "text": "Set the coordinates and buffer distances to your preferred extents.\n\nfrom cityseer.tools import io\n\n# lng, lat, buffer_dist, plot_buffer = -1.7063649924889566, 52.19277374082795, 1500, 1250  # stratford-upon-avon\nlng, lat, buffer_dist, plot_buffer = (\n    -0.13039709427587876,\n    51.516434828344366,\n    6000,\n    5000,\n)  # london\n# lng, lat, buffer_dist, plot_buffer = 18.425702641104582, -33.9204746754594, 3000, 2500  # cape town\npoly_wgs, _ = io.buffered_point_poly(lng, lat, buffer_dist)\npoly_utm, _ = io.buffered_point_poly(lng, lat, buffer_dist, projected=True)\n# select extents for plotting\nplot_bbox = poly_utm.centroid.buffer(plot_buffer).bounds"
  },
  {
    "objectID": "recipes/continuity/continuity_osm.html#loading-data-from-osm",
    "href": "recipes/continuity/continuity_osm.html#loading-data-from-osm",
    "title": "OSM",
    "section": "Loading data from OSM",
    "text": "Loading data from OSM\nFor this example, we’ll use a custom OSM query that excludes footways because the continuity analysis needs OSM ways that have street name or route number information.\nFor this form of analysis, only basic cleaning is recommended:\n\nnot consolidating nodes because this risks accidentally dropping highway / ref / name attributes\nnot like closeness or betweenness methods, where topological distortions are arguably a bigger issue\n\n\nquery = \"\"\"\n[out:json];\n(\n    way[\"highway\"]\n    [\"area\"!=\"yes\"]\n    [\"highway\"!~\"footway|pedestrian|steps|bus_guideway|escape|raceway|proposed|planned|abandoned|platform|construction\"]\n    [\"service\"!~\"parking_aisle\"]\n    [\"amenity\"!~\"charging_station|parking|fuel|motorcycle_parking|parking_entrance|parking_space\"]\n    [\"access\"!~\"private|customers\"]\n    [\"indoor\"!=\"yes\"]\n    (poly:\"{geom_osm}\");\n);\nout body;\n&gt;;\nout qt;\n\"\"\"\nG_osm = io.osm_graph_from_poly(\n    poly_wgs, custom_request=query, simplify=True, iron_edges=False\n)\n\nINFO:cityseer.tools.io:Converting networkX graph from EPSG code 4326 to EPSG code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 141799/141799 [00:00&lt;00:00, 307109.58it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 152077/152077 [00:00&lt;00:00, 672708.16it/s]\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 152077/152077 [00:03&lt;00:00, 47701.10it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 141799/141799 [00:23&lt;00:00, 6088.50it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 36411/36411 [00:00&lt;00:00, 226888.05it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 34012/34012 [00:00&lt;00:00, 56288.52it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 32172/32172 [00:00&lt;00:00, 87738.65it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 32172/32172 [00:08&lt;00:00, 3622.80it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 26632/26632 [00:00&lt;00:00, 184209.95it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 36520/36520 [00:03&lt;00:00, 10934.54it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 34380/34380 [00:00&lt;00:00, 529406.13it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 26335/26335 [00:09&lt;00:00, 2859.41it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 35324/35324 [00:00&lt;00:00, 149166.62it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 27279/27279 [00:00&lt;00:00, 97660.35it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 27279/27279 [00:04&lt;00:00, 6087.78it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 24920/24920 [00:00&lt;00:00, 58761.52it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 32513/32513 [00:01&lt;00:00, 20982.18it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 23585/23585 [00:00&lt;00:00, 141766.68it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 30677/30677 [00:00&lt;00:00, 700146.18it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 23133/23133 [00:05&lt;00:00, 4191.83it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 30750/30750 [00:00&lt;00:00, 43371.19it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 23206/23206 [00:00&lt;00:00, 119011.86it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 23206/23206 [00:01&lt;00:00, 12658.30it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 23083/23083 [00:00&lt;00:00, 621311.58it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 30654/30654 [00:00&lt;00:00, 131804.30it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 23066/23066 [00:00&lt;00:00, 503339.17it/s]"
  },
  {
    "objectID": "recipes/continuity/continuity_osm.html#observe-continuity-metrics",
    "href": "recipes/continuity/continuity_osm.html#observe-continuity-metrics",
    "title": "OSM",
    "section": "Observe continuity metrics",
    "text": "Observe continuity metrics\nWe can now run the contunity metrics\n\nimport matplotlib.pyplot as plt\n\nfrom cityseer.tools import io, plot\nfrom cityseer.metrics import observe\n\n# methods can be \"names\", \"routes\", \"highways\"\n\nprint(\"Continuity by street names\")\nG_cont, NamesContReport = observe.street_continuity(G_osm, method=\"names\")\nNamesContReport.report_by_count(n_items=5)\nNamesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by route numbers\")\nG_cont, RoutesContReport = observe.street_continuity(G_cont, method=\"routes\")\nRoutesContReport.report_by_count(n_items=5)\nRoutesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by highway types\")\nG_cont, HwyContReport = observe.street_continuity(G_cont, method=\"highways\")\nHwyContReport.report_by_count(n_items=5)\nHwyContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by overlapping routes and names types\")\nG_cont, HybridContReport = observe.hybrid_street_continuity(G_cont)\nHybridContReport.report_by_count(n_items=5)\nHybridContReport.report_by_length(n_items=5)\n\nINFO:cityseer.metrics.observe:Calculating metrics for names.\n\n\nContinuity by street names\n\n\n100%|██████████| 30519/30519 [00:00&lt;00:00, 44680.14it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 52 - harrow road\nINFO:cityseer.metrics.observe:Count: 50 - holloway road\nINFO:cityseer.metrics.observe:Count: 48 - king's road\nINFO:cityseer.metrics.observe:Count: 46 - wandsworth road\nINFO:cityseer.metrics.observe:Count: 44 - battersea park road\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 6.0km - westway\nINFO:cityseer.metrics.observe:Length: 5.02km - regent's canal towpath\nINFO:cityseer.metrics.observe:Length: 4.43km - outer circle\nINFO:cityseer.metrics.observe:Length: 3.95km - harrow road\nINFO:cityseer.metrics.observe:Length: 3.35km - finchley road\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n\n\nContinuity by route numbers\n\n\n100%|██████████| 30519/30519 [00:00&lt;00:00, 172552.22it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 174 - a4\nINFO:cityseer.metrics.observe:Count: 151 - a3220\nINFO:cityseer.metrics.observe:Count: 144 - a501\nINFO:cityseer.metrics.observe:Count: 107 - a400\nINFO:cityseer.metrics.observe:Count: 99 - a202\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 12.6km - a4\nINFO:cityseer.metrics.observe:Length: 10.95km - a3220\nINFO:cityseer.metrics.observe:Length: 9.0km - a501\nINFO:cityseer.metrics.observe:Length: 7.94km - a400\nINFO:cityseer.metrics.observe:Length: 7.71km - a202\n\n\nContinuity by highway types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for highways.\n100%|██████████| 30519/30519 [00:00&lt;00:00, 87953.52it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 13294 - residential\nINFO:cityseer.metrics.observe:Count: 6573 - service\nINFO:cityseer.metrics.observe:Count: 3200 - unclassified\nINFO:cityseer.metrics.observe:Count: 2650 - primary\nINFO:cityseer.metrics.observe:Count: 1963 - cycleway\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 1045.4km - residential\nINFO:cityseer.metrics.observe:Length: 428.53km - service\nINFO:cityseer.metrics.observe:Length: 243.57km - unclassified\nINFO:cityseer.metrics.observe:Length: 181.72km - primary\nINFO:cityseer.metrics.observe:Length: 167.71km - cycleway\n\n\nContinuity by overlapping routes and names types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n100%|██████████| 30519/30519 [00:00&lt;00:00, 140316.03it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 304 - a501\nINFO:cityseer.metrics.observe:Count: 281 - a202\nINFO:cityseer.metrics.observe:Count: 280 - a3220\nINFO:cityseer.metrics.observe:Count: 255 - a4\nINFO:cityseer.metrics.observe:Count: 170 - a400\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 22.66km - a501\nINFO:cityseer.metrics.observe:Length: 21.08km - a3220\nINFO:cityseer.metrics.observe:Length: 19.9km - a202\nINFO:cityseer.metrics.observe:Length: 19.06km - a4\nINFO:cityseer.metrics.observe:Length: 13.35km - a40\n\n\n\nfor method, shape_exp, descriptor, cmap, inverse, col_by_categ in zip(\n    [\"names\", \"routes\", \"highways\", \"hybrid\"],  #\n    [1, 0.75, 0.5, 1],  #\n    [\"Street names\", \"Routes\", \"Road types\", \"Hybrid routes & names\"],  #\n    [\"plasma\", \"viridis\", \"tab10\", \"tab10\"],  #\n    [False, False, True, False],  #\n    [False, False, True, True],\n):\n    print(f\"Plotting results for method: {method}\")\n    # plot\n    bg_colour = \"#1d1d1d\"\n    fig, axes = plt.subplots(\n        2, 1, dpi=150, figsize=(8, 12), facecolor=bg_colour, constrained_layout=True\n    )\n    fig.suptitle(\n        f\"OS Open Roads plotted by {descriptor} continuity\",\n        fontsize=\"small\",\n        ha=\"center\",\n    )\n    # by count\n    plot.plot_nx_edges(\n        axes[0],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_count\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[0].set_xlabel(f\"{descriptor} by count\", fontsize=\"x-small\")  # type: ignore\n    # by length\n    plot.plot_nx_edges(\n        axes[1],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_length\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[1].set_xlabel(f\"{descriptor} by length (metres)\", fontsize=\"x-small\")  # type: ignore\n    plt.show()\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: names\n\n\n30519it [00:00, 436173.32it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:03&lt;00:00, 9848.79it/s] \nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 515888.89it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:02&lt;00:00, 11225.09it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: routes\n\n\n30519it [00:00, 639530.98it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:02&lt;00:00, 10577.33it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 623780.34it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:02&lt;00:00, 10582.54it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: highways\n\n\n30519it [00:00, 583939.51it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:02&lt;00:00,  5.28it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 538861.30it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  5.67it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: hybrid\n\n\n30519it [00:00, 632900.20it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  6.20it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 686204.52it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  7.26it/s]"
  },
  {
    "objectID": "recipes/networks/create_from_buffered_point.html",
    "href": "recipes/networks/create_from_buffered_point.html",
    "title": "OSM network from a buffered coordinate",
    "section": "",
    "text": "Use a buffered point to create a networkx graph from OSM.\n\nfrom cityseer.tools import io, plot\n\nDefine a longitude and latitude, and a buffer distance in meters.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 500\n\nA geometry can now be created using the buffered_point_poly function available from the cityseer package’s io module.\n\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\nprint(epsg_code)\npoly_wgs\n\n4326\n\n\n\n\n\n\n\n\n\nYou can then use this geometry to specify the boundaries to be used for creating a network using the osm_graph_from_poly function.\n\nG = io.osm_graph_from_poly(poly_wgs)\nprint(G)\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 320 nodes and 487 edges\n\n\n\n\n\n\n\n\n\nSet the projected parameter to True if you would rather use the local UTM projection for the boundary.\n\npoly_utm, epsg_code = io.buffered_point_poly(lng, lat, buffer, projected=True)\nprint(epsg_code)\npoly_utm\n\n32630\n\n\n\n\n\n\n\n\n\nIn this case, remember to set the poly_crs parameter to the appropriate UTM CRS if using the resultant geometry as a parameter for the osm_graph_from_poly function.\n\nG_utm = io.osm_graph_from_poly(poly_utm, poly_crs_code=epsg_code)\nprint(G_utm)\nplot.plot_nx(G_utm, plot_geoms=True)\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 320 nodes and 487 edges"
  },
  {
    "objectID": "recipes/networks/momepy_to_cityseer.html",
    "href": "recipes/networks/momepy_to_cityseer.html",
    "title": "Convert a network from momepy",
    "section": "",
    "text": "Convert a network from momepy to a cityseer compatible networkx graph.\nThe process is for converting momepy networks is similar to that for opening street network datasets via geopandas.\n\nimport geopandas as gpd\nimport momepy\nfrom cityseer.tools import io, plot\n\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.12/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\nPrepare a momepy street network. Here we will use the momepy example dataset streets which is a GeoDataFrame of street segments.\n\nstreets_gpd = gpd.read_file(momepy.datasets.get_path(\"bubenec\"), layer=\"streets\")\nstreets_gpd.head()\n\n\n\n\n\n\n\n\ngeometry\n\n\n\n\n0\nLINESTRING (1603585.64 6464428.774, 1603413.20...\n\n\n1\nLINESTRING (1603268.502 6464060.781, 1603296.8...\n\n\n2\nLINESTRING (1603607.303 6464181.853, 1603592.8...\n\n\n3\nLINESTRING (1603678.97 6464477.215, 1603675.68...\n\n\n4\nLINESTRING (1603537.194 6464558.112, 1603557.6...\n\n\n\n\n\n\n\n\nstreets_gpd.plot()\n\n\n\n\n\n\n\n\nUse the nx_from_generic_geopandas function to convert the geopandas LineStrings dataset to a networkx graph. This function will automatically create nodes and edges from the LineStrings in the dataset.\n\nG = io.nx_from_generic_geopandas(streets_gpd)\nprint(G)\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 29 nodes and 35 edges"
  },
  {
    "objectID": "recipes/networks/save_to_file.html",
    "href": "recipes/networks/save_to_file.html",
    "title": "Saving a network to a file",
    "section": "",
    "text": "Save a cityseer prepared networkx graph to a file.\nTo save a graph or to visualise it from QGIS, convert it to a GeoDataFrame and save it using geopandas.\nFirst, let’s create a simple OSM graph from a bounding box, using the same approach as before.\n\nfrom shapely import geometry\n\nfrom cityseer.tools import io\n\npoly_wgs = geometry.box(\n    -0.14115725966109327, 51.509220662095714, -0.12676440185383622, 51.51820111033659\n)\nG = io.osm_graph_from_poly(poly_wgs)\nprint(G)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n\n\nMultiGraph with 382 nodes and 591 edges\n\n\nUse the geopandas_from_nx function to convert the networkx dataset into a geopandas LineString GeoDataFrame.\n\nstreets_gpd = io.geopandas_from_nx(G)\nstreets_gpd\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n\n\n\n\n\n\n\n\n\nnames\nroutes\nhighways\nlevels\nis_tunnel\nis_bridge\ngeom\nstart_nd_key\nend_nd_key\nedge_idx\n\n\n\n\n0\n[beak street]\n[]\n[unclassified]\n[0]\nFalse\nFalse\nLINESTRING (698573.946 5710658.889, 698597.952...\n108070\n25473512\n0\n\n\n1\n[beak street]\n[]\n[unclassified]\n[0]\nFalse\nFalse\nLINESTRING (698573.946 5710658.889, 698556.667...\n108070\n25473371\n0\n\n\n2\n[kingly court]\n[]\n[footway, pedestrian]\n[0]\nTrue\nFalse\nLINESTRING (698573.946 5710658.889, 698573.05 ...\n108070\n5568839679\n0\n\n\n3\n[upper john street]\n[]\n[unclassified]\n[0]\nFalse\nFalse\nLINESTRING (698573.946 5710658.889, 698575.964...\n108070\n25473286\n0\n\n\n4\n[great marlborough street]\n[]\n[tertiary]\n[0]\nFalse\nFalse\nLINESTRING (698482.48 5710892.514, 698538.717 ...\n9791491\n21665965\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n586\n[shaftesbury avenue]\n[a401]\n[primary]\n[0]\nFalse\nFalse\nLINESTRING (699115.323 5710736.094, 699122.971...\n10780|07805±12437|52103\n12437|64252±21665|07806\n0\n\n\n587\n[old compton street]\n[]\n[residential]\n[0]\nFalse\nFalse\nLINESTRING (699053.594 5710800.488, 699102.554...\n12437|87532±12437|87533\n12437|93940±95129|52157\n0\n\n\n588\n[bedford avenue]\n[]\n[residential]\n[0]\nFalse\nFalse\nLINESTRING (699077.183 5711295.803, 699107.105...\n14791186±81383|46369±8138324345\n14791|73913±14791190\n0\n\n\n589\n[adeline place]\n[]\n[residential]\n[0]\nFalse\nFalse\nLINESTRING (699152.425 5711267.822, 699141.858...\n14791186±81383|46369±8138324345\n97085|91193±12374|61122\n0\n\n\n590\n[bedford avenue]\n[]\n[cycleway]\n[0]\nFalse\nFalse\nLINESTRING (699042.615 5711269.629, 699065.083...\n14791|73913±14791190\n5811145825±64895|91482\n0\n\n\n\n\n591 rows × 10 columns\n\n\n\nSince this is now a geopandas GeoDataFrame, you can use it accordingly.\n\nstreets_gpd.plot()\n\n\n\n\n\n\n\n\ngeopandas can now be used to save the file to disk, it can then be accessed and edited from an application such as QGIS.\n\nstreets_gpd.to_file(\"temp/save_streets_demo.gpkg\", driver=\"GPKG\")\n\nINFO:pyogrio._io:Created 591 records"
  },
  {
    "objectID": "recipes/networks/network_from_relation_id.html",
    "href": "recipes/networks/network_from_relation_id.html",
    "title": "OSM network from a relation id",
    "section": "",
    "text": "Use an OSM relation id to create a networkx graph from OSM.\n\nimport osmnx as ox\n\nfrom cityseer.tools import io, plot\n\nUse OpenStreetMap to identify a boundary relations id. Then, use osmnx to retireve the relation id as a GeoDataFrame.\nIn this case, we’ll retrieve the London Soho boundary relation 17710512. For this, we can use the osmnx geocode_to_gdf function with the by_osmid parameter set to True. Note the preceding R prepended to the id as per the API documentation.\n\nbounds_gdf = ox.geocode_to_gdf(\n    \"R17710512\",  # OSM relation ID\n    by_osmid=True,\n)\nbounds_gdf\n\n\n\n\n\n\n\n\ngeometry\nbbox_west\nbbox_south\nbbox_east\nbbox_north\nplace_id\nosm_type\nosm_id\nlat\nlon\nclass\ntype\nplace_rank\nimportance\naddresstype\nname\ndisplay_name\n\n\n\n\n0\nPOLYGON ((-0.14183 51.5151, -0.14162 51.51449,...\n-0.141829\n51.509966\n-0.129378\n51.516365\n259863049\nrelation\n17710512\n51.514065\n-0.135049\nplace\nsuburb\n19\n0.552695\nneighbourhood\nSoho\nSoho, City of Westminster, Greater London, Eng...\n\n\n\n\n\n\n\nConvert the GeoDataFrame into a unified Polygon using the geopandas union_all method.\n\n# returns a geoDataFrame - union for the geom\nbounds_geom = bounds_gdf.union_all()\nbounds_geom\n\n\n\n\n\n\n\n\nIf the geometry is complex, then the subsequent OSM API request (which happens behind the scenes) can fail due to a long URL request. In this case, you can take the geometrically simpler convex_hull instead. Alternatively, you can simplify the geometry, but remember to use spatial units matching the CRS of the geometry.\n\nbounds_geom = bounds_geom.convex_hull\nbounds_geom\n\n\n\n\n\n\n\n\nThe shapely geometry can then be passed to the cityseer osm_graph_from_poly function, as per other examples.\n\nG = io.osm_graph_from_poly(bounds_geom)\nprint(G)\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n\n\nMultiGraph with 144 nodes and 210 edges\n\n\n\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges"
  },
  {
    "objectID": "recipes/networks/index.html",
    "href": "recipes/networks/index.html",
    "title": "Network Preparation",
    "section": "",
    "text": "The below examples illustrate how to create cityseer compatible networkx graphs from various data sources, including OpenStreetMap (OSM) data and geopandas GeoDataFrames. These workflows will automatically prepare the network for you, and this should be sufficient for the great majority of cases.\nIf you wish to manually prepare the network, then the network nodes require x and y attributes storing the coordinates of the node in a projected coordinate system. You can also optionally add the following two attributes:\nFor edges, cityseer network representations contain a geom attribute which stores a shapely LineString geometry of the edge.\nThe first several examples use the osm_graph_from_poly function available from the cityseer package’s io module. This is a versatile function for generating networks from OSM data. See the first (bounding box) example for some use cases including how to use specific Coordinate Reference Systems.",
    "crumbs": [
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#osm-network-from-a-bounding-box",
    "href": "recipes/networks/index.html#osm-network-from-a-bounding-box",
    "title": "Network Preparation",
    "section": "OSM network from a bounding box",
    "text": "OSM network from a bounding box\nUse a bounding box to create a networkx graph from OpenStreetMap data.\nNotebook",
    "crumbs": [
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#osm-network-from-a-buffered-coordinate",
    "href": "recipes/networks/index.html#osm-network-from-a-buffered-coordinate",
    "title": "Network Preparation",
    "section": "OSM network from a buffered coordinate",
    "text": "OSM network from a buffered coordinate\nUse a buffered point to create a networkx graph from OSM.\nNotebook",
    "crumbs": [
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#osm-network-from-a-boundary-file",
    "href": "recipes/networks/index.html#osm-network-from-a-boundary-file",
    "title": "Network Preparation",
    "section": "OSM network from a boundary file",
    "text": "OSM network from a boundary file\nUse a custom boundary file to create a networkx graph from OSM.\nNotebook",
    "crumbs": [
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#osm-network-from-a-relation-id",
    "href": "recipes/networks/index.html#osm-network-from-a-relation-id",
    "title": "Network Preparation",
    "section": "OSM network from a relation id",
    "text": "OSM network from a relation id\nUse an OSM relation id to create a networkx graph from OSM.\nNotebook",
    "crumbs": [
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#custom-network-from-a-streets-dataset",
    "href": "recipes/networks/index.html#custom-network-from-a-streets-dataset",
    "title": "Network Preparation",
    "section": "Custom network from a streets dataset",
    "text": "Custom network from a streets dataset\nUse geopandas to open a street network file and convert it to a networkx graph.\nNotebook",
    "crumbs": [
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#convert-a-network-from-osmnx",
    "href": "recipes/networks/index.html#convert-a-network-from-osmnx",
    "title": "Network Preparation",
    "section": "Convert a network from osmnx",
    "text": "Convert a network from osmnx\nConvert a network from osmnx to a cityseer compatible networkx graph.\nNotebook",
    "crumbs": [
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#convert-a-network-from-momepy",
    "href": "recipes/networks/index.html#convert-a-network-from-momepy",
    "title": "Network Preparation",
    "section": "Convert a network from momepy",
    "text": "Convert a network from momepy\nConvert a network from momepy to a cityseer compatible networkx graph.\nNotebook",
    "crumbs": [
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#saving-a-network-to-a-file",
    "href": "recipes/networks/index.html#saving-a-network-to-a-file",
    "title": "Network Preparation",
    "section": "Saving a network to a file",
    "text": "Saving a network to a file\nSave a networkx graph to a file.\nNotebook",
    "crumbs": [
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#dual-graph-from-a-primal-graph",
    "href": "recipes/networks/index.html#dual-graph-from-a-primal-graph",
    "title": "Network Preparation",
    "section": "Dual graph from a primal graph",
    "text": "Dual graph from a primal graph\nCreate a dual graph representation from a primal graph.\nNotebook",
    "crumbs": [
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#custom-network-simplification",
    "href": "recipes/networks/index.html#custom-network-simplification",
    "title": "Network Preparation",
    "section": "Custom network simplification",
    "text": "Custom network simplification\nGood sources of street network data, such as the Ordnance Survey’s OS Open Roads, typically have two distinguishing characteristics:\n\nThe network has been simplified to its essential structure: i.e. unnecessarily complex representations of intersections, on-ramps, divided roadways, etc., have been reduced to a simpler representation concurring more readily with the core topological structure of street networks. Simplified forms of network representation contrast those focusing on completeness (e.g. for route way-finding, see OS ITN Layer): these introduce unnecessary complexity serving to hinder rather than help shortest-path algorithms in the sense used by pedestrian centrality measures.\nThe topology of the network is kept distinct from the geometry of the streets. Often-times, as can be seen with Open Street Map, additional nodes are added to streets to represent geometric twists and turns along a roadway. These additional nodes cause topological distortions that impact network centrality measures.\n\nWhen a high-quality source is available, it may be best not to attempt additional clean-up unless there is a particular rationale for doing so. On the other hand, many indispensable sources of network information, particularly Open Street Map data, can be particularly messy for network analysis purposes.\ncityseer uses customisable graph cleaning methods that reduce topological idiosyncrasies which may otherwise confound centrality measures. It can, for example, remove dual carriageways while merging nodes and roadways in a manner that is as ‘tidy’ as possible. cityseer has an automated cleaning routine for OSM data, but it is also possible to manually configure network simplification steps and parameters as shown in the following notebook.\nNotebook",
    "crumbs": [
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/create_dual_graph.html",
    "href": "recipes/networks/create_dual_graph.html",
    "title": "Create a Dual Graph",
    "section": "",
    "text": "Create a dual graph representation from a primal graph.\nFor purposes of visualisation and intuition, it is preferable to work with the network in its dual representation. This way, metrics such as centrality and accessibility are calculated relative to streets instead of intersections. The advantage is that you can then visualise the results on the street network itself. Additionally, angular distances (typically used for Space Syntax) are more intuitive to calculate on the dual graph. That said, nothing stops you from working with the primal graph if you prefer.\n\nfrom cityseer.tools import graphs, io, plot\n\nFirst, create a primal graph as before.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 500\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\nG = io.osm_graph_from_poly(poly_wgs)\nprint(G)\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 320 nodes and 487 edges\n\n\n\n\n\n\n\n\n\nA dual graph representation can then be created using the nx_to_dual function available from the cityseer package’s graphs module.\n\nG_dual = graphs.nx_to_dual(G)\nprint(G_dual)\n\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n\n\nMultiGraph with 487 nodes and 1151 edges\n\n\nNotice that the dual graph will have the same number of nodes as the primal graph’s number of edges, since the edges have been converted to nodes. The new edges are created by splitting the original edges at their midpoints, and then welding corresponding segments together across intersections. True representations of street geometries are therefore preserved in the dual graph, allowing for accurate calculations of metric distances and angular deviation.\n\nplot.plot_nx(G_dual, plot_geoms=True)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges"
  },
  {
    "objectID": "recipes/accessibility/osm_accessibility.html",
    "href": "recipes/accessibility/osm_accessibility.html",
    "title": "Landuse accessibility from OSM data",
    "section": "",
    "text": "Calculate landuse accessibilities from OSM data.\nThis examples calculates landuse accessibility to pubs and restaurants for London\n\nfrom cityseer.metrics import layers\nfrom cityseer.tools import graphs, io\nimport matplotlib.pyplot as plt\nfrom osmnx import features\n\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 1500\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\nG = io.osm_graph_from_poly(poly_wgs)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n\n\nPrepare the amenities GeoDataFrame.\n\nconvert to the same UTM CRS as the network\n\n\nto match EPSG code for UTM zone 30N per network data\n\ndata_gdf = features.features_from_polygon(\n    poly_wgs, tags={\"amenity\": [\"pub\", \"restaurant\"]}\n)\ndata_gdf = data_gdf.to_crs(nodes_gdf.crs)\ndata_gdf\n\n\n\n\n\n\n\n\n\ngeometry\naddr:city\naddr:country\naddr:housenumber\naddr:postcode\naddr:street\namenity\ncheck_date\ncontact:email\ncontact:phone\n...\ngift\naccess:conditional\nnote:access\nname:gsw\nnote:name:en\nnote:name:zh\nwebsite:en\nserving_system:buffet\nbuilding:use\nfloor\n\n\nelement\nid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnode\n21593236\nPOINT (699869.619 5711280.678)\nLondon\nGB\n12\nWC2A 3HP\nGate Street\npub\n2023-04-18\ninfo@theshiptavern.co.uk\n+44 20 7405 1992\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n25471087\nPOINT (699749.16 5710787.29)\nLondon\nNaN\n39\nNaN\nBow Street\npub\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n25475914\nPOINT (699606.322 5711699.239)\nNaN\nNaN\nNaN\nNaN\nNaN\npub\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n25746185\nPOINT (700308.36 5710758.42)\nLondon\nNaN\nNaN\nWC2R 3LD\nNaN\npub\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n26699558\nPOINT (699071.215 5711168.671)\nNaN\nNaN\nNaN\nNaN\nNaN\npub\n2024-09-10\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nway\n995954627\nPOLYGON ((699270.101 5710540.727, 699277.571 5...\nLondon\nNaN\n24\nWC2H 0HX\nCharing Cross Road\nrestaurant\n2024-10-07\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1016903732\nPOLYGON ((699039.571 5710804.095, 699036.453 5...\nNaN\nNaN\nNaN\nNaN\nNaN\nrestaurant\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1060462032\nPOLYGON ((700144.125 5710144.723, 700142.327 5...\nLondon\nNaN\nNaN\nSE1 8XX\nBelvedere Road\nrestaurant\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nretail\nNaN\n\n\n1072559143\nPOLYGON ((699383.906 5710631.863, 699382.376 5...\nLondon\nNaN\n17\nWC2E 9AX\nGarrick Street\nrestaurant\nNaN\nNaN\n+44 20 3675 0930\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1194233515\nPOLYGON ((700109.233 5711375.71, 700111.379 57...\nLondon\nNaN\n283-288\nWC1V 7HP\nHigh Holborn\npub\n2023-08-03\nNaN\n+44 20 7242 5669\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nGround\n\n\n\n\n1432 rows × 253 columns\n\n\n\n\n# extract nodes\ndata_gdf = data_gdf.loc[\"node\"]\n# reset index\ndata_gdf = data_gdf.reset_index(level=0, drop=True)\n# extract relevant columns\ndata_gdf = data_gdf[[\"amenity\", \"geometry\"]]\ndata_gdf\n\n\n\n\n\n\n\n\namenity\ngeometry\n\n\n\n\n0\npub\nPOINT (699869.619 5711280.678)\n\n\n1\npub\nPOINT (699749.16 5710787.29)\n\n\n2\npub\nPOINT (699606.322 5711699.239)\n\n\n3\npub\nPOINT (700308.36 5710758.42)\n\n\n4\npub\nPOINT (699071.215 5711168.671)\n\n\n...\n...\n...\n\n\n697\nrestaurant\nPOINT (698734.983 5712225.281)\n\n\n698\nrestaurant\nPOINT (699919.63 5711570.79)\n\n\n699\nrestaurant\nPOINT (698469.249 5710542.417)\n\n\n700\nrestaurant\nPOINT (699644.903 5710197.532)\n\n\n701\nrestaurant\nPOINT (699289.031 5710607.191)\n\n\n\n\n702 rows × 2 columns\n\n\n\n\n# compute pub accessibility\ndistances = [100, 200, 400, 800]\nnodes_gdf, data_gdf = layers.compute_accessibilities(\n    data_gdf,\n    landuse_column_label=\"amenity\",\n    accessibility_keys=[\"pub\", \"restaurant\"],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing land-use accessibility for: pub, restaurant\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 100m, Beta: 0.04, Walking Time: 1.25 minutes.\nINFO:cityseer.config:Distance: 200m, Beta: 0.02, Walking Time: 2.5 minutes.\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\nINFO:cityseer.config:Distance: 800m, Beta: 0.005, Walking Time: 10.0 minutes.\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_pub_100_nw', 'cc_pub_100_wt', 'cc_pub_200_nw',\n       'cc_pub_200_wt', 'cc_pub_400_nw', 'cc_pub_400_wt', 'cc_pub_800_nw',\n       'cc_pub_800_wt', 'cc_pub_nearest_max_800', 'cc_restaurant_100_nw',\n       'cc_restaurant_100_wt', 'cc_restaurant_200_nw', 'cc_restaurant_200_wt',\n       'cc_restaurant_400_nw', 'cc_restaurant_400_wt', 'cc_restaurant_800_nw',\n       'cc_restaurant_800_wt', 'cc_restaurant_nearest_max_800'],\n      dtype='object')\n\n\nThe output GeoDataFrame will contain new columns for each landuse and distance combination. For each of these the following will have been computed:\n\nA count of reachable instances of a given landuse (within the specified distance thresholds)\nSimilarly, a distance-weighted count of reachable locations\nThe distance to the nearest instance of a given landuse. Where there are no reachable landuses for a given node within the specified distance threshold, then a np.inf value will be returned.\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_restaurant_400_wt\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\ndata_gdf[data_gdf[\"amenity\"] == \"restaurant\"].plot(\n    markersize=2,\n    edgecolor=None,\n    color=\"white\",\n    legend=False,\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(697035.8123208123),\n np.float64(700647.6928482385),\n np.float64(5709134.052621752),\n np.float64(5712638.694212982))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_pub_nearest_max_800\",\n    cmap=\"viridis_r\",\n    legend=False,\n    ax=ax,\n)\ndata_gdf[data_gdf[\"amenity\"] == \"pub\"].plot(\n    markersize=2,\n    edgecolor=None,\n    color=\"white\",\n    legend=False,\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(697035.8123208123),\n np.float64(700647.6928482385),\n np.float64(5709196.424057339),\n np.float64(5712635.724144622))"
  },
  {
    "objectID": "recipes/accessibility/gpd_accessibility.html",
    "href": "recipes/accessibility/gpd_accessibility.html",
    "title": "Cityseer Guide",
    "section": "",
    "text": "import geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import layers\nfrom cityseer.tools import graphs, io\n\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n\n\n\nprems_gpd = gpd.read_file(\"data/madrid_premises/madrid_premises.gpkg\")\nprems_gpd.head()\n\n\n\n\n\n\n\n\nindex\nlocal_id\nlocal_distr_id\nlocal_distr_desc\nlocal_neighb_id\nlocal_neighb_desc\nlocal_neighb_code\nlocal_census_section_id\nlocal_census_section_desc\nsection_id\nsection_desc\ndivision_id\ndivision_desc\nepigraph_id\nepigraph_desc\neasting\nnorthing\ngeometry\n\n\n\n\n0\n0\n10003324\n1\nCENTRO\n105\nUNIVERSIDAD\n5\n1091\n91\nI\nhospitality\n56\nfood_bev\n561001\nRESTAURANTE\n440181.6\n4475586.5\nPOINT (440181.6 4475586.5)\n\n\n1\n1\n10003330\n1\nCENTRO\n105\nUNIVERSIDAD\n5\n1115\n115\nR\nart_rec_entert\n90\ncreat_entert\n900003\nTEATRO Y ACTIVIDADES ESCENICAS REALIZADAS EN D...\n440000.6\n4474761.5\nPOINT (440000.6 4474761.5)\n\n\n2\n2\n10003356\n1\nCENTRO\n104\nJUSTICIA\n4\n1074\n74\nI\nhospitality\n56\nfood_bev\n561004\nBAR RESTAURANTE\n440618.6\n4474692.5\nPOINT (440618.6 4474692.5)\n\n\n3\n3\n10003364\n1\nCENTRO\n104\nJUSTICIA\n4\n1075\n75\nG\nwholesale_retail_motor\n47\nretail\n472401\nCOMERCIO AL POR MENOR DE PAN Y PRODUCTOS DE PA...\n440666.6\n4474909.5\nPOINT (440666.6 4474909.5)\n\n\n4\n4\n10003367\n1\nCENTRO\n106\nSOL\n6\n1119\n119\nG\nwholesale_retail_motor\n47\nretail\n477701\nCOMERCIO AL POR MENOR DE JOYAS, RELOJERIA Y BI...\n440378.6\n4474380.5\nPOINT (440378.6 4474380.5)\n\n\n\n\n\n\n\n\nprems_gpd.division_desc.unique()\n\narray(['food_bev', 'creat_entert', 'retail', 'services', 'education',\n       'accommod', 'Real Estate Activities',\n       'Residential Care Activities',\n       'Social Services Without Accommodation',\n       'Graphic Arts and Reproduction of Recorded Media',\n       'Sale and Repair of Motor Vehicles and Motorcycles',\n       'Decontamination and Other Waste Management Services',\n       'Gambling and Betting Activities', 'sports_rec', 'health',\n       'Wholesale Trade and Middlemen, Except for Motor Vehicles and Motorcycles',\n       'Telecommunications',\n       'Financial Services, Except Insurance and Pension Funds',\n       'Associative Activities', 'Veterinary Activities',\n       'Auxiliary Services to Financial Services and Insurance',\n       'Insurance, Reinsurance, and Pension Funds, Except Compulsory Social Security',\n       'Rental Activities',\n       'Office Administrative and Other Business Support Activities',\n       'Technical Services of Architecture and Engineering; Technical Testing and Analysis',\n       'Other Manufacturing Industries',\n       'Storage and Activities Related to Transport',\n       'Specialized Construction Activities and Building Finishing',\n       'Clothing Manufacturing',\n       'Activities of Travel Agencies, Tour Operators, Reservation Services, and Related Activities',\n       'Land Transport and Pipeline Transport',\n       'Other Professional, Scientific, and Technical Activities',\n       'Computer Repair, Personal Effects, and Household Items',\n       'Publishing (Includes Software)', 'Postal and Courier Activities',\n       'Food Industry', 'Advertising and Market Research',\n       'Public Administration and Defense; Compulsory Social Security',\n       'Film, Video, and TV Program Activities, Sound Recording, and Music Publishing, Sound Recording and Music Publishing',\n       'Legal and Accounting Activities',\n       'Building Promotion and Construction',\n       'Supply of Electricity, Gas, Steam, and Air Conditioning',\n       'Activities of Libraries, Archives, Museums, and Other Cultural Activities',\n       'Paper Industry',\n       'Manufacturing of Computer, Electronic, and Optical Products',\n       'Security and Investigation Activities',\n       'Leather and Footwear Industry',\n       'Repair and Installation of Machinery and Equipment',\n       'Manufacturing of Metal Products, Except Machinery and Equipment',\n       'Furniture Manufacturing',\n       'Building Services and Gardening Activities', 'Chemical Industry',\n       'Programming, Consultancy, and Other Computer-Related Activities',\n       'Manufacturing of Other Non-Metallic Mineral Products',\n       'Textile Industry', 'Research and Development',\n       'Activities of Head Offices; Management Consultancy Activities',\n       'Pharmaceutical Product Manufacturing',\n       'Manufacturing of Machinery and Equipment N.E.C.',\n       'Manufacturing of Motor Vehicles, Trailers, and Semi-Trailers',\n       'Information Services',\n       'Manufacturing of Rubber and Plastic Products',\n       'Manufacturing of Electrical Equipment',\n       'Manufacturing of Other Transport Equipment', 'Civil Engineering',\n       'Wood and Cork Industry, Except Furniture; Basketry and Basketwork',\n       'Waste Collection, Treatment, and Disposal; Materials Recovery',\n       'Activities of Extraterritorial Organizations and Bodies',\n       'Air Transport', 'Employment Activities',\n       'Agriculture, Livestock, Hunting, and Related Service Activities',\n       'Metallurgy; Manufacturing of Iron, Steel, and Ferro-Alloy Products',\n       'Broadcasting and Television Programming and Broadcasting Activities',\n       'Wastewater Collection and Treatment', 'Beverage Manufacturing',\n       'Water Collection, Treatment, and Supply',\n       'Support Activities for Extractive Industries',\n       'Other Extractive Industries', 'Forestry and Logging',\n       'Tobacco Industry'], dtype=object)\n\n\n\n# compute pub accessibility\ndistances = [100, 200, 400, 800]\nnodes_gdf, prems_gpd = layers.compute_accessibilities(\n    prems_gpd,\n    landuse_column_label=\"division_desc\",\n    accessibility_keys=[\"food_bev\", \"creat_entert\", \"retail\"],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing land-use accessibility for: food_bev, creat_entert, retail\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 100m, Beta: 0.04, Walking Time: 1.25 minutes.\nINFO:cityseer.config:Distance: 200m, Beta: 0.02, Walking Time: 2.5 minutes.\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\nINFO:cityseer.config:Distance: 800m, Beta: 0.005, Walking Time: 10.0 minutes.\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_food_bev_100_nw', 'cc_food_bev_100_wt',\n       'cc_food_bev_200_nw', 'cc_food_bev_200_wt', 'cc_food_bev_400_nw',\n       'cc_food_bev_400_wt', 'cc_food_bev_800_nw', 'cc_food_bev_800_wt',\n       'cc_food_bev_nearest_max_800', 'cc_creat_entert_100_nw',\n       'cc_creat_entert_100_wt', 'cc_creat_entert_200_nw',\n       'cc_creat_entert_200_wt', 'cc_creat_entert_400_nw',\n       'cc_creat_entert_400_wt', 'cc_creat_entert_800_nw',\n       'cc_creat_entert_800_wt', 'cc_creat_entert_nearest_max_800',\n       'cc_retail_100_nw', 'cc_retail_100_wt', 'cc_retail_200_nw',\n       'cc_retail_200_wt', 'cc_retail_400_nw', 'cc_retail_400_wt',\n       'cc_retail_800_nw', 'cc_retail_800_wt', 'cc_retail_nearest_max_800'],\n      dtype='object')\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_retail_400_wt\",\n    cmap=\"inferno\",\n    legend=False,\n    ax=ax,\n)\nprems_gpd[prems_gpd[\"division_desc\"] == \"retail\"].plot(\n    markersize=1,\n    edgecolor=None,\n    color=\"white\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(439000, 439000 + 2500)\nax.set_ylim(4473000, 4473000 + 2500)\nax.axis(False)\n\n(np.float64(439000.0),\n np.float64(441500.0),\n np.float64(4473000.0),\n np.float64(4475500.0))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_food_bev_200_wt\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nprems_gpd[prems_gpd[\"division_desc\"] == \"food_bev\"].plot(\n    markersize=1,\n    edgecolor=None,\n    color=\"white\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(439000, 439000 + 2500)\nax.set_ylim(4473000, 4473000 + 2500)\nax.axis(False)\n\n(np.float64(439000.0),\n np.float64(441500.0),\n np.float64(4473000.0),\n np.float64(4475500.0))\n\n\n\n\n\n\n\n\n\n\nnodes_gdf[\"cc_creat_entert_nearest_max_800\"].fillna(800, inplace=True)\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_creat_entert_nearest_max_800\",\n    cmap=\"viridis_r\",\n    legend=False,\n    ax=ax,\n)\nprems_gpd[prems_gpd[\"division_desc\"] == \"creat_entert\"].plot(\n    markersize=2,\n    edgecolor=None,\n    color=\"white\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(439000, 439000 + 2500)\nax.set_ylim(4473000, 4473000 + 2500)\nax.axis(False)\n\n/var/folders/_n/10pj6p7s77548fdmhtj594n00000gp/T/ipykernel_59683/3453596325.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nodes_gdf[\"cc_creat_entert_nearest_max_800\"].fillna(800, inplace=True)\n\n\n(np.float64(439000.0),\n np.float64(441500.0),\n np.float64(4473000.0),\n np.float64(4475500.0))"
  },
  {
    "objectID": "recipes/centrality/gpd_angular_centrality.html",
    "href": "recipes/centrality/gpd_angular_centrality.html",
    "title": "Angular distance network centrality",
    "section": "",
    "text": "Calculate angular (geometric or “simplest”) distance centralities from a cityseer network.\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import networks\nfrom cityseer.tools import graphs, io\n\nPrepare the network as shown in other examples. Working with the dual graph is recommended.\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n\n\nUse network_structure_from_nx from the cityseer package’s io module to prepare the GeoDataFrames and NetworkStructure.\n\n# prepare the data structures\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n\n\nUse the node_centrality_simplest function from the cityseer package’s networks module to calculate shortest angular (geometric or “simplest”) distance centralities. The function requires a NetworkStructure and nodes GeoDataFrame prepared with the network_structure_from_nx function in the previous step.\nThe function can calculate centralities for numerous distances at once via the distances parameter, which accepts a list of distances.\nThe function returns the nodes GeoDataFrame with the outputs of the centralities added as columns. The columns are named cc_{centrality}_{distance}_ang. Standard geopandas functionality can be used to explore, visualise, or save the results. See the documentation for more information on the available centrality formulations.\n\ndistances = [500, 2000]\nnodes_gdf = networks.node_centrality_simplest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\nnodes_gdf.head()\n\nINFO:cityseer.metrics.networks:Computing simplest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 500m, Beta: 0.008, Walking Time: 6.25 minutes.\nINFO:cityseer.config:Distance: 2000m, Beta: 0.002, Walking Time: 25.0 minutes.\n\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\nprimal_edge\nprimal_edge_node_a\nprimal_edge_node_b\nprimal_edge_idx\ndual_node\ncc_density_500_ang\ncc_density_2000_ang\ncc_harmonic_500_ang\ncc_harmonic_2000_ang\ncc_hillier_500_ang\ncc_hillier_2000_ang\ncc_farness_500_ang\ncc_farness_2000_ang\ncc_betweenness_500_ang\ncc_betweenness_2000_ang\n\n\n\n\nx454839.5-y4476885.3_x454855.9-y4476818.6_k0\n0\n454848.067543\n4.476852e+06\nTrue\n1\nLINESTRING (454855.9 4476818.6, 454849.1 44768...\nx454855.9-y4476818.6\nx454839.5-y4476885.3\n0\nPOINT (454848.067543 4476852.042507)\n30.0\n124.0\n12.848804\n26.465605\n10.168567\n18.186932\n88.508049\n845.442261\n0.0\n0.0\n\n\nx454833.6-y4476910.5_x454839.5-y4476885.3_k0\n1\n454836.577015\n4.476898e+06\nTrue\n1\nLINESTRING (454839.5 4476885.3, 454838 4476891...\nx454839.5-y4476885.3\nx454833.6-y4476910.5\n0\nPOINT (454836.577015 4476897.9067)\n36.0\n127.0\n14.853752\n28.316143\n10.232138\n18.836437\n126.659744\n856.265991\n136.0\n968.0\n\n\nx454839.5-y4476885.3_x454877.1-y4476893.6_k0\n2\n454858.300000\n4.476889e+06\nTrue\n1\nLINESTRING (454839.5 4476885.3, 454877.1 44768...\nx454839.5-y4476885.3\nx454877.1-y4476893.6\n0\nPOINT (454858.3 4476889.45)\n33.0\n125.0\n12.366441\n24.028734\n9.009537\n16.524494\n120.871918\n945.566040\n106.0\n752.0\n\n\nx454823.1-y4476952.1_x454833.6-y4476910.5_k0\n3\n454828.362585\n4.476931e+06\nTrue\n1\nLINESTRING (454833.6 4476910.5, 454830.4 44769...\nx454833.6-y4476910.5\nx454823.1-y4476952.1\n0\nPOINT (454828.362585 4476931.303206)\n36.0\n124.0\n15.039588\n28.382860\n10.302912\n18.803555\n125.789688\n817.717712\n165.0\n1180.0\n\n\nx454758.1-y4476894.6_x454833.6-y4476910.5_k0\n4\n454795.845199\n4.476903e+06\nTrue\n1\nLINESTRING (454758.1 4476894.6, 454769.8 44768...\nx454833.6-y4476910.5\nx454758.1-y4476894.6\n0\nPOINT (454795.845199 4476902.571916)\n33.0\n125.0\n9.605127\n21.297651\n8.002337\n16.290869\n136.085236\n959.126282\n0.0\n0.0\n\n\n\n\n\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_density_500_ang', 'cc_density_2000_ang',\n       'cc_harmonic_500_ang', 'cc_harmonic_2000_ang', 'cc_hillier_500_ang',\n       'cc_hillier_2000_ang', 'cc_farness_500_ang', 'cc_farness_2000_ang',\n       'cc_betweenness_500_ang', 'cc_betweenness_2000_ang'],\n      dtype='object')\n\n\n\nnodes_gdf[\"cc_betweenness_2000_ang\"].describe()\n\ncount     47129.000000\nmean       8083.850098\nstd       15415.607422\nmin           0.000000\n25%         374.000000\n50%        2210.000000\n75%        8528.000000\nmax      227236.000000\nName: cc_betweenness_2000_ang, dtype: float64\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_harmonic_500_ang\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_betweenness_2000_ang\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\nAlternatively, you can define the distance thresholds using a list of minutes instead.\n\nnodes_gdf = networks.node_centrality_simplest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    minutes=[15],\n)\n\nINFO:cityseer.metrics.networks:Computing simplest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 1200m, Beta: 0.00333, Walking Time: 15.0 minutes.\n\n\nThe function will map the minutes values into the equivalent distances, which are reported in the logged output. Use the configurable speed_m_s parameter to set a custom metres per second walking speed.\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_density_500_ang', 'cc_density_2000_ang',\n       'cc_harmonic_500_ang', 'cc_harmonic_2000_ang', 'cc_hillier_500_ang',\n       'cc_hillier_2000_ang', 'cc_farness_500_ang', 'cc_farness_2000_ang',\n       'cc_betweenness_500_ang', 'cc_betweenness_2000_ang',\n       'cc_density_1200_ang', 'cc_harmonic_1200_ang', 'cc_hillier_1200_ang',\n       'cc_farness_1200_ang', 'cc_betweenness_1200_ang'],\n      dtype='object')\n\n\nAs per the function logging outputs, 15 minutes has been mapped to 1200m at default speed_m_s, so the corresponding outputs can be visualised using the 1200m columns.\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_harmonic_1200_ang\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))"
  },
  {
    "objectID": "recipes/centrality/index.html",
    "href": "recipes/centrality/index.html",
    "title": "Network Centrality",
    "section": "",
    "text": "Once you have created a cityseer compatible networkx graph, you can calculate a variety of centrality metrics. The following examples illustrate how to calculate and visualise these metrics.",
    "crumbs": [
      "Network Centrality"
    ]
  },
  {
    "objectID": "recipes/centrality/index.html#metric-distance-network-centrality",
    "href": "recipes/centrality/index.html#metric-distance-network-centrality",
    "title": "Network Centrality",
    "section": "Metric distance network centrality",
    "text": "Metric distance network centrality\nCalculate metric distance centralities from a networkx network prepared from an input geopandas GeoDataFrame.\nNotebook",
    "crumbs": [
      "Network Centrality"
    ]
  },
  {
    "objectID": "recipes/centrality/index.html#angular-distance-network-centrality",
    "href": "recipes/centrality/index.html#angular-distance-network-centrality",
    "title": "Network Centrality",
    "section": "Angular distance network centrality",
    "text": "Angular distance network centrality\nCalculate angular (geometric or “simplest”) distance centralities from a networkx network prepared from an input geopandas GeoDataFrame.\nNotebook",
    "crumbs": [
      "Network Centrality"
    ]
  },
  {
    "objectID": "recipes/centrality/index.html#network-centrality-from-osm-data",
    "href": "recipes/centrality/index.html#network-centrality-from-osm-data",
    "title": "Network Centrality",
    "section": "Network centrality from OSM data",
    "text": "Network centrality from OSM data\nCalculate metric distance centralities for OSM data.\nNotebook",
    "crumbs": [
      "Network Centrality"
    ]
  },
  {
    "objectID": "recipes/centrality/index.html#adding-gtfs-transport-data",
    "href": "recipes/centrality/index.html#adding-gtfs-transport-data",
    "title": "Network Centrality",
    "section": "Adding GTFS transport data",
    "text": "Adding GTFS transport data\n\nGTFS transport data support is still experimental.\n\nAdd GTFS transportation data to the network.\nNotebook",
    "crumbs": [
      "Network Centrality"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cookbook",
    "section": "",
    "text": "This repository contains examples for the cityseer package.",
    "crumbs": [
      "Cookbook"
    ]
  },
  {
    "objectID": "index.html#cookbook",
    "href": "index.html#cookbook",
    "title": "Cookbook",
    "section": "Cookbook",
    "text": "Cookbook\nThis cookbook contains a collection of recipes to illustrate typical usage scenarios for cityseer.\nThe recipes build on each other, so if you are wondering why or how to do something, you may find the answers in another (typically preceding) recipe.\nPlease open an issue to request the addition of further examples for a given use-case.",
    "crumbs": [
      "Cookbook"
    ]
  },
  {
    "objectID": "index.html#datasets",
    "href": "index.html#datasets",
    "title": "Cookbook",
    "section": "Datasets",
    "text": "Datasets\nThe datasets used from the recipes are available on the datasets page, where you can also find information on the sources.",
    "crumbs": [
      "Cookbook"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Cookbook",
    "section": "Installation",
    "text": "Installation\nTo install cityseer, you can use pip:\npip install --upgrade cityseer\nOr, from a notebook:\n!pip install --upgrade cityseer\nThe examples in this cookbook also use packages such as geopandas, networkx, and matplotlib. You can install them using the same method.",
    "crumbs": [
      "Cookbook"
    ]
  },
  {
    "objectID": "index.html#recipes",
    "href": "index.html#recipes",
    "title": "Cookbook",
    "section": "Recipes",
    "text": "Recipes\n\nNetwork Preparation\ncityseer uses networkx MultiGraphs to represent pedestrian networks. In doing so, it embeds spatial information in the graph nodes and edges so that it can accurately manipulate the graphs and calculate derivative metrics.\nSee the Network Preparation page for examples of how to create a cityseer compatible networkx graph from:\n\nOSM data using bounding boxes, radii around points, or from a custom boundary file;\ngeopandas data including the use of geopandas to open and import files such as geopackages and shapefiles;\nImports from momepy and osmnx;\nAutomatic and manual network simplification;\nCasting primal networks to dual representations to model and visualise metrics using streets instead of intersections.\n\n\n\nMetrics\ncityseer converts the network into a rust data structure prior to computing derivative metrics. This is done to improve performance so that it can be used on large networks.\nThis is done using network_structure_from_nx function which is available in the cityseer io module. Once you’ve prepared the nodes GeoDataFrame and the NetworkStructure from the network_structure_from_nx function, you can use it over and over again to calculate a variety of metrics. This function returns three objects:\n\nA nodes GeoDataFrame with the graph’s nodes. This is used for saving the outputs of calculations, and makes it easy to export the outputs of calculations to files that can be used from QGIS or other GIS software and workflows.\nAn edges GeoDataFrame with the graph’s edges, including information that has been generated for the graph’s edges such as metric and angular distances, entry and exit angles, and the overall bearing of the edge.\nA cityseer NetworkStructure object which is used by cityseer for calculating the measures.\n\nUse of the dual representation is optional, but recommended. Keep in mind that if you’ve converted your networkx network into a dual representation, then the nodes GeoDataFrame will contain both the dual nodes (midpoints of streets) the primal edges. The primal edges will be set to the default geometry so that outputs can be visualised using the primal street geometries.\n\nCentrality\nSee the Network Centrality page for examples of how to efficiently calculate a variety of shortest metric and simplest angular centrality metrics.\n\n\nAccessibility\nSee the Accessibility page for examples of how to efficiently calculate a variety of landuse accessibility and mixed-use metrics.\n\n\nStatistical Measures\n\n\n\nEdge Rolloff\nWhen calculating network or layer metrics, the network has to be buffered by a distance equal to the maximum distance threshold being considered by the algorithms. This prevents problematic results arising due to edge roll-off effects. For example, if running centrality and/or land-use analysis using distances of 500, 1000, 2000m, then the network must be buffered by 2000m. When using data layers, the data points should — for the same reasons — cover these buffered extents as well.\nThe live=True node attribute is used for identifying nodes falling within the original non-buffered graph extents as opposed to the live=False nodes that fall within the surrounding buffered area. The underlying shortest-path algorithms will have access to both live=True and live=False nodes (thus preventing edge rolloff), but derivative metrics are only tabulated for live=True nodes. This eliminates edge roll-off effects, reduces unnecessary computation, and cleanly identifies which nodes are or are not in the buffered roll-off area. If some other post-processing step will be used for filtering the nodes, or if boundary roll-off is not being considered, then use the default behaviour where all nodes automatically set to live=True.",
    "crumbs": [
      "Cookbook"
    ]
  },
  {
    "objectID": "recipes/centrality/osm_centrality.html",
    "href": "recipes/centrality/osm_centrality.html",
    "title": "Network centrality from OSM data",
    "section": "",
    "text": "Calculate metric distance centralities for OSM data.\nPrepare the network as shown in OSM examples. For example, from a relation id, bounding box, buffered point, or for extents defined from a loaded file.\nUsing a simplified representation is recommended, otherwise centrality measures will be distorted for “messier” portions of the network.\n\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import networks\nfrom cityseer.tools import graphs, io\n\nDefine a Polygon using one of several approaches shown in other examples. This example uses a buffered point.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 1500\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\nG = io.osm_graph_from_poly(poly_wgs)\nG_dual = graphs.nx_to_dual(G)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n\n\nUse network_structure_from_nx from the cityseer package’s io module to prepare the GeoDataFrames and NetworkStructure.\n\n# prepare the data structures\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n\n\nUse the node_centrality_shortest function from the cityseer package’s networks module to calculate shortest metric distance centralities.\nUse angular centralities with caution on automatically cleaned OSM networks, preferably only after visual inspection and manual cleaning.\n\ndistances = [500, 1000]\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\nnodes_gdf.head()\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 500m, Beta: 0.008, Walking Time: 6.25 minutes.\nINFO:cityseer.config:Distance: 1000m, Beta: 0.004, Walking Time: 12.5 minutes.\n\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\nprimal_edge\nprimal_edge_node_a\nprimal_edge_node_b\nprimal_edge_idx\ndual_node\n...\ncc_farness_500\ncc_farness_1000\ncc_harmonic_500\ncc_harmonic_1000\ncc_hillier_500\ncc_hillier_1000\ncc_betweenness_500\ncc_betweenness_1000\ncc_betweenness_beta_500\ncc_betweenness_beta_1000\n\n\n\n\n108285_108286_k0\n0\n698450.171116\n5.709385e+06\nTrue\n1\nLINESTRING (698442.587 5709352.756, 698455.797...\n108285\n108286\n0\nPOINT (698450.171116 5709384.525724)\n...\n5918.053223\n57333.406250\n0.204284\n0.281617\n0.142108\n0.144436\n0.0\n0.0\n0.000000\n0.000000\n\n\n108286_6226833739_k0\n1\n698445.518357\n5.709425e+06\nTrue\n1\nLINESTRING (698434.184 5709439.895, 698435.241...\n108286\n6226833739\n0\nPOINT (698445.518357 5709425.066711)\n...\n5108.617676\n59628.519531\n0.270784\n0.353576\n0.164624\n0.151354\n10.0\n10.0\n2.237725\n4.535670\n\n\n108286_1270370717±1784656260_k0\n2\n698462.969675\n5.709425e+06\nTrue\n1\nLINESTRING (698465.562 5709434.93, 698460.378 ...\n108286\n1270370717±1784656260\n0\nPOINT (698462.969675 5709425.051823)\n...\n5866.822266\n66397.101562\n0.310603\n0.401597\n0.163802\n0.162899\n32.0\n160.0\n8.084851\n20.537325\n\n\n1936005006_610896454±61089|05006_k0\n3\n698508.474675\n5.709425e+06\nTrue\n1\nLINESTRING (698494.235 5709445.995, 698518.821...\n1936005006\n610896454±61089|05006\n0\nPOINT (698508.474675 5709425.429823)\n...\n6557.025391\n66485.359375\n0.213854\n0.303207\n0.146560\n0.159569\n0.0\n0.0\n0.000000\n0.000000\n\n\n1784656176_6226833739_k0\n4\n698421.101261\n5.709460e+06\nTrue\n1\nLINESTRING (698434.184 5709439.895, 698432.763...\n6226833739\n1784656176\n0\nPOINT (698421.101261 5709459.670573)\n...\n5746.660645\n61360.828125\n0.265466\n0.348724\n0.167228\n0.156517\n63.0\n63.0\n14.596126\n29.232420\n\n\n\n\n5 rows × 26 columns\n\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_beta_500', 'cc_beta_1000', 'cc_cycles_500',\n       'cc_cycles_1000', 'cc_density_500', 'cc_density_1000', 'cc_farness_500',\n       'cc_farness_1000', 'cc_harmonic_500', 'cc_harmonic_1000',\n       'cc_hillier_500', 'cc_hillier_1000', 'cc_betweenness_500',\n       'cc_betweenness_1000', 'cc_betweenness_beta_500',\n       'cc_betweenness_beta_1000'],\n      dtype='object')\n\n\n\nnodes_gdf[\"cc_hillier_500\"].describe()\n\ncount    2825.000000\nmean        0.560724\nstd         0.208340\nmin         0.028747\n25%         0.421762\n50%         0.549569\n75%         0.695934\nmax         1.059475\nName: cc_hillier_500, dtype: float64\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_hillier_500\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(697035.8123208123),\n np.float64(700647.6928482385),\n np.float64(5709134.052621752),\n np.float64(5712638.694212982))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_betweenness_1000\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(697035.8123208123),\n np.float64(700647.6928482385),\n np.float64(5709134.052621752),\n np.float64(5712638.694212982))"
  },
  {
    "objectID": "recipes/centrality/gpd_metric_centrality.html",
    "href": "recipes/centrality/gpd_metric_centrality.html",
    "title": "Metric distance network centrality",
    "section": "",
    "text": "Calculate metric distance centralities from a cityseer network.\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import networks\nfrom cityseer.tools import graphs, io\n\nPrepare the network as shown in other examples. Working with the dual graph is recommended.\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n\n\nUse network_structure_from_nx from the cityseer package’s io module to prepare the GeoDataFrames and NetworkStructure.\n\n# prepare the data structures\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n\n\nUse the node_centrality_shortest function from the cityseer package’s networks module to calculate shortest metric distance centralities. The function requires a NetworkStructure and nodes GeoDataFrame prepared with the network_structure_from_nx function in the previous step.\nThe function can calculate centralities for numerous distances at once via the distances parameter, which accepts a list of distances.\nThe function returns the nodes GeoDataFrame with the outputs of the centralities added as columns. The columns are named cc_{centrality}_{distance}. Standard geopandas functionality can be used to explore, visualise, or save the results. See the documentation for more information on the available centrality formulations.\n\ndistances = [500, 2000]\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\nnodes_gdf.head()\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 500m, Beta: 0.008, Walking Time: 6.25 minutes.\nINFO:cityseer.config:Distance: 2000m, Beta: 0.002, Walking Time: 25.0 minutes.\n\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\nprimal_edge\nprimal_edge_node_a\nprimal_edge_node_b\nprimal_edge_idx\ndual_node\n...\ncc_farness_500\ncc_farness_2000\ncc_harmonic_500\ncc_harmonic_2000\ncc_hillier_500\ncc_hillier_2000\ncc_betweenness_500\ncc_betweenness_2000\ncc_betweenness_beta_500\ncc_betweenness_beta_2000\n\n\n\n\nx454839.5-y4476885.3_x454855.9-y4476818.6_k0\n0\n454848.067543\n4.476852e+06\nTrue\n1\nLINESTRING (454855.9 4476818.6, 454849.1 44768...\nx454855.9-y4476818.6\nx454839.5-y4476885.3\n0\nPOINT (454848.067543 4476852.042507)\n...\n7418.207031\n163780.625000\n0.199088\n0.315512\n0.121323\n0.148589\n0.0\n0.0\n0.000000\n0.000000\n\n\nx454833.6-y4476910.5_x454839.5-y4476885.3_k0\n1\n454836.577015\n4.476898e+06\nTrue\n1\nLINESTRING (454839.5 4476885.3, 454838 4476891...\nx454839.5-y4476885.3\nx454833.6-y4476910.5\n0\nPOINT (454836.577015 4476897.9067)\n...\n10061.338867\n162550.625000\n0.294068\n0.401464\n0.143520\n0.155527\n127.0\n1032.0\n18.257139\n174.897049\n\n\nx454839.5-y4476885.3_x454877.1-y4476893.6_k0\n2\n454858.300000\n4.476889e+06\nTrue\n1\nLINESTRING (454839.5 4476885.3, 454877.1 44768...\nx454839.5-y4476885.3\nx454877.1-y4476893.6\n0\nPOINT (454858.3 4476889.45)\n...\n8638.165039\n167096.218750\n0.313121\n0.424865\n0.133825\n0.151296\n99.0\n753.0\n18.619455\n135.658371\n\n\nx454823.1-y4476952.1_x454833.6-y4476910.5_k0\n3\n454828.362585\n4.476931e+06\nTrue\n1\nLINESTRING (454833.6 4476910.5, 454830.4 44769...\nx454833.6-y4476910.5\nx454823.1-y4476952.1\n0\nPOINT (454828.362585 4476931.303206)\n...\n10452.838867\n161802.000000\n0.281164\n0.389349\n0.153068\n0.160202\n158.0\n1308.0\n17.099850\n212.337875\n\n\nx454758.1-y4476894.6_x454833.6-y4476910.5_k0\n4\n454795.845199\n4.476903e+06\nTrue\n1\nLINESTRING (454758.1 4476894.6, 454769.8 44768...\nx454833.6-y4476910.5\nx454758.1-y4476894.6\n0\nPOINT (454795.845199 4476902.571916)\n...\n9720.206055\n166860.140625\n0.197214\n0.307718\n0.126026\n0.151510\n0.0\n0.0\n0.000000\n0.000000\n\n\n\n\n5 rows × 26 columns\n\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_beta_500', 'cc_beta_2000', 'cc_cycles_500',\n       'cc_cycles_2000', 'cc_density_500', 'cc_density_2000', 'cc_farness_500',\n       'cc_farness_2000', 'cc_harmonic_500', 'cc_harmonic_2000',\n       'cc_hillier_500', 'cc_hillier_2000', 'cc_betweenness_500',\n       'cc_betweenness_2000', 'cc_betweenness_beta_500',\n       'cc_betweenness_beta_2000'],\n      dtype='object')\n\n\n\nnodes_gdf[\"cc_betweenness_2000\"].describe()\n\ncount     47129.000000\nmean       9697.500000\nstd       14681.911133\nmin           0.000000\n25%         701.000000\n50%        3823.000000\n75%       12501.000000\nmax      237420.000000\nName: cc_betweenness_2000, dtype: float64\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_harmonic_500\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_betweenness_2000\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\nAlternatively, you can define the distance thresholds using a list of minutes instead.\n\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    minutes=[15],\n)\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 1200m, Beta: 0.00333, Walking Time: 15.0 minutes.\n\n\nThe function will map the minutes values into the equivalent distances, which are reported in the logged output. Use the configurable speed_m_s parameter to set a custom metres per second walking speed.\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_beta_500', 'cc_beta_2000', 'cc_cycles_500',\n       'cc_cycles_2000', 'cc_density_500', 'cc_density_2000', 'cc_farness_500',\n       'cc_farness_2000', 'cc_harmonic_500', 'cc_harmonic_2000',\n       'cc_hillier_500', 'cc_hillier_2000', 'cc_betweenness_500',\n       'cc_betweenness_2000', 'cc_betweenness_beta_500',\n       'cc_betweenness_beta_2000', 'cc_beta_1200', 'cc_cycles_1200',\n       'cc_density_1200', 'cc_farness_1200', 'cc_harmonic_1200',\n       'cc_hillier_1200', 'cc_betweenness_1200', 'cc_betweenness_beta_1200'],\n      dtype='object')\n\n\nAs per the function logging outputs, 15 minutes has been mapped to 1200m at default speed_m_s, so the corresponding outputs can be visualised using the 1200m columns.\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_harmonic_1200\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\nFor spatial-impedance weighted forms of centralities (beta variants), you can specify the beta parameter explicitly. These will otherwise be extrapolated automatically from the distances or minutes parameters. See the documentation for more information on how spatial impedances are converted to distance thresholds.\n\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    betas=[0.01],\n)\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_beta_500', 'cc_beta_2000', 'cc_cycles_500',\n       'cc_cycles_2000', 'cc_density_500', 'cc_density_2000', 'cc_farness_500',\n       'cc_farness_2000', 'cc_harmonic_500', 'cc_harmonic_2000',\n       'cc_hillier_500', 'cc_hillier_2000', 'cc_betweenness_500',\n       'cc_betweenness_2000', 'cc_betweenness_beta_500',\n       'cc_betweenness_beta_2000', 'cc_beta_1200', 'cc_cycles_1200',\n       'cc_density_1200', 'cc_farness_1200', 'cc_harmonic_1200',\n       'cc_hillier_1200', 'cc_betweenness_1200', 'cc_betweenness_beta_1200',\n       'cc_beta_400', 'cc_cycles_400', 'cc_density_400', 'cc_farness_400',\n       'cc_harmonic_400', 'cc_hillier_400', 'cc_betweenness_400',\n       'cc_betweenness_beta_400'],\n      dtype='object')\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_beta_400\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))"
  },
  {
    "objectID": "recipes/centrality/centrality_metro.html",
    "href": "recipes/centrality/centrality_metro.html",
    "title": "Calculate centralities",
    "section": "",
    "text": "import geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import networks\nfrom cityseer.tools import graphs, io\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n# prepare the data structures\nnodes_gdf, edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\ndistances = [500, 2000, 5000]\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\nfor col in nodes_gdf.columns:\n    if col.startswith(\"cc_\"):\n        nodes_gdf[f\"{col}_not\"] = nodes_gdf[col]\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 500m, Beta: 0.008, Walking Time: 6.25 minutes.\nINFO:cityseer.config:Distance: 2000m, Beta: 0.002, Walking Time: 25.0 minutes.\nINFO:cityseer.config:Distance: 5000m, Beta: 0.0008, Walking Time: 62.5 minutes.\nnodes_gdf, edges_gdf, network_structure, stops, avg_stop_pairs = io.add_transport_gtfs(\n    \"data/madrid_gtfs/madrid_metro\",\n    nodes_gdf,\n    edges_gdf,\n    network_structure,\n)\n\nINFO:cityseer.tools.io:Loading GTFS data from data/madrid_gtfs/madrid_metro\nINFO:cityseer.tools.io:Loaded 1272 stops and 2360 stop times\nINFO:cityseer.tools.io:Adding GTFS stops to network nodes.\nINFO:cityseer.tools.io:Generating segment durations between stops.\nINFO:cityseer.tools.io:Adding GTFS segments to network edges.\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.12/site-packages/cityseer/tools/io.py:1571: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n  edges_gdf = pd.concat([edges_gdf, new_edges_gdf], axis=0, ignore_index=False)  # type: ignore\nstops\n\n\n\n\n\n\n\n\nstop_id\nstop_code\nstop_name\nstop_desc\nstop_lat\nstop_lon\nzone_id\nstop_url\nlocation_type\nparent_station\nstop_timezone\nwheelchair_boarding\navg_wait_time\n\n\n\n\n0\ngtfs-data/madrid_gtfs/madrid_metro-par_4_1\n1\nPLAZA DE CASTILLA\nPaseo de la Castellana 189\n40.46690\n-3.68917\nA\nhttp://www.crtm.es\n0\nest_90_21\nNaN\n0\n430.357143\n\n\n1\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1\n1\nPlaza de Castilla\nPaseo de la Castellana 189\n40.46682\n-3.68918\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\n\n\n2\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1040\n1\nAscensor\nPlaza de Castilla 9\n40.46555\n-3.68877\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\n\n\n3\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1043\n1\nIntercambiador Superficie\nPaseo de la Castellana 191 B\n40.46728\n-3.68915\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\n\n\n4\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1044\n1\nAscensor\nPaseo de la Castellana 189\n40.46702\n-3.68918\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1267\ngtfs-data/madrid_gtfs/madrid_metro-est_4_234\n234\nHOSPITAL SEVERO OCHOA\nAvda Orellana 3\n40.32177\n-3.76797\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\n\n\n1268\ngtfs-data/madrid_gtfs/madrid_metro-est_4_235\n235\nLEGANES CENTRAL\nCalle Virgen del Camino 1\n40.32899\n-3.77154\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\n\n\n1269\ngtfs-data/madrid_gtfs/madrid_metro-est_4_236\n236\nSAN NICASIO\nAvda Mar Mediterráneo SN\n40.33616\n-3.77587\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\n\n\n1270\ngtfs-data/madrid_gtfs/madrid_metro-par_4_237\n237\nOPERA\nPlaza de Isabel II 9\n40.41809\n-3.70928\nA\nhttp://www.crtm.es\n0\nest_4_36\nNaN\n0\n13.214286\n\n\n1271\ngtfs-data/madrid_gtfs/madrid_metro-par_4_238\n238\nPRINCIPE PIO\nPaseo de la Florida 2\n40.42099\n-3.72033\nA\nhttp://www.crtm.es\n0\nest_90_18\nNaN\n1\n13.214286\n\n\n\n\n1272 rows × 13 columns\n# convert stops to geopandas\nstops_gdf = gpd.GeoDataFrame(\n    stops,\n    geometry=gpd.points_from_xy(stops[\"stop_lon\"], stops[\"stop_lat\"]),\n    crs=4326,  # Adjust the CRS to suit your data if needed\n)\nstops_gdf = stops_gdf.to_crs(streets_gpd.crs.to_epsg())\nstops_gdf\n\n\n\n\n\n\n\n\nstop_id\nstop_code\nstop_name\nstop_desc\nstop_lat\nstop_lon\nzone_id\nstop_url\nlocation_type\nparent_station\nstop_timezone\nwheelchair_boarding\navg_wait_time\ngeometry\n\n\n\n\n0\ngtfs-data/madrid_gtfs/madrid_metro-par_4_1\n1\nPLAZA DE CASTILLA\nPaseo de la Castellana 189\n40.46690\n-3.68917\nA\nhttp://www.crtm.es\n0\nest_90_21\nNaN\n0\n430.357143\nPOINT (441575.052 4479808.7)\n\n\n1\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1\n1\nPlaza de Castilla\nPaseo de la Castellana 189\n40.46682\n-3.68918\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441574.135 4479799.826)\n\n\n2\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1040\n1\nAscensor\nPlaza de Castilla 9\n40.46555\n-3.68877\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441607.793 4479658.584)\n\n\n3\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1043\n1\nIntercambiador Superficie\nPaseo de la Castellana 191 B\n40.46728\n-3.68915\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441577.077 4479850.867)\n\n\n4\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1044\n1\nAscensor\nPaseo de la Castellana 189\n40.46702\n-3.68918\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441574.308 4479822.026)\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1267\ngtfs-data/madrid_gtfs/madrid_metro-est_4_234\n234\nHOSPITAL SEVERO OCHOA\nAvda Orellana 3\n40.32177\n-3.76797\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\nPOINT (434754.721 4463754.488)\n\n\n1268\ngtfs-data/madrid_gtfs/madrid_metro-est_4_235\n235\nLEGANES CENTRAL\nCalle Virgen del Camino 1\n40.32899\n-3.77154\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\nPOINT (434458.401 4464558.532)\n\n\n1269\ngtfs-data/madrid_gtfs/madrid_metro-est_4_236\n236\nSAN NICASIO\nAvda Mar Mediterráneo SN\n40.33616\n-3.77587\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\nPOINT (434097.544 4465357.604)\n\n\n1270\ngtfs-data/madrid_gtfs/madrid_metro-par_4_237\n237\nOPERA\nPlaza de Isabel II 9\n40.41809\n-3.70928\nA\nhttp://www.crtm.es\n0\nest_4_36\nNaN\n0\n13.214286\nPOINT (439826.687 4474404.289)\n\n\n1271\ngtfs-data/madrid_gtfs/madrid_metro-par_4_238\n238\nPRINCIPE PIO\nPaseo de la Florida 2\n40.42099\n-3.72033\nA\nhttp://www.crtm.es\n0\nest_90_18\nNaN\n1\n13.214286\nPOINT (438891.852 4474733.771)\n\n\n\n\n1272 rows × 14 columns\nstops.avg_wait_time.describe()\n# count nan\nstops.avg_wait_time.isna().sum()\n# impute\n\nnp.int64(982)\navg_stop_pairs\n\n\n\n\n\n\n\n\nprev_stop_id\nnext_stop_id\navg_segment_time\n\n\n\n\n0\ngtfs-data/madrid_gtfs/madrid_metro-par_4_1\ngtfs-data/madrid_gtfs/madrid_metro-par_4_10\n92.0\n\n\n1\ngtfs-data/madrid_gtfs/madrid_metro-par_4_10\ngtfs-data/madrid_gtfs/madrid_metro-par_4_11\n80.0\n\n\n2\ngtfs-data/madrid_gtfs/madrid_metro-par_4_100\ngtfs-data/madrid_gtfs/madrid_metro-par_4_101\n86.5\n\n\n3\ngtfs-data/madrid_gtfs/madrid_metro-par_4_101\ngtfs-data/madrid_gtfs/madrid_metro-par_4_102\n126.5\n\n\n4\ngtfs-data/madrid_gtfs/madrid_metro-par_4_102\ngtfs-data/madrid_gtfs/madrid_metro-par_4_103\n184.0\n\n\n...\n...\n...\n...\n\n\n274\ngtfs-data/madrid_gtfs/madrid_metro-par_4_94\ngtfs-data/madrid_gtfs/madrid_metro-par_4_95\n110.0\n\n\n275\ngtfs-data/madrid_gtfs/madrid_metro-par_4_95\ngtfs-data/madrid_gtfs/madrid_metro-par_4_96\n107.5\n\n\n276\ngtfs-data/madrid_gtfs/madrid_metro-par_4_96\ngtfs-data/madrid_gtfs/madrid_metro-par_4_97\n104.5\n\n\n277\ngtfs-data/madrid_gtfs/madrid_metro-par_4_97\ngtfs-data/madrid_gtfs/madrid_metro-par_4_98\n93.0\n\n\n278\ngtfs-data/madrid_gtfs/madrid_metro-par_4_98\ngtfs-data/madrid_gtfs/madrid_metro-par_4_99\n116.5\n\n\n\n\n279 rows × 3 columns\nThe centrality methods can now be computed.\ndistances = [500, 2000, 5000]\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 500m, Beta: 0.008, Walking Time: 6.25 minutes.\nINFO:cityseer.config:Distance: 2000m, Beta: 0.002, Walking Time: 25.0 minutes.\nINFO:cityseer.config:Distance: 5000m, Beta: 0.0008, Walking Time: 62.5 minutes.\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_beta_500', 'cc_beta_2000', 'cc_beta_5000',\n       'cc_cycles_500', 'cc_cycles_2000', 'cc_cycles_5000', 'cc_density_500',\n       'cc_density_2000', 'cc_density_5000', 'cc_farness_500',\n       'cc_farness_2000', 'cc_farness_5000', 'cc_harmonic_500',\n       'cc_harmonic_2000', 'cc_harmonic_5000', 'cc_hillier_500',\n       'cc_hillier_2000', 'cc_hillier_5000', 'cc_betweenness_500',\n       'cc_betweenness_2000', 'cc_betweenness_5000', 'cc_betweenness_beta_500',\n       'cc_betweenness_beta_2000', 'cc_betweenness_beta_5000',\n       'cc_beta_500_not', 'cc_beta_2000_not', 'cc_beta_5000_not',\n       'cc_cycles_500_not', 'cc_cycles_2000_not', 'cc_cycles_5000_not',\n       'cc_density_500_not', 'cc_density_2000_not', 'cc_density_5000_not',\n       'cc_farness_500_not', 'cc_farness_2000_not', 'cc_farness_5000_not',\n       'cc_harmonic_500_not', 'cc_harmonic_2000_not', 'cc_harmonic_5000_not',\n       'cc_hillier_500_not', 'cc_hillier_2000_not', 'cc_hillier_5000_not',\n       'cc_betweenness_500_not', 'cc_betweenness_2000_not',\n       'cc_betweenness_5000_not', 'cc_betweenness_beta_500_not',\n       'cc_betweenness_beta_2000_not', 'cc_betweenness_beta_5000_not'],\n      dtype='object')"
  },
  {
    "objectID": "recipes/centrality/centrality_metro.html#plots",
    "href": "recipes/centrality/centrality_metro.html#plots",
    "title": "Calculate centralities",
    "section": "Plots",
    "text": "Plots\nLet’s plot a selection of distance thresholds for each of the computed measures.\n\nimport matplotlib.colors as colors\n\nfig, axes = plt.subplots(2, 1, figsize=(8, 12), facecolor=\"#1d1d1d\")\nfig.suptitle(\n    \"Shortest path centrality\",\n    fontsize=10,\n    color=\"#ddd\",\n)\n\nnodes_gdf.plot(\n    column=\"cc_harmonic_2000\",\n    cmap=\"magma\",\n    legend=False,\n    ax=axes[0],\n)\naxes[0].set_title(\n    \"Harmonic closeness centrality\",\n    fontsize=8,\n    color=\"#ddd\",\n)\nstops_gdf.plot(ax=axes[0], color=\"red\", markersize=1)\n\nnodes_gdf.plot(\n    column=\"cc_betweenness_2000\",\n    cmap=\"magma\",\n    norm=colors.LogNorm(),  # Apply log normalization\n    legend=False,\n    ax=axes[1],\n)\naxes[1].set_title(\n    \"Betweenness centrality\",\n    fontsize=8,\n    color=\"#ddd\",\n)\nstops_gdf.plot(ax=axes[1], color=\"red\", markersize=1)\n\nfor ax in axes:\n    ax.set_xlim(438500, 438500 + 3500)\n    ax.set_ylim(4472500, 4472500 + 3500)\n    ax.axis(False)\n\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nnodes_gdf[\"cc_harmonic_2000_diff\"] = (\n    nodes_gdf[\"cc_harmonic_2000\"] - nodes_gdf[\"cc_harmonic_2000_not\"]\n)\nnodes_gdf[\"cc_betweenness_2000_diff\"] = (\n    nodes_gdf[\"cc_betweenness_2000\"] - nodes_gdf[\"cc_betweenness_2000_not\"]\n)\n\n\nfig, axes = plt.subplots(2, 1, figsize=(8, 12), facecolor=\"#1d1d1d\")\nfig.suptitle(\n    \"Shortest path centrality\",\n    fontsize=10,\n    color=\"#ddd\",\n)\n\nnodes_gdf.plot(\n    column=\"cc_harmonic_2000_diff\",\n    cmap=\"viridis\",\n    legend=False,\n    ax=axes[0],\n)\naxes[0].set_title(\n    \"Harmonic closeness centrality\",\n    fontsize=8,\n    color=\"#ddd\",\n)\nstops_gdf.plot(ax=axes[0], color=\"red\", markersize=1)\n\nnodes_gdf.plot(\n    column=\"cc_betweenness_2000_diff\",\n    cmap=\"viridis\",\n    norm=colors.LogNorm(),  # Apply log normalization\n    legend=False,\n    ax=axes[1],\n)\naxes[1].set_title(\n    \"Betweenness centrality\",\n    fontsize=8,\n    color=\"#ddd\",\n)\nstops_gdf.plot(ax=axes[1], color=\"red\", markersize=1)\n\nfor ax in axes:\n    ax.set_xlim(438500, 438500 + 3500)\n    ax.set_ylim(4472500, 4472500 + 3500)\n    ax.axis(False)\n\nplt.tight_layout()"
  },
  {
    "objectID": "recipes/accessibility/index.html",
    "href": "recipes/accessibility/index.html",
    "title": "Accessibilities",
    "section": "",
    "text": "Once you have created a cityseer compatible networkx graph, you can calculate accessibilities to landuses or points of interest.",
    "crumbs": [
      "Accessibilities"
    ]
  },
  {
    "objectID": "recipes/accessibility/index.html#landuse-accessibility-from-geopandas-data",
    "href": "recipes/accessibility/index.html#landuse-accessibility-from-geopandas-data",
    "title": "Accessibilities",
    "section": "Landuse accessibility from geopandas data",
    "text": "Landuse accessibility from geopandas data\nCalculate landuse accessibilities from a geopandas GeoDataFrame.\nNotebook",
    "crumbs": [
      "Accessibilities"
    ]
  },
  {
    "objectID": "recipes/accessibility/index.html#landuse-accessibility-from-osm-data",
    "href": "recipes/accessibility/index.html#landuse-accessibility-from-osm-data",
    "title": "Accessibilities",
    "section": "Landuse accessibility from OSM data",
    "text": "Landuse accessibility from OSM data\nCalculate landuse accessibilities from OpenStreetMap.\nNotebook",
    "crumbs": [
      "Accessibilities"
    ]
  },
  {
    "objectID": "recipes/accessibility/index.html#calculating-mixed-uses",
    "href": "recipes/accessibility/index.html#calculating-mixed-uses",
    "title": "Accessibilities",
    "section": "Calculating mixed-uses",
    "text": "Calculating mixed-uses\nCalculate mixed land-uses.\nNotebook",
    "crumbs": [
      "Accessibilities"
    ]
  },
  {
    "objectID": "recipes/accessibility/gpd_mixed_uses.html",
    "href": "recipes/accessibility/gpd_mixed_uses.html",
    "title": "Cityseer Guide",
    "section": "",
    "text": "import geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import layers\nfrom cityseer.tools import graphs, io\n\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n\n\n\nprems_gpd = gpd.read_file(\"data/madrid_premises/madrid_premises.gpkg\")\nprems_gpd.head()\n\n\n\n\n\n\n\n\nindex\nlocal_id\nlocal_distr_id\nlocal_distr_desc\nlocal_neighb_id\nlocal_neighb_desc\nlocal_neighb_code\nlocal_census_section_id\nlocal_census_section_desc\nsection_id\nsection_desc\ndivision_id\ndivision_desc\nepigraph_id\nepigraph_desc\neasting\nnorthing\ngeometry\n\n\n\n\n0\n0\n10003324\n1\nCENTRO\n105\nUNIVERSIDAD\n5\n1091\n91\nI\nhospitality\n56\nfood_bev\n561001\nRESTAURANTE\n440181.6\n4475586.5\nPOINT (440181.6 4475586.5)\n\n\n1\n1\n10003330\n1\nCENTRO\n105\nUNIVERSIDAD\n5\n1115\n115\nR\nart_rec_entert\n90\ncreat_entert\n900003\nTEATRO Y ACTIVIDADES ESCENICAS REALIZADAS EN D...\n440000.6\n4474761.5\nPOINT (440000.6 4474761.5)\n\n\n2\n2\n10003356\n1\nCENTRO\n104\nJUSTICIA\n4\n1074\n74\nI\nhospitality\n56\nfood_bev\n561004\nBAR RESTAURANTE\n440618.6\n4474692.5\nPOINT (440618.6 4474692.5)\n\n\n3\n3\n10003364\n1\nCENTRO\n104\nJUSTICIA\n4\n1075\n75\nG\nwholesale_retail_motor\n47\nretail\n472401\nCOMERCIO AL POR MENOR DE PAN Y PRODUCTOS DE PA...\n440666.6\n4474909.5\nPOINT (440666.6 4474909.5)\n\n\n4\n4\n10003367\n1\nCENTRO\n106\nSOL\n6\n1119\n119\nG\nwholesale_retail_motor\n47\nretail\n477701\nCOMERCIO AL POR MENOR DE JOYAS, RELOJERIA Y BI...\n440378.6\n4474380.5\nPOINT (440378.6 4474380.5)\n\n\n\n\n\n\n\n\nprems_gpd.division_desc.unique()\n\narray(['food_bev', 'creat_entert', 'retail', 'services', 'education',\n       'accommod', 'Real Estate Activities',\n       'Residential Care Activities',\n       'Social Services Without Accommodation',\n       'Graphic Arts and Reproduction of Recorded Media',\n       'Sale and Repair of Motor Vehicles and Motorcycles',\n       'Decontamination and Other Waste Management Services',\n       'Gambling and Betting Activities', 'sports_rec', 'health',\n       'Wholesale Trade and Middlemen, Except for Motor Vehicles and Motorcycles',\n       'Telecommunications',\n       'Financial Services, Except Insurance and Pension Funds',\n       'Associative Activities', 'Veterinary Activities',\n       'Auxiliary Services to Financial Services and Insurance',\n       'Insurance, Reinsurance, and Pension Funds, Except Compulsory Social Security',\n       'Rental Activities',\n       'Office Administrative and Other Business Support Activities',\n       'Technical Services of Architecture and Engineering; Technical Testing and Analysis',\n       'Other Manufacturing Industries',\n       'Storage and Activities Related to Transport',\n       'Specialized Construction Activities and Building Finishing',\n       'Clothing Manufacturing',\n       'Activities of Travel Agencies, Tour Operators, Reservation Services, and Related Activities',\n       'Land Transport and Pipeline Transport',\n       'Other Professional, Scientific, and Technical Activities',\n       'Computer Repair, Personal Effects, and Household Items',\n       'Publishing (Includes Software)', 'Postal and Courier Activities',\n       'Food Industry', 'Advertising and Market Research',\n       'Public Administration and Defense; Compulsory Social Security',\n       'Film, Video, and TV Program Activities, Sound Recording, and Music Publishing, Sound Recording and Music Publishing',\n       'Legal and Accounting Activities',\n       'Building Promotion and Construction',\n       'Supply of Electricity, Gas, Steam, and Air Conditioning',\n       'Activities of Libraries, Archives, Museums, and Other Cultural Activities',\n       'Paper Industry',\n       'Manufacturing of Computer, Electronic, and Optical Products',\n       'Security and Investigation Activities',\n       'Leather and Footwear Industry',\n       'Repair and Installation of Machinery and Equipment',\n       'Manufacturing of Metal Products, Except Machinery and Equipment',\n       'Furniture Manufacturing',\n       'Building Services and Gardening Activities', 'Chemical Industry',\n       'Programming, Consultancy, and Other Computer-Related Activities',\n       'Manufacturing of Other Non-Metallic Mineral Products',\n       'Textile Industry', 'Research and Development',\n       'Activities of Head Offices; Management Consultancy Activities',\n       'Pharmaceutical Product Manufacturing',\n       'Manufacturing of Machinery and Equipment N.E.C.',\n       'Manufacturing of Motor Vehicles, Trailers, and Semi-Trailers',\n       'Information Services',\n       'Manufacturing of Rubber and Plastic Products',\n       'Manufacturing of Electrical Equipment',\n       'Manufacturing of Other Transport Equipment', 'Civil Engineering',\n       'Wood and Cork Industry, Except Furniture; Basketry and Basketwork',\n       'Waste Collection, Treatment, and Disposal; Materials Recovery',\n       'Activities of Extraterritorial Organizations and Bodies',\n       'Air Transport', 'Employment Activities',\n       'Agriculture, Livestock, Hunting, and Related Service Activities',\n       'Metallurgy; Manufacturing of Iron, Steel, and Ferro-Alloy Products',\n       'Broadcasting and Television Programming and Broadcasting Activities',\n       'Wastewater Collection and Treatment', 'Beverage Manufacturing',\n       'Water Collection, Treatment, and Supply',\n       'Support Activities for Extractive Industries',\n       'Other Extractive Industries', 'Forestry and Logging',\n       'Tobacco Industry'], dtype=object)\n\n\n\n# compute pub accessibility\ndistances = [100, 200, 400, 800]\nnodes_gdf, prems_gpd = layers.compute_mixed_uses(\n    prems_gpd,\n    landuse_column_label=\"division_desc\",\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing mixed-use measures.\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 100m, Beta: 0.04, Walking Time: 1.25 minutes.\nINFO:cityseer.config:Distance: 200m, Beta: 0.02, Walking Time: 2.5 minutes.\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\nINFO:cityseer.config:Distance: 800m, Beta: 0.005, Walking Time: 10.0 minutes.\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_hill_q0_100_nw', 'cc_hill_q0_100_wt',\n       'cc_hill_q1_100_nw', 'cc_hill_q1_100_wt', 'cc_hill_q2_100_nw',\n       'cc_hill_q2_100_wt', 'cc_hill_q0_200_nw', 'cc_hill_q0_200_wt',\n       'cc_hill_q1_200_nw', 'cc_hill_q1_200_wt', 'cc_hill_q2_200_nw',\n       'cc_hill_q2_200_wt', 'cc_hill_q0_400_nw', 'cc_hill_q0_400_wt',\n       'cc_hill_q1_400_nw', 'cc_hill_q1_400_wt', 'cc_hill_q2_400_nw',\n       'cc_hill_q2_400_wt', 'cc_hill_q0_800_nw', 'cc_hill_q0_800_wt',\n       'cc_hill_q1_800_nw', 'cc_hill_q1_800_wt', 'cc_hill_q2_800_nw',\n       'cc_hill_q2_800_wt'],\n      dtype='object')\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_hill_q0_400_wt\",\n    cmap=\"hot\",\n    legend=False,\n    ax=ax,\n)\nprems_gpd.plot(\n    column=\"division_desc\",\n    cmap=\"tab20\",\n    markersize=1,\n    edgecolor=None,\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(439000, 439000 + 2500)\nax.set_ylim(4473000, 4473000 + 2500)\nax.axis(False)\n\n(np.float64(439000.0),\n np.float64(441500.0),\n np.float64(4473000.0),\n np.float64(4475500.0))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_hill_q1_400_wt\",\n    cmap=\"hot\",\n    legend=False,\n    ax=ax,\n)\nprems_gpd.plot(\n    column=\"division_desc\",\n    cmap=\"tab20\",\n    markersize=1,\n    edgecolor=None,\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(439000, 439000 + 2500)\nax.set_ylim(4473000, 4473000 + 2500)\nax.axis(False)\n\n(np.float64(439000.0),\n np.float64(441500.0),\n np.float64(4473000.0),\n np.float64(4475500.0))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_hill_q2_400_wt\",\n    cmap=\"hot\",\n    legend=False,\n    ax=ax,\n)\nprems_gpd.plot(\n    column=\"division_desc\",\n    cmap=\"tab20\",\n    markersize=1,\n    edgecolor=None,\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(439000, 439000 + 2500)\nax.set_ylim(4473000, 4473000 + 2500)\nax.axis(False)\n\n(np.float64(439000.0),\n np.float64(441500.0),\n np.float64(4473000.0),\n np.float64(4475500.0))"
  },
  {
    "objectID": "recipes/networks/create_from_bbox.html",
    "href": "recipes/networks/create_from_bbox.html",
    "title": "OSM network from a bounding box",
    "section": "",
    "text": "Use a bounding box to create a networkx graph from OpenStreetMap data.\n\nfrom shapely import geometry\n\nfrom cityseer.tools import io, plot\n\nUse a shapely Polygon in WGS84 coordinates to define a boundary for the graph.\n\npoly_wgs = geometry.box(\n    -0.14115725966109327, 51.509220662095714, -0.12676440185383622, 51.51820111033659\n)\npoly_wgs\n\n\n\n\n\n\n\n\nUse the osm_graph_from_poly function available from the cityseer package’s io module.\nThe function expects a shapely polygon and returns a networkx graph. cityseer will automatically extract the graph topology while also creating accurate street geometries, which are linked to the graph’s edges.\n\nG = io.osm_graph_from_poly(poly_wgs)\nprint(G)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n\n\nMultiGraph with 382 nodes and 591 edges\n\n\nThe plot_nx function can be used to visualize the graph. It accepts a cityseer prepared networkx graph and will plot street geometries when the plot_geoms parameter is set to True.\n\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\n\n\n\n\n\n\n\nIf using a different CRS, then specify this using the poly_crs_code parameter. For example, if you are using UTM zone 30N, then set this to the corresponding EPSG code, in this case 32630.\n\npoly_utm = geometry.box(698361, 5710348, 699361, 5711348)\nG_utm = io.osm_graph_from_poly(poly_utm, poly_crs_code=32630)\nprint(G_utm)\nplot.plot_nx(G_utm, plot_geoms=True)\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 381 nodes and 595 edges\n\n\n\n\n\n\n\n\n\ncityseer will set node and edge geometry coordinates to the local projected UTM coordinate reference system. If you want to create the resulting graph in a specific CRS, then specify this using the to_crs_code parameter. For example, in the UK you might want to use the British National Grid, which has the EPSG code 27700.\n\nG_bng = io.osm_graph_from_poly(poly_wgs, to_crs_code=27700)\nprint(G_bng)\nplot.plot_nx(G_bng, plot_geoms=True)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 27700.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 380 nodes and 589 edges\n\n\n\n\n\n\n\n\n\ncityseer will automatically attempt to clean-up the graph by removing unnecessary nodes and simplifying the graph. If you only want basic cleaning without simplification, then set the simplify parameter to False. Note that in this case the graph has significantly more nodes and edges because simplification has not been applied.\n\nG_raw = io.osm_graph_from_poly(poly_wgs, simplify=False)\nprint(G_raw)\nplot.plot_nx(G_raw, plot_geoms=True)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 1913 nodes and 2211 edges"
  },
  {
    "objectID": "recipes/networks/network_from_bounds.html",
    "href": "recipes/networks/network_from_bounds.html",
    "title": "OSM network from a boundary file",
    "section": "",
    "text": "Use a custom boundary file to create a networkx graph from OSM.\nIf you have a boundary file in a GeoPackage, shapefile, or similar format, then you can load this file and use it as the boundary for creating a network from OSM.\n\nimport geopandas as gpd\nfrom cityseer.tools import io, plot\n\nUse geopandas to load the boundary file. Check that your file path is correct!\n\nbounds_gpd = gpd.read_file(\"data/madrid_bounds/madrid_bounds.gpkg\")\nbounds_gpd\n\n\n\n\n\n\n\n\nCODDIS\nNOMDIS\nCOD_BAR\nNOMBRE\nShape_Leng\nCOD_DIS_TX\nBARRIO_MAY\nCOD_DISBAR\nNUM_BAR\nBARRIO_MT\nCOD_DISB\ngeometry\n\n\n\n\n0\n1\nCentro\n011\nPalacio\n0.0\n01\nPALACIO\n11\n1\nPALACIO\n1-1\nPOLYGON ((441182.611 4463570.002, 441178.708 4...\n\n\n\n\n\n\n\nExtract the EPSG code from the boundary file.\n\nepsg_code = bounds_gpd.crs.to_epsg()\nprint(epsg_code)\nprint(bounds_gpd.crs.is_projected)\n\n25830\nTrue\n\n\nIf the geometry is not in a projected coordinate system, reproject it to a locally projected coordinate system before doing buffering or simplification. This can be done with the build-in to_crs method in geopandas. The EPSG code for the UTM zone can be found at epsg.io. For example, if your boundary is in the UTM zone 30N, you can use code 32630.\nFor the currently opened file, the boundary is already in a projected coordinate system, so we can skip this step. When working with a file that does need to reprojected, then you can use the following code to project your CRS to a given EPSG code.\n\n# shown as example - unnecessary step for current dataset\nbounds_gpd = bounds_gpd.to_crs(epsg=25830)\nprint(epsg_code)\nprint(bounds_gpd.crs.is_projected)\n\n25830\nTrue\n\n\nConvert the GeoDataFrame into a Polygon using the geopandas union_all method. This will create a single unified shapely geometry.\n\nbounds_geom = bounds_gpd.union_all()\nbounds_geom\n\n\n\n\n\n\n\n\nIf the geometries are complex, then the OSM data request may fail due to URL length limitations (because each coordinate has to be passed in the URL). To avoid this, you can use the convex_hull or else the simplify method to reduce the number of points in the geometry.\n\nbounds_geom_simpl = bounds_geom.convex_hull\nbounds_geom_simpl\n\n\n\n\n\n\n\n\nIt is best practise to buffer the geometry by an amount matching the farthest distance used for centrality or accessibility calculations, which prevents edge roll-off effects.\n\nbounds_geom_buff = bounds_geom_simpl.buffer(100)\nbounds_geom_buff\n\n\n\n\n\n\n\n\nThe shapely Polygon can now be used as before to download and prepare an OSM graph.\n\n# simplification turned off for this example\nG = io.osm_graph_from_poly(bounds_geom_buff, poly_crs_code=epsg_code, simplify=False)\nprint(G)\n\nWARNING:cityseer.tools.io:Merging node 12288331228 into 256149889 due to identical x, y coords.\nWARNING:cityseer.tools.io:Merging node 12119257161 into 12119257160 due to identical x, y coords.\nWARNING:cityseer.tools.io:Merging node 12290337809 into 2334349237 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: t\nWARNING:cityseer.tools.io:Unable to parse level info: t\nWARNING:cityseer.tools.io:Unable to parse level info: t\nWARNING:cityseer.tools.io:Unable to parse level info: t\nWARNING:cityseer.tools.io:Unable to parse level info: t\nWARNING:cityseer.tools.io:Unable to parse level info: 1-2\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n\n\nMultiGraph with 217063 nodes and 296696 edges\n\n\n\nplot.plot_nx(\n    G, plot_geoms=True, x_lim=(439500, 439500 + 2000), y_lim=(4473500, 4473500 + 2000)\n)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges"
  },
  {
    "objectID": "recipes/networks/osmnx_to_cityseer.html",
    "href": "recipes/networks/osmnx_to_cityseer.html",
    "title": "Convert a network from osmnx",
    "section": "",
    "text": "Convert a network from osmnx to a cityseer compatible networkx graph.\n\nimport osmnx as ox\nfrom cityseer.tools import plot, io\n\nUse one of the available osmnx methods to create a networkx graph.\n\nlng, lat = -0.14115725966109327, 51.509220662095714\nbuff = 500\n\nmulti_di_graph = ox.graph_from_point((lat, lng), dist=buff, simplify=True)\nprint(multi_di_graph)\n\nMultiDiGraph with 1529 nodes and 4145 edges\n\n\nUse the nx_from_osm_nx function from the cityseer io module to convert the osmnx dataset to a cityseer compatible networkx graph.\n\nG = io.nx_from_osm_nx(multi_di_graph)\nprint(G)\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.io:Converting OSMnx MultiDiGraph to cityseer MultiGraph.\nWARNING:cityseer.tools.util:The to_crs_code parameter 4326 is not a projected CRS\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 1529 nodes and 2332 edges"
  },
  {
    "objectID": "recipes/networks/network_simplification.html",
    "href": "recipes/networks/network_simplification.html",
    "title": "Custom network simplification",
    "section": "",
    "text": "Manually configure network simplification steps and parameters.\nNetwork simplification helps to prevent distortions in centrality measures and can also be preferable for visualisation.\nWhile cleaning and simplifying the network, cityseer keeps track of intersection coordinates and street geometries and updates these in place, checking that the street alignments remain as accurate as possible. This is a complex undertaking that involves finding an approach that works as well as possible for most situations. Manual inspection and cleaning is recommended as a final step for best results.\n\nfrom cityseer.tools import graphs, plot, io\n\nThe test area is taken from London Soho.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 1200\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\n\n\nOption 1 - Automatic simplification\nSimplification is automatic when using the osm_graph_from_poly function.\n\nG_auto = io.osm_graph_from_poly(poly_wgs, simplify=True)\nprint(G_auto)\nplot.plot_nx(\n    G_auto,\n    plot_geoms=True,\n    figsize=(10, 10),\n    x_lim=(698173, 699570),\n    y_lim=(5710085, 5711440),\n)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 1265 nodes and 1971 edges\n\n\n\n\n\n\n\n\n\n\n\nOption 2 - Automatic simplification with custom parameters\nosm_graph_from_poly accepts parameters which offer a certain amount of control over the simplification process. Altering the distances used for final_clean_distances will affect how aggressive the final round of network simplification is. The default is (5, 10). So, for example, adding 20 will make the simplification more aggressive.\nFootways and service roads intersecting green spaces are removed by default. This can be changed by setting green_footways and green_service_roads to True.\ncycleways is set to True by default because they sometimes provide important links within networks.\nThe below example uses more aggressive cleaning while not discarding green footways.\n\nG_params = io.osm_graph_from_poly(\n    poly_wgs,\n    simplify=True,\n    final_clean_distances=(5, 10, 25),  # adds 20\n    remove_disconnected=100,\n    cycleways=True,\n    busways=False,\n    green_footways=True,  # keeps\n    green_service_roads=False,\n)\nprint(G_params)\nplot.plot_nx(\n    G_params,\n    plot_geoms=True,\n    figsize=(10, 10),\n    x_lim=(698173, 699570),\n    y_lim=(5710085, 5711440),\n)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nWARNING:cityseer.tools.graphs:Be cautious with large buffer distances when using crawl!\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 1091 nodes and 1804 edges\n\n\n\n\n\n\n\n\n\n\n\nOption 3 - Custom OSM requests\nYou may want more control over the data request that is sent internally to the OSM Overpass API. This is possible by providing the custom_request argument. The Overpass API is useful for figuring out which tags you may want to include or exclude in your request.\nNote that the custom request must include a {geom_osm} placeholder, which will be replaced internally with the geometry of the area you are requesting data for.\n\nreq = \"\"\"\n    [out:json];\n    (way[\"highway\"]\n        [\"highway\"!~\"bus_guideway|busway|escape|raceway|proposed|planned|abandoned|platform|\n            emergency_bay|rest_area|disused|corridor|ladder|bus_stop|elevator|services\"]\n        [\"area\"!=\"yes\"]\n        [\"footway\"!=\"sidewalk\"]\n        [\"amenity\"!~\"charging_station|parking|fuel|motorcycle_parking|parking_entrance|parking_space\"]\n        [\"indoor\"!=\"yes\"]\n        [\"level\"!=\"-2\"]\n        [\"level\"!=\"-3\"]\n        [\"level\"!=\"-4\"]\n        [\"level\"!=\"-5\"](poly:\"{geom_osm}\");\n    );\n    out body;\n    &gt;;\n    out qt;\n\"\"\"\nG_req = io.osm_graph_from_poly(poly_wgs, simplify=True, custom_request=req)\nprint(G_req)\nplot.plot_nx(\n    G_req,\n    plot_geoms=True,\n    figsize=(10, 10),\n    x_lim=(698173, 699570),\n    y_lim=(5710085, 5711440),\n)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 1265 nodes and 1971 edges\n\n\n\n\n\n\n\n\n\n\n\nOption 4 - Manual simplification\nIf you need full control over the simplification process, you can use the following as a template for further configuring your cleaning recipe. This offers a large degree of control, but he precise combination of tags and distances involves a degree of experimentation and some inevitable trade-offs for a given area of interest.\nFor this approach, start with an unsimplified network, which will perform only rudimentary preparation.\n\nG_raw = io.osm_graph_from_poly(poly_wgs, simplify=False)\nprint(G_raw)\nplot.plot_nx(\n    G_raw,\n    plot_geoms=True,\n    figsize=(10, 10),\n    x_lim=(698173, 699570),\n    y_lim=(5710085, 5711440),\n)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 7428 nodes and 8562 edges\n\n\n\n\n\n\n\n\n\nThen manipulate the network depending on your needs. See the graphs module for further information what the various functions do.\n\nfrom cityseer import config\n\n# It is recommended to override validation during cleaning\n# This spares unnecessary repetition of validation checks\nconfig.SKIP_VALIDATION = True\n\n# deduplicate by hierarchy\nG = graphs.nx_deduplicate_edges(G_raw, dissolve_distance=20, max_ang_diff=20)\n# remove disconnected components\nG = graphs.nx_remove_dangling_nodes(G, despine=0, remove_disconnected=100)\n# clean by highway types - leave motorways alone\n# split only for a given type at a time\nfor dist, tags, max_angle in (\n    (28, [\"trunk\"], 45),\n    (24, [\"primary\"], 45),\n    (20, [\"secondary\"], 45),\n    (16, [\"tertiary\"], 45),\n):\n    G = graphs.nx_split_opposing_geoms(\n        G,\n        buffer_dist=dist,\n        squash_nodes=True,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=tags,\n        osm_matched_tags_only=True,\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\n# consolidate\nfor dist, tags, max_angle in (\n    (28, [\"trunk\"], 95),\n    (24, [\"trunk\", \"primary\"], 95),\n    (20, [\"trunk\", \"primary\", \"secondary\"], 95),\n    (16, [\"trunk\", \"primary\", \"secondary\", \"tertiary\"], 95),\n):\n    G = graphs.nx_consolidate_nodes(\n        G,\n        buffer_dist=dist,\n        crawl=False,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=tags,\n        osm_matched_tags_only=True,\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\n    G = graphs.nx_remove_filler_nodes(G)\n# snap gapped endings - don't clean danglers before this\nG = graphs.nx_snap_gapped_endings(\n    G,\n    osm_hwy_target_tags=[\n        \"residential\",\n        \"living_street\",\n        # \"service\", # intentionally omitted - e.g. parking lots\n        \"cycleway\",\n        \"bridleway\",\n        \"pedestrian\",\n        \"steps\",\n        \"footway\",\n        \"footway_green\",\n        \"footway_pedestrian\",  # plazas\n        \"path\",\n    ],\n    buffer_dist=20,\n)\n# snap gapped endings to roads - don't clean danglers before this\n# look for degree 1 dead-ends and link to nearby edges\nG = graphs.nx_split_opposing_geoms(\n    G,\n    buffer_dist=20,\n    osm_hwy_target_tags=[\n        # \"trunk\",  # intentionally omitted\n        \"primary\",\n        \"primary_link\",\n        \"secondary\",\n        \"secondary_link\",\n        \"tertiary\",\n        \"tertiary_link\",\n        \"residential\",\n        \"living_street\",\n        # \"service\", # intentionally omitted - e.g. parking lots\n        \"cycleway\",\n        \"bridleway\",\n        \"pedestrian\",\n        \"steps\",\n        \"footway\",\n        \"footway_green\",\n        \"footway_pedestrian\",  # plazas\n        \"path\",\n    ],\n    min_node_degree=1,\n    max_node_degree=1,\n    squash_nodes=False,\n)\n# remove danglers\nG = graphs.nx_remove_dangling_nodes(G, despine=40)\n# do smaller scale cleaning\nmax_angle = 120  # rue de nevers in Paris\nfor dist in (5, 10):\n    G = graphs.nx_split_opposing_geoms(\n        G,\n        buffer_dist=dist,\n        squash_nodes=True,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=[\n            # \"trunk\",  # intentionally omitted\n            \"primary\",\n            \"primary_link\",\n            \"secondary\",\n            \"secondary_link\",\n            \"tertiary\",\n            \"tertiary_link\",\n            \"residential\",\n            \"living_street\",\n            \"service\",\n            \"cycleway\",\n            \"bridleway\",\n            \"pedestrian\",\n            # \"steps\",\n            \"footway\",\n            \"footway_pedestrian\",  # plazas\n            \"path\",\n            \"unclassified\",\n        ],\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\n    G = graphs.nx_consolidate_nodes(\n        G,\n        buffer_dist=dist,\n        crawl=True,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=[\n            \"trunk\",\n            \"trunk_link\",\n            \"primary\",\n            \"primary_link\",\n            \"secondary\",\n            \"secondary_link\",\n            \"tertiary\",\n            \"tertiary_link\",\n            \"residential\",\n            \"living_street\",\n            \"service\",\n            \"cycleway\",\n            \"bridleway\",\n            \"pedestrian\",\n            \"steps\",\n            \"footway\",\n            \"footway_pedestrian\",  # plazas\n            \"path\",\n            \"unclassified\",\n        ],\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\nG = graphs.nx_remove_filler_nodes(G)\nG = graphs.nx_merge_parallel_edges(\n    G, merge_edges_by_midline=True, contains_buffer_dist=50\n)\nG = graphs.nx_iron_edges(G, min_self_loop_length=100, max_foot_tunnel_length=100)\n# do this last to clean up any orphaned sub components\nG = graphs.nx_remove_dangling_nodes(G, despine=25)\n\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n\n\n\nplot.plot_nx(\n    G,\n    plot_geoms=True,\n    figsize=(10, 10),\n    x_lim=(698173, 699570),\n    y_lim=(5710085, 5711440),\n)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges"
  },
  {
    "objectID": "recipes/networks/network_from_streets.html",
    "href": "recipes/networks/network_from_streets.html",
    "title": "Custom network from a streets dataset",
    "section": "",
    "text": "Use geopandas to open a street network file and convert it to a networkx graph.\nIf you have a street network file in a GeoPackage, shapefile, or similar format, then you can load this file and convert it to a networkx graph.\n\nimport geopandas as gpd\nfrom cityseer.tools import io, plot\n\nUse geopandas to load the street network file. Check that your file path is correct!\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd\n\n\n\n\n\n\n\n\nGEODB_OID\nCDID\nCDMUNI\nCDVIAL\nCDTVIA\nDSPART\nDSVIAL\nDSVIAL_25\nDSVIAL_NOR\nCDVIAL_INE\nTIPOLOGIA\nGEOMETRY1_\ngeometry\n\n\n\n\n0\n2116085.0\n2116085.0\n049\n049A0246\nAvda\nde\nSan Pablo\nSan Pablo\nSAN PABLO\n00624\n35.0\n1424.530768\nMULTILINESTRING ((454855.882 4476818.629, 4548...\n\n\n1\n2116085.0\n2116085.0\n049\n049A0246\nAvda\nde\nSan Pablo\nSan Pablo\nSAN PABLO\n00624\n35.0\n1424.530768\nMULTILINESTRING ((454839.501 4476885.272, 4548...\n\n\n2\n2116085.0\n2116085.0\n049\n049A0246\nAvda\nde\nSan Pablo\nSan Pablo\nSAN PABLO\n00624\n35.0\n1424.530768\nMULTILINESTRING ((454833.577 4476910.504, 4548...\n\n\n3\n2116085.0\n2116085.0\n049\n049A0246\nAvda\nde\nSan Pablo\nSan Pablo\nSAN PABLO\n00624\n35.0\n1424.530768\nMULTILINESTRING ((454823.07 4476952.149, 45482...\n\n\n4\n2116085.0\n2116085.0\n049\n049A0246\nAvda\nde\nSan Pablo\nSan Pablo\nSAN PABLO\n00624\n35.0\n1424.530768\nMULTILINESTRING ((454817.822 4476974.014, 4548...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n47149\n2091784.0\n2091784.0\n079\n07903996\nAvda\ndel\nMediterr�neo\nMediterr�neo\nMEDITERRANEO\n03996\n0.0\n58613.712917\nMULTILINESTRING ((446091.268 4471663.652, 4459...\n\n\n47150\n2091784.0\n2091784.0\n079\n07903996\nAvda\ndel\nMediterr�neo\nMediterr�neo\nMEDITERRANEO\n03996\n0.0\n58613.712917\nMULTILINESTRING ((445780.228 4471776.141, 4456...\n\n\n47151\n2069757.0\n2069757.0\n079\n079A0077\nAvia\nNone\nM-40\nM-40\nM40\nNone\n0.0\n97748.532973\nMULTILINESTRING ((446869.563 4472572.823, 4468...\n\n\n47152\n2069757.0\n2069757.0\n079\n079A0077\nAvia\nNone\nM-40\nM-40\nM40\nNone\n0.0\n97748.532973\nMULTILINESTRING ((446779.507 4472055.539, 4467...\n\n\n47153\n2091817.0\n2091817.0\n079\n07904590\nCalle\nde la\nHacienda de Pavones\nHacienda de Pavones\nHACIENDA PAVONES\n04590\n0.0\n6119.528247\nMULTILINESTRING ((446834.272 4472176.772, 4468...\n\n\n\n\n47154 rows × 13 columns\n\n\n\nTake note of you data CRS.\n\nepsg_code = streets_gpd.crs.to_epsg()\nprint(epsg_code)\nprint(streets_gpd.crs.is_projected)\n\n25830\nTrue\n\n\nIf your street network is not in a projected CRS, it is recommended to convert your dataset to a locally projected coordinate system. This can be done with the build-in to_crs method in geopandas. The EPSG code for the UTM zone can be found at epsg.io.\nAlternatively, you can project the graph after creation.\n\n# shown as example - unnecessary step for current dataset\nstreets_gpd = streets_gpd.to_crs(epsg=25830)\nprint(epsg_code)\nprint(streets_gpd.crs.is_projected)\n\n25830\nTrue\n\n\nTake note of the geometry type.\n\nstreets_gpd.geometry.type.unique()\n\narray(['MultiLineString'], dtype=object)\n\n\nIf your data consists of MultiLineString geometries, then these should first be converted to unnested LineString geometries.\n\nstreets_gpd = streets_gpd.explode(ignore_index=True)\nstreets_gpd.geometry.type.unique()\n\narray(['LineString'], dtype=object)\n\n\nUse the nx_from_generic_geopandas function to convert the geopandas LineStrings dataset to a networkx graph. This function will automatically create nodes and edges from the LineStrings in the dataset.\nThe function expects that all features are LineString geometries, where the geometries represent individual street segments that meet at intersections. Street segments which share endpoints will be connected by a node in the graph.\n\nG = io.nx_from_generic_geopandas(streets_gpd)\nprint(G)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n\n\nMultiGraph with 31280 nodes and 47129 edges\n\n\n\nplot.plot_nx(\n    G, plot_geoms=True, x_lim=(438500, 438500 + 3500), y_lim=(4472500, 4472500 + 3500)\n)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\n\n\n\n\n\n\n\nIf your data is not in a projected CRS (and if you did not already reproject the GeoDataFrame before creating the graph), then reproject your networkx graph to a locally projected coordinate system before doing further analysis.\nIf the data is currently in geographic longitudes and latitudes (WGS84 / 4326) then the nx_wgs_to_utm function can be used to convert it to the local UTM projection. Alternatively, the nx_epsg_conversion function can be used to specify input and output CRS.\n\n# shown as an example - unnecessary step for current dataset\nG_utm = io.nx_epsg_conversion(G, to_crs_code=32630)\nprint(G_utm)\n\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n\n\nMultiGraph with 31280 nodes and 47129 edges"
  },
  {
    "objectID": "recipes/continuity/continuity_os_open.html",
    "href": "recipes/continuity/continuity_os_open.html",
    "title": "OS Open Roads",
    "section": "",
    "text": "The following example uses the OS Open Roads dataset, which is available under the Open Government License.\n© Crown copyright and database right 2022"
  },
  {
    "objectID": "recipes/continuity/continuity_os_open.html#data-source",
    "href": "recipes/continuity/continuity_os_open.html#data-source",
    "title": "OS Open Roads",
    "section": "",
    "text": "The following example uses the OS Open Roads dataset, which is available under the Open Government License.\n© Crown copyright and database right 2022"
  },
  {
    "objectID": "recipes/continuity/continuity_os_open.html#preparation",
    "href": "recipes/continuity/continuity_os_open.html#preparation",
    "title": "OS Open Roads",
    "section": "Preparation",
    "text": "Preparation\nThe following example assumes:\n\nThat the notebook is being run from a cloned cityseer-api repository.\nThat the above dataset has been downloaded to temp/os_open_roads/oproad_gb.gpkg as a relative path. If running this notebook directly from within a clone of the cityseer-api repo, then this equates to the cityseer-api/temp/os_open_roads/oproad_gb.gpkg path. Please edit the paths and path setup in this cell if you are using different directories.\n\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nrepo_path = Path.cwd()\nif str(repo_path).endswith(\"continuity\"):\n    repo_path = Path.cwd() / \"../..\"\nif not str(repo_path.resolve()).endswith(\"cityseer-examples\"):\n    raise ValueError(\n        \"Please check your notebook working directory relative to your project and data paths.\"\n    )\n\nopen_roads_path = Path(repo_path / \"temp/os_open_roads/oproad_gb.gpkg\")\nprint(\"data path:\", open_roads_path)\nprint(\"path exists:\", open_roads_path.exists())\n\ndata path: /Users/gareth/dev/benchmark-urbanism/cityseer-examples/examples/continuity/../../temp/os_open_roads/oproad_gb.gpkg\npath exists: True\n\n\n\nExtents\nInstead of loading the entire dataset, we’ll use a bounding box to only load an area of interest.\n\nfrom pyproj import Transformer\nfrom shapely import geometry\n\nfrom cityseer.tools import io\n\n# create graph - only UK locations will work for OS Open Roads data\n# stratford-upon-avon\n# lng, lat, buffer_dist, plot_buffer = -1.7063649924889566, 52.19277374082795, 2500, 2000\n# london\nlng, lat, buffer_dist, plot_buffer = (\n    -0.13039709427587876,\n    51.516434828344366,\n    6000,\n    5000,\n)\n# transform from WGS to BNG\ntransformer = Transformer.from_crs(\"EPSG:4326\", \"EPSG:27700\")\neasting, northing = transformer.transform(lat, lng)\n# calculate bbox relative to centroid\ncentroid = geometry.Point(easting, northing)\ntarget_bbox: tuple[float, float, float, float] = centroid.buffer(buffer_dist).bounds  # type: ignore\nplot_bbox: tuple[float, float, float, float] = centroid.buffer(plot_buffer).bounds  # type: ignore\n\n\n\nLoad\nWe can now load the OS Open Roads dataset\n\n# load OS Open Roads data from downloaded geopackage\nG_open = io.nx_from_open_roads(open_roads_path, target_bbox=target_bbox)\n\nINFO:cityseer.tools.io:Nodes: 24778\nINFO:cityseer.tools.io:Edges: 32723\nINFO:cityseer.tools.io:Dropped 463 edges where not both start and end nodes were present.\nINFO:cityseer.tools.io:Running basic graph cleaning\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 24778/24778 [00:00&lt;00:00, 33240.53it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 10.\n100%|██████████| 30681/30681 [00:00&lt;00:00, 50838.55it/s]"
  },
  {
    "objectID": "recipes/continuity/continuity_os_open.html#observe-continuity-metrics",
    "href": "recipes/continuity/continuity_os_open.html#observe-continuity-metrics",
    "title": "OS Open Roads",
    "section": "Observe continuity metrics",
    "text": "Observe continuity metrics\nThis step runs the continuity analysis using the specified heuristic.\n\nimport matplotlib.pyplot as plt\n\nfrom cityseer.tools import io, plot\nfrom cityseer.metrics import observe\n\n# methods can be \"names\", \"routes\", \"highways\"\n\nprint(\"Continuity by street names\")\nG_cont, NamesContReport = observe.street_continuity(G_open, method=\"names\")\nNamesContReport.report_by_count(n_items=5)\nNamesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by route numbers\")\nG_cont, RoutesContReport = observe.street_continuity(G_cont, method=\"routes\")\nRoutesContReport.report_by_count(n_items=5)\nRoutesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by highway types\")\nG_cont, HwyContReport = observe.street_continuity(G_cont, method=\"highways\")\nHwyContReport.report_by_count(n_items=5)\nHwyContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by overlapping routes and names types\")\nG_cont, HybridContReport = observe.hybrid_street_continuity(G_cont)\nHybridContReport.report_by_count(n_items=5)\nHybridContReport.report_by_length(n_items=5)\n\nContinuity by street names\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for names.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 31274.62it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 82 - finchley road\nINFO:cityseer.metrics.observe:Count: 62 - harrow road\nINFO:cityseer.metrics.observe:Count: 58 - old kent road\nINFO:cityseer.metrics.observe:Count: 57 - king's road\nINFO:cityseer.metrics.observe:Count: 46 - clapham road\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 5.4km - harrow road\nINFO:cityseer.metrics.observe:Length: 5.34km - finchley road\nINFO:cityseer.metrics.observe:Length: 4.48km - outer circle\nINFO:cityseer.metrics.observe:Length: 3.7km - westway\nINFO:cityseer.metrics.observe:Length: 3.28km - old kent road\n\n\nContinuity by route numbers\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 109845.11it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 142 - a1\nINFO:cityseer.metrics.observe:Count: 135 - a10\nINFO:cityseer.metrics.observe:Count: 129 - a41\nINFO:cityseer.metrics.observe:Count: 128 - a107\nINFO:cityseer.metrics.observe:Count: 116 - a5\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 9.1km - a41\nINFO:cityseer.metrics.observe:Length: 8.1km - a1\nINFO:cityseer.metrics.observe:Length: 7.96km - a10\nINFO:cityseer.metrics.observe:Length: 7.76km - a3220\nINFO:cityseer.metrics.observe:Length: 7.12km - a107\n\n\nContinuity by highway types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for highways.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 156124.61it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 5056 - a road\nINFO:cityseer.metrics.observe:Count: 2510 - minor road\nINFO:cityseer.metrics.observe:Count: 1711 - primary road\nINFO:cityseer.metrics.observe:Count: 1487 - b road\nINFO:cityseer.metrics.observe:Count: 463 - secondary access road\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 336.17km - a road\nINFO:cityseer.metrics.observe:Length: 181.0km - minor road\nINFO:cityseer.metrics.observe:Length: 116.88km - primary road\nINFO:cityseer.metrics.observe:Length: 105.99km - b road\nINFO:cityseer.metrics.observe:Length: 33.74km - secondary access road\n\n\nContinuity by overlapping routes and names types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 118874.56it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 230 - a1\nINFO:cityseer.metrics.observe:Count: 204 - a41\nINFO:cityseer.metrics.observe:Count: 162 - a40\nINFO:cityseer.metrics.observe:Count: 162 - a10\nINFO:cityseer.metrics.observe:Count: 154 - a107\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 14.76km - a41\nINFO:cityseer.metrics.observe:Length: 13.1km - a1\nINFO:cityseer.metrics.observe:Length: 12.38km - a40\nINFO:cityseer.metrics.observe:Length: 10.98km - a3220\nINFO:cityseer.metrics.observe:Length: 9.46km - a10\n\n\n\nfor method, shape_exp, descriptor, cmap, inverse, col_by_categ in zip(\n    [\"names\", \"routes\", \"highways\", \"hybrid\"],  #\n    [1, 0.75, 0.5, 1],  #\n    [\"Street names\", \"Routes\", \"Road types\", \"Hybrid routes & names\"],  #\n    [\"plasma\", \"viridis\", \"tab10\", \"tab10\"],  #\n    [False, False, True, False],  #\n    [False, False, True, True],\n):\n    print(f\"Plotting results for method: {method}\")\n    # plot\n    bg_colour = \"#1d1d1d\"\n    fig, axes = plt.subplots(\n        2, 1, dpi=150, figsize=(8, 12), facecolor=bg_colour, constrained_layout=True\n    )\n    fig.suptitle(\n        f\"OS Open Roads plotted by {descriptor} continuity\",\n        fontsize=\"small\",\n        ha=\"center\",\n    )\n    # by count\n    plot.plot_nx_edges(\n        axes[0],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_count\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[0].set_xlabel(f\"{descriptor} by count\", fontsize=\"x-small\")  # type: ignore\n    # by length\n    plot.plot_nx_edges(\n        axes[1],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_length\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[1].set_xlabel(f\"{descriptor} by length (metres)\", fontsize=\"x-small\")  # type: ignore\n    plt.show()\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: names\n\n\n30609it [00:00, 469577.59it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:02&lt;00:00, 11117.21it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 545878.18it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:03&lt;00:00, 10180.88it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: routes\n\n\n30609it [00:00, 464096.40it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:03&lt;00:00, 9764.13it/s] \nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 694550.28it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:03&lt;00:00, 8866.57it/s] \n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: highways\n\n\n30609it [00:00, 532384.47it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 6/6 [00:02&lt;00:00,  2.75it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 593554.44it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 6/6 [00:02&lt;00:00,  2.96it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: hybrid\n\n\n30609it [00:00, 652573.79it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:02&lt;00:00,  5.26it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 700114.25it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  5.77it/s]"
  },
  {
    "objectID": "recipes/stats/gpd_stats.html",
    "href": "recipes/stats/gpd_stats.html",
    "title": "Cityseer Guide",
    "section": "",
    "text": "import geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import layers\nfrom cityseer.tools import graphs, io\nfrom matplotlib import colors\n\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\n100%|██████████| 47155/47155 [00:03&lt;00:00, 14287.04it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 47129/47129 [00:00&lt;00:00, 279104.25it/s]\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\n100%|██████████| 47129/47129 [00:00&lt;00:00, 137412.01it/s]\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n100%|██████████| 47129/47129 [00:19&lt;00:00, 2431.63it/s]\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n100%|██████████| 47129/47129 [00:00&lt;00:00, 258849.61it/s]\n100%|██████████| 47129/47129 [00:16&lt;00:00, 2822.35it/s]\n\n\n\nbldgs_gpd = gpd.read_file(\"data/madrid_buildings/madrid_bldgs.gpkg\")\nbldgs_gpd.head()\n\n\n\n\n\n\n\n\nmean_height\narea\nperimeter\ncompactness\norientation\nvolume\nfloor_area_ratio\nform_factor\ncorners\nshape_index\nfractal_dimension\ngeometry\n\n\n\n\n0\nNaN\n187.418714\n58.669276\n0.491102\n40.235999\nNaN\nNaN\nNaN\n4\n0.700787\n1.026350\nPOLYGON ((448688.642 4492911, 448678.351 44928...\n\n\n1\n7.0\n39.082821\n26.992208\n0.472874\n10.252128\n273.579749\n78.165643\n5.410857\n4\n0.687658\n1.041691\nPOLYGON ((440862.665 4482604.017, 440862.64 44...\n\n\n2\n7.0\n39.373412\n27.050303\n0.475086\n10.252128\n275.613883\n78.746824\n5.400665\n4\n0.689265\n1.040760\nPOLYGON ((440862.681 4482608.269, 440862.665 4...\n\n\n3\n7.5\n37.933979\n26.739878\n0.464266\n10.252129\n284.504846\n75.867959\n5.513124\n4\n0.681371\n1.045072\nPOLYGON ((440862.705 4482612.365, 440862.681 4...\n\n\n4\n7.0\n39.013701\n26.972641\n0.472468\n10.183618\n273.095907\n78.027402\n5.412350\n4\n0.687363\n1.041798\nPOLYGON ((440880.29 4482607.963, 440880.274 44...\n\n\n\n\n\n\n\n\nbldgs_gpd\n\n\n\n\n\n\n\n\nmean_height\narea\nperimeter\ncompactness\norientation\nvolume\nfloor_area_ratio\nform_factor\ncorners\nshape_index\nfractal_dimension\ngeometry\n\n\n\n\n0\nNaN\n187.418714\n58.669276\n0.491102\n40.235999\nNaN\nNaN\nNaN\n4\n0.700787\n1.026350\nPOLYGON ((448688.642 4492911, 448678.351 44928...\n\n\n1\n7.0\n39.082821\n26.992208\n0.472874\n10.252128\n273.579749\n78.165643\n5.410857\n4\n0.687658\n1.041691\nPOLYGON ((440862.665 4482604.017, 440862.64 44...\n\n\n2\n7.0\n39.373412\n27.050303\n0.475086\n10.252128\n275.613883\n78.746824\n5.400665\n4\n0.689265\n1.040760\nPOLYGON ((440862.681 4482608.269, 440862.665 4...\n\n\n3\n7.5\n37.933979\n26.739878\n0.464266\n10.252129\n284.504846\n75.867959\n5.513124\n4\n0.681371\n1.045072\nPOLYGON ((440862.705 4482612.365, 440862.681 4...\n\n\n4\n7.0\n39.013701\n26.972641\n0.472468\n10.183618\n273.095907\n78.027402\n5.412350\n4\n0.687363\n1.041798\nPOLYGON ((440880.29 4482607.963, 440880.274 44...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n135297\nNaN\n67.096449\n34.346697\n0.525795\n9.869839\nNaN\nNaN\nNaN\n4\n0.725117\n1.022418\nPOLYGON ((453707.306 4472568.392, 453710.48 44...\n\n\n135298\nNaN\n66.583253\n40.426399\n0.405219\n10.026211\nNaN\nNaN\nNaN\n12\n0.636568\n1.101924\nPOLYGON ((453707.358 4472583.643, 453707.344 4...\n\n\n135299\nNaN\n67.419647\n34.371360\n0.527670\n9.077353\nNaN\nNaN\nNaN\n4\n0.726409\n1.021592\nPOLYGON ((453683.45 4472602.317, 453683.44 447...\n\n\n135300\nNaN\n67.453534\n34.382312\n0.527935\n9.077353\nNaN\nNaN\nNaN\n4\n0.726591\n1.021621\nPOLYGON ((453689.492 4472602.313, 453689.482 4...\n\n\n135301\nNaN\n67.500760\n34.390652\n0.528305\n9.121073\nNaN\nNaN\nNaN\n4\n0.726846\n1.021567\nPOLYGON ((453695.534 4472602.309, 453695.524 4...\n\n\n\n\n135302 rows × 12 columns\n\n\n\n\n# compute pub accessibility\ndistances = [100, 200, 400, 800]\nnodes_gdf, bldgs_gpd = layers.compute_stats(\n    bldgs_gpd,\n    stats_column_labels=[\n        \"area\",\n        \"perimeter\",\n        \"compactness\",\n        \"orientation\",\n        \"shape_index\",\n    ],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing statistics.\nINFO:cityseer.metrics.layers:Assigning data to network.\n100%|██████████| 135302/135302 [00:07&lt;00:00, 18250.44it/s]\n100%|██████████| 47129/47129 [00:36&lt;00:00, 1298.62it/s]\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 100m, Beta: 0.04, Walking Time: 1.25 minutes.\nINFO:cityseer.config:Distance: 200m, Beta: 0.02, Walking Time: 2.5 minutes.\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\nINFO:cityseer.config:Distance: 800m, Beta: 0.005, Walking Time: 10.0 minutes.\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.11/site-packages/geopandas/geodataframe.py:1819: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  super().__setitem__(key, value)\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node',\n       ...\n       'cc_shape_index_sum_800_nw', 'cc_shape_index_sum_800_wt',\n       'cc_shape_index_mean_800_nw', 'cc_shape_index_mean_800_wt',\n       'cc_shape_index_count_800_nw', 'cc_shape_index_count_800_wt',\n       'cc_shape_index_var_800_nw', 'cc_shape_index_var_800_wt',\n       'cc_shape_index_max_800', 'cc_shape_index_min_800'],\n      dtype='object', length=210)\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_area_mean_400_wt\",\n    cmap=\"hot\",\n    legend=False,\n    norm=colors.LogNorm(),  # Apply log normalization\n    ax=ax,\n)\nbldgs_gpd.plot(\n    column=\"area\",\n    cmap=\"viridis\",\n    legend=False,\n    norm=colors.LogNorm(),  # Apply log normalization\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))"
  }
]