[
  {
    "objectID": "examples/graph_cleaning.html",
    "href": "examples/graph_cleaning.html",
    "title": "Graph Cleaning",
    "section": "",
    "text": "Install and update cityseer if necessary.\n# !pip install --upgrade cityseer\nSee the guide for a preamble.",
    "crumbs": [
      "Preparation",
      "Graph Cleaning"
    ]
  },
  {
    "objectID": "examples/graph_cleaning.html#downloading-data",
    "href": "examples/graph_cleaning.html#downloading-data",
    "title": "Graph Cleaning",
    "section": "Downloading data",
    "text": "Downloading data\nThis example will make use of OSM data downloaded from the OSM API. To keep things interesting, let’s pick London Soho, which will be buffered and cleaned for a 1,250m radius.\n\nfrom shapely import geometry\nimport utm\n\nfrom cityseer.tools import graphs, plot, io\n\n# Let's download data within a 1,250m buffer around London Soho:\nlng, lat = -0.13396079424572427, 51.51371088849723\n# lng, lat = 2.166981, 41.389526 -- Barcelona - which is a complex case\nbuffer = 1250\n# creates a WGS shapely polygon\npoly_wgs, _ = io.buffered_point_poly(lng, lat, buffer)\n# use a WGS shapely polygon to download information from OSM\n# this version will not simplify\nG_raw = io.osm_graph_from_poly(poly_wgs, simplify=False)\n# whereas this version does simplify\nG_utm = io.osm_graph_from_poly(poly_wgs)\n\n# select extents for clipping the plotting extents\neasting, northing = utm.from_latlon(lat, lng)[:2]\nbuff = geometry.Point(easting, northing).buffer(1000)\nmin_x, min_y, max_x, max_y = buff.bounds\n\n\n# reusable plot function\ndef simple_plot(_G, plot_geoms=True):\n    # plot using the selected extents\n    plot.plot_nx(\n        _G,\n        labels=False,\n        plot_geoms=plot_geoms,\n        node_size=4,\n        edge_width=1,\n        x_lim=(min_x, max_x),\n        y_lim=(min_y, max_y),\n        figsize=(6, 6),\n        dpi=150,\n    )\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.io:Converting networkX graph from EPSG code 4326 to EPSG code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 16483/16483 [00:00&lt;00:00, 117745.05it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 17715/17715 [00:00&lt;00:00, 611917.61it/s]\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 17715/17715 [00:00&lt;00:00, 46052.43it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 16483/16483 [00:01&lt;00:00, 8732.22it/s] \nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.io:Converting networkX graph from EPSG code 4326 to EPSG code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 16483/16483 [00:00&lt;00:00, 500530.06it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 17715/17715 [00:00&lt;00:00, 907672.80it/s]\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 17715/17715 [00:00&lt;00:00, 47717.34it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 16483/16483 [00:01&lt;00:00, 8708.23it/s] \nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 9182/9182 [00:00&lt;00:00, 512510.64it/s]\n100%|██████████| 9182/9182 [00:03&lt;00:00, 2385.28it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 7950/7950 [00:00&lt;00:00, 9643.96it/s] \n100%|██████████| 5581/5581 [00:00&lt;00:00, 44227.06it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 6864/6864 [00:00&lt;00:00, 306100.84it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5039/5039 [00:00&lt;00:00, 516876.93it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 120289.31it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5039/5039 [00:00&lt;00:00, 14447.39it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5007/5007 [00:00&lt;00:00, 451369.75it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 10537.05it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5059/5059 [00:00&lt;00:00, 133702.48it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5050/5050 [00:00&lt;00:00, 458935.18it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 64258.79it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5051/5051 [00:00&lt;00:00, 197389.59it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5051/5051 [00:00&lt;00:00, 472330.27it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 42718.90it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5052/5052 [00:00&lt;00:00, 194659.17it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3999/3999 [00:00&lt;00:00, 71103.46it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 113514.54it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5052/5052 [00:00&lt;00:00, 153639.29it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 202308.84it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3957/3957 [00:00&lt;00:00, 8310.46it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3957/3957 [00:00&lt;00:00, 12422.73it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4618/4618 [00:00&lt;00:00, 30513.54it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3648/3648 [00:00&lt;00:00, 201157.20it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3620/3620 [00:00&lt;00:00, 68650.27it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3620/3620 [00:00&lt;00:00, 28534.29it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4449/4449 [00:00&lt;00:00, 112491.01it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3584/3584 [00:00&lt;00:00, 383518.36it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3576/3576 [00:00&lt;00:00, 70631.60it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3576/3576 [00:00&lt;00:00, 23170.23it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4345/4345 [00:00&lt;00:00, 136596.17it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3507/3507 [00:00&lt;00:00, 453043.74it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3502/3502 [00:00&lt;00:00, 75331.19it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4334/4334 [00:00&lt;00:00, 819461.46it/s]\nINFO:cityseer.tools.graphs:Snapping gapped endings.\n100%|██████████| 3502/3502 [00:00&lt;00:00, 7302.62it/s] \nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4496/4496 [00:00&lt;00:00, 15225.16it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3502/3502 [00:00&lt;00:00, 6340.29it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5205/5205 [00:00&lt;00:00, 188554.04it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 3903/3903 [00:00&lt;00:00, 88855.91it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3297/3297 [00:00&lt;00:00, 9293.16it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 3678/3678 [00:00&lt;00:00, 761659.43it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2377/2377 [00:00&lt;00:00, 5503.38it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 3706/3706 [00:00&lt;00:00, 63557.86it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2377/2377 [00:00&lt;00:00, 64932.89it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2377/2377 [00:00&lt;00:00, 3174.54it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2894/2894 [00:00&lt;00:00, 18063.00it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2742/2742 [00:00&lt;00:00, 496536.64it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1832/1832 [00:00&lt;00:00, 6225.44it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2747/2747 [00:00&lt;00:00, 145892.99it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1832/1832 [00:00&lt;00:00, 69388.69it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1832/1832 [00:02&lt;00:00, 800.63it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2360/2360 [00:00&lt;00:00, 12413.91it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1505/1505 [00:00&lt;00:00, 16539.88it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 2183/2183 [00:00&lt;00:00, 27668.57it/s]\nINFO:cityseer.tools.graphs:Ironing edges.\n100%|██████████| 2166/2166 [00:00&lt;00:00, 9351.68it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 2155/2155 [00:00&lt;00:00, 203689.58it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 1397/1397 [00:00&lt;00:00, 235906.38it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1385/1385 [00:00&lt;00:00, 97473.21it/s]\n\n\nThe automated graph cleaning may give satisfactory results depending on the intended end-use. See the steps following beneath for an example of how to manually clean the graph where additional control is preferred.\n\nprint(\"The graph before simplification.\")\nsimple_plot(G_raw, plot_geoms=True)\n\nprint(\"The graph after simplification\")\nsimple_plot(G_utm, plot_geoms=True)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nThe graph before simplification.\n\n\n100%|██████████| 9182/9182 [00:01&lt;00:00, 8435.27it/s] \n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nThe graph after simplification\n\n\n100%|██████████| 2114/2114 [00:00&lt;00:00, 22936.89it/s]",
    "crumbs": [
      "Preparation",
      "Graph Cleaning"
    ]
  },
  {
    "objectID": "examples/graph_cleaning.html#manual-cleaning",
    "href": "examples/graph_cleaning.html#manual-cleaning",
    "title": "Graph Cleaning",
    "section": "Manual cleaning",
    "text": "Manual cleaning\nThe automated simplification uses a number of steps and should generally give a solid starting point for further customised cleaning. The following is the steps followed by the automatic cleaning routine. You can adapt this to work for context specific considerations such as which OSM road types to clean and what distances to use.\n\n# deduplicate by hierarchy\nG = graphs.nx_deduplicate_edges(G_raw, dissolve_distance=20, max_ang_diff=20)\n# remove disconnected components\nG = graphs.nx_remove_dangling_nodes(G, despine=0, remove_disconnected=100)\n# clean by highway types - leave motorways alone\n# split only for a given type at a time\nfor dist, tags, max_angle in (\n    (28, [\"trunk\"], 45),\n    (24, [\"primary\"], 45),\n    (20, [\"secondary\"], 45),\n    (16, [\"tertiary\"], 45),\n):\n    G = graphs.nx_split_opposing_geoms(\n        G,\n        buffer_dist=dist,\n        squash_nodes=True,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=tags,\n        osm_matched_tags_only=True,\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\n# consolidate\nfor dist, tags, max_angle in (\n    (28, [\"trunk\"], 95),\n    (24, [\"trunk\", \"primary\"], 95),\n    (20, [\"trunk\", \"primary\", \"secondary\"], 95),\n    (16, [\"trunk\", \"primary\", \"secondary\", \"tertiary\"], 95),\n):\n    G = graphs.nx_consolidate_nodes(\n        G,\n        buffer_dist=dist,\n        crawl=False,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=tags,\n        osm_matched_tags_only=True,\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\n    G = graphs.nx_remove_filler_nodes(G)\n# snap gapped endings - don't clean danglers before this\nG = graphs.nx_snap_gapped_endings(\n    G,\n    osm_hwy_target_tags=[\n        \"residential\",\n        \"living_street\",\n        # \"service\", # intentionally omitted - e.g. parking lots\n        \"cycleway\",\n        \"bridleway\",\n        \"pedestrian\",\n        \"steps\",\n        \"footway\",\n        \"footway_green\",\n        \"footway_pedestrian\",  # plazas\n        \"path\",\n    ],\n    buffer_dist=20,\n)\n# snap gapped endings to roads - don't clean danglers before this\n# look for degree 1 dead-ends and link to nearby edges\nG = graphs.nx_split_opposing_geoms(\n    G,\n    buffer_dist=20,\n    osm_hwy_target_tags=[\n        # \"trunk\",  # intentionally omitted\n        \"primary\",\n        \"primary_link\",\n        \"secondary\",\n        \"secondary_link\",\n        \"tertiary\",\n        \"tertiary_link\",\n        \"residential\",\n        \"living_street\",\n        # \"service\", # intentionally omitted - e.g. parking lots\n        \"cycleway\",\n        \"bridleway\",\n        \"pedestrian\",\n        \"steps\",\n        \"footway\",\n        \"footway_green\",\n        \"footway_pedestrian\",  # plazas\n        \"path\",\n    ],\n    min_node_degree=1,\n    max_node_degree=1,\n    squash_nodes=False,\n)\n# remove danglers\nG = graphs.nx_remove_dangling_nodes(G, despine=40)\n# do smaller scale cleaning\nmax_angle = 120  # rue de nevers in Paris\nfor dist in (5, 10):\n    G = graphs.nx_split_opposing_geoms(\n        G,\n        buffer_dist=dist,\n        squash_nodes=True,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=[\n            # \"trunk\",  # intentionally omitted\n            \"primary\",\n            \"primary_link\",\n            \"secondary\",\n            \"secondary_link\",\n            \"tertiary\",\n            \"tertiary_link\",\n            \"residential\",\n            \"living_street\",\n            \"service\",\n            \"cycleway\",\n            \"bridleway\",\n            \"pedestrian\",\n            # \"steps\",\n            \"footway\",\n            \"footway_pedestrian\",  # plazas\n            \"path\",\n            \"unclassified\",\n        ],\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\n    G = graphs.nx_consolidate_nodes(\n        G,\n        buffer_dist=dist,\n        crawl=True,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=[\n            \"trunk\",\n            \"trunk_link\",\n            \"primary\",\n            \"primary_link\",\n            \"secondary\",\n            \"secondary_link\",\n            \"tertiary\",\n            \"tertiary_link\",\n            \"residential\",\n            \"living_street\",\n            \"service\",\n            \"cycleway\",\n            \"bridleway\",\n            \"pedestrian\",\n            \"steps\",\n            \"footway\",\n            \"footway_pedestrian\",  # plazas\n            \"path\",\n            \"unclassified\",\n        ],\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\nG = graphs.nx_remove_filler_nodes(G)\nG = graphs.nx_merge_parallel_edges(\n    G, merge_edges_by_midline=True, contains_buffer_dist=50\n)\nG = graphs.nx_iron_edges(G, min_self_loop_length=100, max_foot_tunnel_length=100)\n# do this last to clean up any orphaned sub components\nG = graphs.nx_remove_dangling_nodes(G, despine=25)\n\nsimple_plot(G, plot_geoms=True)\n\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 9182/9182 [00:00&lt;00:00, 586002.73it/s]\n100%|██████████| 9182/9182 [00:04&lt;00:00, 2058.73it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 7950/7950 [00:00&lt;00:00, 13267.85it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 6864/6864 [00:00&lt;00:00, 536420.77it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5392/5392 [00:00&lt;00:00, 520307.53it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 4226/4226 [00:00&lt;00:00, 128363.90it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5392/5392 [00:00&lt;00:00, 82899.04it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5354/5354 [00:00&lt;00:00, 491600.34it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 4226/4226 [00:00&lt;00:00, 15992.07it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5406/5406 [00:00&lt;00:00, 146662.14it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5397/5397 [00:00&lt;00:00, 620131.46it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 4226/4226 [00:00&lt;00:00, 72493.63it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5398/5398 [00:00&lt;00:00, 178593.65it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5398/5398 [00:00&lt;00:00, 581444.13it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 4226/4226 [00:00&lt;00:00, 44933.58it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5399/5399 [00:00&lt;00:00, 186920.52it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 4226/4226 [00:00&lt;00:00, 73037.29it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 4226/4226 [00:00&lt;00:00, 139938.17it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5399/5399 [00:00&lt;00:00, 187367.49it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 4226/4226 [00:00&lt;00:00, 201275.53it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 4172/4172 [00:00&lt;00:00, 15975.27it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 4172/4172 [00:00&lt;00:00, 16063.08it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4953/4953 [00:00&lt;00:00, 38370.05it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3863/3863 [00:00&lt;00:00, 221680.07it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3834/3834 [00:00&lt;00:00, 62668.40it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3834/3834 [00:00&lt;00:00, 35092.50it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4782/4782 [00:00&lt;00:00, 120493.83it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3798/3798 [00:00&lt;00:00, 404817.33it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3790/3790 [00:00&lt;00:00, 80401.86it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3790/3790 [00:00&lt;00:00, 24990.43it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4678/4678 [00:00&lt;00:00, 146677.89it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3721/3721 [00:00&lt;00:00, 442764.48it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3716/3716 [00:00&lt;00:00, 68321.44it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4667/4667 [00:00&lt;00:00, 677352.74it/s]\nINFO:cityseer.tools.graphs:Snapping gapped endings.\n100%|██████████| 3716/3716 [00:00&lt;00:00, 7850.84it/s] \nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4832/4832 [00:00&lt;00:00, 515526.08it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3716/3716 [00:00&lt;00:00, 5085.02it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5587/5587 [00:00&lt;00:00, 142747.52it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 4144/4144 [00:00&lt;00:00, 185587.48it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3536/3536 [00:00&lt;00:00, 9568.88it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4029/4029 [00:00&lt;00:00, 403034.91it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2587/2587 [00:00&lt;00:00, 4086.35it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4060/4060 [00:00&lt;00:00, 45621.53it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2587/2587 [00:00&lt;00:00, 38441.00it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2587/2587 [00:01&lt;00:00, 1982.94it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 3232/3232 [00:00&lt;00:00, 11102.79it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 3073/3073 [00:00&lt;00:00, 379906.75it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2027/2027 [00:00&lt;00:00, 3760.82it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 3082/3082 [00:00&lt;00:00, 70168.41it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2027/2027 [00:00&lt;00:00, 34229.50it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2027/2027 [00:00&lt;00:00, 2147.97it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2646/2646 [00:00&lt;00:00, 19124.02it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1659/1659 [00:00&lt;00:00, 27781.06it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 2466/2466 [00:00&lt;00:00, 46319.33it/s]\nINFO:cityseer.tools.graphs:Ironing edges.\n100%|██████████| 2447/2447 [00:00&lt;00:00, 10740.88it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 2437/2437 [00:00&lt;00:00, 8944.59it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 1553/1553 [00:00&lt;00:00, 129074.69it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1541/1541 [00:00&lt;00:00, 89598.03it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n100%|██████████| 2395/2395 [00:00&lt;00:00, 22299.63it/s]",
    "crumbs": [
      "Preparation",
      "Graph Cleaning"
    ]
  },
  {
    "objectID": "examples/continuity/continuity_osm.html",
    "href": "examples/continuity/continuity_osm.html",
    "title": "OSM",
    "section": "",
    "text": "Set the coordinates and buffer distances to your preferred extents.\n\nfrom cityseer.tools import io\n\n# lng, lat, buffer_dist, plot_buffer = -1.7063649924889566, 52.19277374082795, 1500, 1250  # stratford-upon-avon\nlng, lat, buffer_dist, plot_buffer = (\n    -0.13039709427587876,\n    51.516434828344366,\n    6000,\n    5000,\n)  # london\n# lng, lat, buffer_dist, plot_buffer = 18.425702641104582, -33.9204746754594, 3000, 2500  # cape town\npoly_wgs, _ = io.buffered_point_poly(lng, lat, buffer_dist)\npoly_utm, _ = io.buffered_point_poly(lng, lat, buffer_dist, projected=True)\n# select extents for plotting\nplot_bbox = poly_utm.centroid.buffer(plot_buffer).bounds",
    "crumbs": [
      "Continuity",
      "OSM"
    ]
  },
  {
    "objectID": "examples/continuity/continuity_osm.html#preparation",
    "href": "examples/continuity/continuity_osm.html#preparation",
    "title": "OSM",
    "section": "",
    "text": "Set the coordinates and buffer distances to your preferred extents.\n\nfrom cityseer.tools import io\n\n# lng, lat, buffer_dist, plot_buffer = -1.7063649924889566, 52.19277374082795, 1500, 1250  # stratford-upon-avon\nlng, lat, buffer_dist, plot_buffer = (\n    -0.13039709427587876,\n    51.516434828344366,\n    6000,\n    5000,\n)  # london\n# lng, lat, buffer_dist, plot_buffer = 18.425702641104582, -33.9204746754594, 3000, 2500  # cape town\npoly_wgs, _ = io.buffered_point_poly(lng, lat, buffer_dist)\npoly_utm, _ = io.buffered_point_poly(lng, lat, buffer_dist, projected=True)\n# select extents for plotting\nplot_bbox = poly_utm.centroid.buffer(plot_buffer).bounds",
    "crumbs": [
      "Continuity",
      "OSM"
    ]
  },
  {
    "objectID": "examples/continuity/continuity_osm.html#loading-data-from-osm",
    "href": "examples/continuity/continuity_osm.html#loading-data-from-osm",
    "title": "OSM",
    "section": "Loading data from OSM",
    "text": "Loading data from OSM\nFor this example, we’ll use a custom OSM query that excludes footways because the continuity analysis needs OSM ways that have street name or route number information.\nFor this form of analysis, only basic cleaning is recommended:\n\nnot consolidating nodes because this risks accidentally dropping highway / ref / name attributes\nnot like closeness or betweenness methods, where topological distortions are arguably a bigger issue\n\n\nquery = \"\"\"\n[out:json];\n(\n    way[\"highway\"]\n    [\"area\"!=\"yes\"]\n    [\"highway\"!~\"footway|pedestrian|steps|bus_guideway|escape|raceway|proposed|planned|abandoned|platform|construction\"]\n    [\"service\"!~\"parking_aisle\"]\n    [\"amenity\"!~\"charging_station|parking|fuel|motorcycle_parking|parking_entrance|parking_space\"]\n    [\"access\"!~\"private|customers\"]\n    [\"indoor\"!=\"yes\"]\n    (poly:\"{geom_osm}\");\n);\nout body;\n&gt;;\nout qt;\n\"\"\"\nG_osm = io.osm_graph_from_poly(\n    poly_wgs, custom_request=query, simplify=True, iron_edges=False\n)\n\nINFO:cityseer.tools.io:Converting networkX graph from EPSG code 4326 to EPSG code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 141799/141799 [00:00&lt;00:00, 307109.58it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 152077/152077 [00:00&lt;00:00, 672708.16it/s]\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 152077/152077 [00:03&lt;00:00, 47701.10it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 141799/141799 [00:23&lt;00:00, 6088.50it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 36411/36411 [00:00&lt;00:00, 226888.05it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 34012/34012 [00:00&lt;00:00, 56288.52it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 32172/32172 [00:00&lt;00:00, 87738.65it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 32172/32172 [00:08&lt;00:00, 3622.80it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 26632/26632 [00:00&lt;00:00, 184209.95it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 36520/36520 [00:03&lt;00:00, 10934.54it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 34380/34380 [00:00&lt;00:00, 529406.13it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 26335/26335 [00:09&lt;00:00, 2859.41it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 35324/35324 [00:00&lt;00:00, 149166.62it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 27279/27279 [00:00&lt;00:00, 97660.35it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 27279/27279 [00:04&lt;00:00, 6087.78it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 24920/24920 [00:00&lt;00:00, 58761.52it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 32513/32513 [00:01&lt;00:00, 20982.18it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 23585/23585 [00:00&lt;00:00, 141766.68it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 30677/30677 [00:00&lt;00:00, 700146.18it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 23133/23133 [00:05&lt;00:00, 4191.83it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 30750/30750 [00:00&lt;00:00, 43371.19it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 23206/23206 [00:00&lt;00:00, 119011.86it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 23206/23206 [00:01&lt;00:00, 12658.30it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 23083/23083 [00:00&lt;00:00, 621311.58it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 30654/30654 [00:00&lt;00:00, 131804.30it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 23066/23066 [00:00&lt;00:00, 503339.17it/s]",
    "crumbs": [
      "Continuity",
      "OSM"
    ]
  },
  {
    "objectID": "examples/continuity/continuity_osm.html#observe-continuity-metrics",
    "href": "examples/continuity/continuity_osm.html#observe-continuity-metrics",
    "title": "OSM",
    "section": "Observe continuity metrics",
    "text": "Observe continuity metrics\nWe can now run the contunity metrics\n\nimport matplotlib.pyplot as plt\n\nfrom cityseer.tools import io, plot\nfrom cityseer.metrics import observe\n\n# methods can be \"names\", \"routes\", \"highways\"\n\nprint(\"Continuity by street names\")\nG_cont, NamesContReport = observe.street_continuity(G_osm, method=\"names\")\nNamesContReport.report_by_count(n_items=5)\nNamesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by route numbers\")\nG_cont, RoutesContReport = observe.street_continuity(G_cont, method=\"routes\")\nRoutesContReport.report_by_count(n_items=5)\nRoutesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by highway types\")\nG_cont, HwyContReport = observe.street_continuity(G_cont, method=\"highways\")\nHwyContReport.report_by_count(n_items=5)\nHwyContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by overlapping routes and names types\")\nG_cont, HybridContReport = observe.hybrid_street_continuity(G_cont)\nHybridContReport.report_by_count(n_items=5)\nHybridContReport.report_by_length(n_items=5)\n\nINFO:cityseer.metrics.observe:Calculating metrics for names.\n\n\nContinuity by street names\n\n\n100%|██████████| 30519/30519 [00:00&lt;00:00, 44680.14it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 52 - harrow road\nINFO:cityseer.metrics.observe:Count: 50 - holloway road\nINFO:cityseer.metrics.observe:Count: 48 - king's road\nINFO:cityseer.metrics.observe:Count: 46 - wandsworth road\nINFO:cityseer.metrics.observe:Count: 44 - battersea park road\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 6.0km - westway\nINFO:cityseer.metrics.observe:Length: 5.02km - regent's canal towpath\nINFO:cityseer.metrics.observe:Length: 4.43km - outer circle\nINFO:cityseer.metrics.observe:Length: 3.95km - harrow road\nINFO:cityseer.metrics.observe:Length: 3.35km - finchley road\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n\n\nContinuity by route numbers\n\n\n100%|██████████| 30519/30519 [00:00&lt;00:00, 172552.22it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 174 - a4\nINFO:cityseer.metrics.observe:Count: 151 - a3220\nINFO:cityseer.metrics.observe:Count: 144 - a501\nINFO:cityseer.metrics.observe:Count: 107 - a400\nINFO:cityseer.metrics.observe:Count: 99 - a202\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 12.6km - a4\nINFO:cityseer.metrics.observe:Length: 10.95km - a3220\nINFO:cityseer.metrics.observe:Length: 9.0km - a501\nINFO:cityseer.metrics.observe:Length: 7.94km - a400\nINFO:cityseer.metrics.observe:Length: 7.71km - a202\n\n\nContinuity by highway types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for highways.\n100%|██████████| 30519/30519 [00:00&lt;00:00, 87953.52it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 13294 - residential\nINFO:cityseer.metrics.observe:Count: 6573 - service\nINFO:cityseer.metrics.observe:Count: 3200 - unclassified\nINFO:cityseer.metrics.observe:Count: 2650 - primary\nINFO:cityseer.metrics.observe:Count: 1963 - cycleway\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 1045.4km - residential\nINFO:cityseer.metrics.observe:Length: 428.53km - service\nINFO:cityseer.metrics.observe:Length: 243.57km - unclassified\nINFO:cityseer.metrics.observe:Length: 181.72km - primary\nINFO:cityseer.metrics.observe:Length: 167.71km - cycleway\n\n\nContinuity by overlapping routes and names types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n100%|██████████| 30519/30519 [00:00&lt;00:00, 140316.03it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 304 - a501\nINFO:cityseer.metrics.observe:Count: 281 - a202\nINFO:cityseer.metrics.observe:Count: 280 - a3220\nINFO:cityseer.metrics.observe:Count: 255 - a4\nINFO:cityseer.metrics.observe:Count: 170 - a400\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 22.66km - a501\nINFO:cityseer.metrics.observe:Length: 21.08km - a3220\nINFO:cityseer.metrics.observe:Length: 19.9km - a202\nINFO:cityseer.metrics.observe:Length: 19.06km - a4\nINFO:cityseer.metrics.observe:Length: 13.35km - a40\n\n\n\nfor method, shape_exp, descriptor, cmap, inverse, col_by_categ in zip(\n    [\"names\", \"routes\", \"highways\", \"hybrid\"],  #\n    [1, 0.75, 0.5, 1],  #\n    [\"Street names\", \"Routes\", \"Road types\", \"Hybrid routes & names\"],  #\n    [\"plasma\", \"viridis\", \"tab10\", \"tab10\"],  #\n    [False, False, True, False],  #\n    [False, False, True, True],\n):\n    print(f\"Plotting results for method: {method}\")\n    # plot\n    bg_colour = \"#111\"\n    fig, axes = plt.subplots(\n        2, 1, dpi=150, figsize=(8, 12), facecolor=bg_colour, constrained_layout=True\n    )\n    fig.suptitle(\n        f\"OS Open Roads plotted by {descriptor} continuity\",\n        fontsize=\"small\",\n        ha=\"center\",\n    )\n    # by count\n    plot.plot_nx_edges(\n        axes[0],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_count\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[0].set_xlabel(f\"{descriptor} by count\", fontsize=\"x-small\")  # type: ignore\n    # by length\n    plot.plot_nx_edges(\n        axes[1],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_length\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[1].set_xlabel(f\"{descriptor} by length (metres)\", fontsize=\"x-small\")  # type: ignore\n    plt.show()\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: names\n\n\n30519it [00:00, 436173.32it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:03&lt;00:00, 9848.79it/s] \nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 515888.89it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:02&lt;00:00, 11225.09it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: routes\n\n\n30519it [00:00, 639530.98it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:02&lt;00:00, 10577.33it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 623780.34it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:02&lt;00:00, 10582.54it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: highways\n\n\n30519it [00:00, 583939.51it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:02&lt;00:00,  5.28it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 538861.30it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  5.67it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: hybrid\n\n\n30519it [00:00, 632900.20it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  6.20it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 686204.52it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  7.26it/s]",
    "crumbs": [
      "Continuity",
      "OSM"
    ]
  },
  {
    "objectID": "examples/london_centralities.html",
    "href": "examples/london_centralities.html",
    "title": "London Centralities",
    "section": "",
    "text": "Install and update cityseer if necessary.\n# !pip install --upgrade cityseer",
    "crumbs": [
      "Networks",
      "London Centralities"
    ]
  },
  {
    "objectID": "examples/london_centralities.html#data-source",
    "href": "examples/london_centralities.html#data-source",
    "title": "London Centralities",
    "section": "Data Source",
    "text": "Data Source\nThe following example uses the OS Open Roads dataset, which is available under the Open Government License.",
    "crumbs": [
      "Networks",
      "London Centralities"
    ]
  },
  {
    "objectID": "examples/london_centralities.html#preparation",
    "href": "examples/london_centralities.html#preparation",
    "title": "London Centralities",
    "section": "Preparation",
    "text": "Preparation\nThe following example assumes that the OS Open Roads dataset has been downloaded to temp/os_open_roads/oproad_gb.gpkg relative to the root of the cityseer-examples repository. Please edit the paths and path setup in this cell if you are using different directories.\n\nfrom pathlib import Path\n\nrepo_path = Path.cwd()\nif str(repo_path).endswith(\"/examples\"):\n    repo_path = Path.cwd() / \"..\"\nif not str(repo_path.resolve()).endswith(\"cityseer-examples\"):\n    raise ValueError(\n        \"Please check your notebook working directory relative to your project and data paths.\"\n    )\n\nopen_roads_path = Path(repo_path / \"temp/os_open_roads/oproad_gb.gpkg\")\nprint(\"data path:\", open_roads_path)\nprint(\"path exists:\", open_roads_path.exists())\n\ndata path: /Users/gareth/dev/cityseer-examples/temp/os_open_roads/oproad_gb.gpkg\npath exists: True",
    "crumbs": [
      "Networks",
      "London Centralities"
    ]
  },
  {
    "objectID": "examples/london_centralities.html#extents",
    "href": "examples/london_centralities.html#extents",
    "title": "London Centralities",
    "section": "Extents",
    "text": "Extents\nInstead of loading the entire dataset, we’ll use a bounding box to only load an area of interest.\n\nfrom pyproj import Transformer\nfrom shapely import geometry\n\nfrom cityseer.tools import graphs, io\n\n# bbox setup\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer_dist = 5000\ndistances = [250, 500, 1000, 2000]\nplot_buffer = 1500\n# transform from WGS to BNG\ntransformer = Transformer.from_crs(\"EPSG:4326\", \"EPSG:27700\")\neasting, northing = transformer.transform(lat, lng)\n# calculate bbox relative to centroid\ncentroid = geometry.Point(easting, northing)\ntarget_bbox: tuple[float, float, float, float] = centroid.buffer(buffer_dist).bounds  # type: ignore\nplot_bbox: tuple[float, float, float, float] = centroid.buffer(plot_buffer).bounds  # type: ignore",
    "crumbs": [
      "Networks",
      "London Centralities"
    ]
  },
  {
    "objectID": "examples/london_centralities.html#load",
    "href": "examples/london_centralities.html#load",
    "title": "London Centralities",
    "section": "Load",
    "text": "Load\nWe can now load the OS Open Roads dataset and convert it to a format that can be used by cityseer for downstream calculations.\n\n# load OS Open Roads data from downloaded geopackage\nG_open = io.nx_from_open_roads(open_roads_path, target_bbox=target_bbox)\n# decompose for higher resolution analysis\nG_decomp = graphs.nx_decompose(G_open, 25)\n# prepare the data structures\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(\n    G_decomp, crs=27700\n)\n\nINFO:cityseer.tools.io:Nodes: 18182\nINFO:cityseer.tools.io:Edges: 24189\nINFO:cityseer.tools.io:Dropped 430 edges where not both start and end nodes were present.\nINFO:cityseer.tools.io:Running basic graph cleaning\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 18182/18182 [00:00&lt;00:00, 23947.00it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 10.\n100%|██████████| 22567/22567 [00:00&lt;00:00, 41614.51it/s]\nINFO:cityseer.tools.graphs:Decomposing graph to maximum edge lengths of 25.\n100%|██████████| 22504/22504 [00:21&lt;00:00, 1047.14it/s]\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n100%|██████████| 75807/75807 [00:01&lt;00:00, 70731.31it/s]\n100%|██████████| 75807/75807 [00:15&lt;00:00, 4897.20it/s]",
    "crumbs": [
      "Networks",
      "London Centralities"
    ]
  },
  {
    "objectID": "examples/london_centralities.html#calculate-centralities",
    "href": "examples/london_centralities.html#calculate-centralities",
    "title": "London Centralities",
    "section": "Calculate centralities",
    "text": "Calculate centralities\nThe centrality methods can now be computed.\n\nfrom cityseer.metrics import networks\n\n# if you want to compute wider area centralities, e.g. 20km, then use less decomposition to speed up the computation\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\nnodes_gdf_jitter = nodes_gdf.copy(deep=True)\nnodes_gdf_jitter = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf_jitter,\n    distances=distances,\n    jitter_scale=10,\n)\nnodes_gdf = networks.node_centrality_simplest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\n100%|██████████| 75807/75807 [02:54&lt;00:00, 434.26it/s]\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\n100%|██████████| 75807/75807 [01:40&lt;00:00, 755.86it/s]\nINFO:cityseer.metrics.networks:Computing simplest path node centrality.\n100%|██████████| 75807/75807 [02:28&lt;00:00, 510.64it/s]",
    "crumbs": [
      "Networks",
      "London Centralities"
    ]
  },
  {
    "objectID": "examples/london_centralities.html#plots",
    "href": "examples/london_centralities.html#plots",
    "title": "London Centralities",
    "section": "Plots",
    "text": "Plots\nLet’s plot a selection of distance thresholds for each of the computed measures.\n\nimport matplotlib.pyplot as plt\nfrom cityseer import rustalgos\nfrom cityseer.tools import plot\n\nbg_colour = \"#111\"\nbetas = rustalgos.betas_from_distances(distances)\navg_dists = rustalgos.avg_distances_for_betas(betas)\nbg_colour = \"#111\"\ntext_colour = \"#ddd\"\nfont_size = 5\nfor d, b, avg_d in zip(distances, betas, avg_dists):\n    fig, axes = plt.subplots(1, 3, figsize=(8, 4), dpi=200, facecolor=bg_colour)\n    fig.suptitle(\n        f\"Shortest and simplest path closeness centrality: {d}m\",\n        fontsize=8,\n        color=text_colour,\n    )\n    plot.plot_scatter(\n        axes[0],\n        network_structure.node_xs,\n        network_structure.node_ys,\n        nodes_gdf[f\"cc_beta_{d}\"],\n        bbox_extents=plot_bbox,\n        cmap_key=\"magma\",\n        face_colour=bg_colour,\n    )\n    axes[0].set_title(\n        f\"Gravity index ({avg_d:.2f}m avg. toler.)\",\n        fontsize=font_size,\n        color=text_colour,\n    )\n    plot.plot_scatter(\n        axes[1],\n        network_structure.node_xs,\n        network_structure.node_ys,\n        nodes_gdf_jitter[f\"cc_beta_{d}\"],\n        bbox_extents=plot_bbox,\n        cmap_key=\"magma\",\n        face_colour=bg_colour,\n    )\n    axes[1].set_title(f\"Gravity index w. jitter\", fontsize=font_size, color=text_colour)\n    plot.plot_scatter(\n        axes[2],\n        network_structure.node_xs,\n        network_structure.node_ys,\n        nodes_gdf[f\"cc_hillier_{d}_ang\"],\n        bbox_extents=plot_bbox,\n        cmap_key=\"magma\",\n        face_colour=bg_colour,\n    )\n    axes[2].set_title(\n        f\"Simplest path hillier integration\", fontsize=font_size, color=text_colour\n    )\n    plt.tight_layout()\n    plt.show()\n\nfor d, b, avg_d in zip(distances, betas, avg_dists):\n    fig, axes = plt.subplots(1, 3, figsize=(8, 4), dpi=200, facecolor=bg_colour)\n    fig.suptitle(\n        f\"Shortest and simplest path betweenness centrality: {d}m\",\n        fontsize=8,\n        color=text_colour,\n    )\n    plot.plot_scatter(\n        axes[0],\n        network_structure.node_xs,\n        network_structure.node_ys,\n        nodes_gdf[f\"cc_betweenness_{d}\"],\n        bbox_extents=plot_bbox,\n        cmap_key=\"magma\",\n        s_max=2,\n        face_colour=bg_colour,\n    )\n    axes[0].set_title(\n        f\"Dist. wtd. betw. ({avg_d:.2f}m avg. toler.)\",\n        fontsize=font_size,\n        color=text_colour,\n    )\n    plot.plot_scatter(\n        axes[1],\n        network_structure.node_xs,\n        network_structure.node_ys,\n        nodes_gdf_jitter[f\"cc_betweenness_{d}\"],\n        bbox_extents=plot_bbox,\n        cmap_key=\"magma\",\n        s_max=2,\n        face_colour=bg_colour,\n    )\n    axes[1].set_title(\n        f\"Dist. wtd. betw. w. jitter\", fontsize=font_size, color=text_colour\n    )\n    plot.plot_scatter(\n        axes[2],\n        network_structure.node_xs,\n        network_structure.node_ys,\n        nodes_gdf[f\"cc_betweenness_{d}_ang\"],\n        bbox_extents=plot_bbox,\n        cmap_key=\"magma\",\n        s_max=2,\n        face_colour=bg_colour,\n    )\n    axes[2].set_title(\n        f\"Simplest path betweenness\", fontsize=font_size, color=text_colour\n    )\n    plt.tight_layout()\n    plt.show()",
    "crumbs": [
      "Networks",
      "London Centralities"
    ]
  },
  {
    "objectID": "examples/save_to_geopandas.html",
    "href": "examples/save_to_geopandas.html",
    "title": "Saving via GeoPandas",
    "section": "",
    "text": "Tip\n\n\n\nFor more details on downloading for a boundary, see this example.\n\n\nAssume we have the following network.\n\nimport osmnx as ox\nfrom cityseer.tools import io, plot\n\n# retrieve a boundary from OSM\nbounds_gdf = ox.geocode_to_gdf(\n    \"R1536593\",  # OSM relation ID\n    by_osmid=True,\n)\n# project\nbounds_gdf = bounds_gdf.to_crs(3035)  # projected CRS\n# extract geom\nbounds_geom = bounds_gdf.union_all().simplify(500)\n# extract network for geom\nG_nx = io.osm_graph_from_poly(\n    bounds_geom,\n    poly_crs_code=3035,  # set to your CRS\n    to_crs_code=3035,  # output CRS\n    simplify=False,  # set to True for automatic simplification\n)\nplot.plot_nx(G_nx, plot_geoms=True)\n\nINFO:cityseer.tools.io:Converting networkX graph from EPSG code 4326 to EPSG code 3035.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n  0%|          | 0/20224 [00:00&lt;?, ?it/s]100%|██████████| 20224/20224 [00:00&lt;00:00, 648493.96it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n  0%|          | 0/22366 [00:00&lt;?, ?it/s]100%|██████████| 22366/22366 [00:00&lt;00:00, 1273931.98it/s]\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n  0%|          | 0/22366 [00:00&lt;?, ?it/s] 31%|███       | 6948/22366 [00:00&lt;00:00, 69468.47it/s] 62%|██████▏   | 13895/22366 [00:00&lt;00:00, 67593.87it/s] 92%|█████████▏| 20658/22366 [00:00&lt;00:00, 67591.37it/s]100%|██████████| 22366/22366 [00:00&lt;00:00, 67589.14it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n  0%|          | 0/20224 [00:00&lt;?, ?it/s]  5%|▍         | 918/20224 [00:00&lt;00:02, 9034.46it/s]  9%|▉         | 1822/20224 [00:00&lt;00:02, 7747.82it/s] 13%|█▎        | 2608/20224 [00:00&lt;00:02, 6656.84it/s] 16%|█▋        | 3290/20224 [00:00&lt;00:02, 6634.32it/s] 20%|█▉        | 3972/20224 [00:00&lt;00:02, 6692.60it/s] 24%|██▍       | 4816/20224 [00:00&lt;00:02, 7229.57it/s] 27%|██▋       | 5548/20224 [00:00&lt;00:02, 7232.05it/s] 31%|███       | 6308/20224 [00:00&lt;00:01, 7334.87it/s] 35%|███▌      | 7129/20224 [00:00&lt;00:01, 7591.06it/s] 40%|███▉      | 8001/20224 [00:01&lt;00:01, 7857.10it/s] 46%|████▌     | 9314/20224 [00:01&lt;00:01, 9428.78it/s] 51%|█████     | 10272/20224 [00:01&lt;00:01, 9474.05it/s] 56%|█████▋    | 11408/20224 [00:01&lt;00:00, 10035.97it/s] 63%|██████▎   | 12671/20224 [00:01&lt;00:00, 10809.73it/s] 68%|██████▊   | 13843/20224 [00:01&lt;00:00, 11073.56it/s] 75%|███████▌  | 15197/20224 [00:01&lt;00:00, 11802.64it/s] 82%|████████▏ | 16610/20224 [00:01&lt;00:00, 12492.69it/s] 88%|████████▊ | 17861/20224 [00:01&lt;00:00, 12392.94it/s] 94%|█████████▍| 19102/20224 [00:02&lt;00:00, 11621.73it/s]100%|██████████| 20224/20224 [00:02&lt;00:00, 9649.34it/s] \nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n  0%|          | 0/8688 [00:00&lt;?, ?it/s] 31%|███       | 2657/8688 [00:00&lt;00:00, 26551.67it/s] 61%|██████    | 5313/8688 [00:00&lt;00:00, 14750.02it/s] 81%|████████▏ | 7068/8688 [00:00&lt;00:00, 11548.57it/s] 97%|█████████▋| 8401/8688 [00:00&lt;00:00, 9642.59it/s] 100%|██████████| 8688/8688 [00:00&lt;00:00, 10952.18it/s]",
    "crumbs": [
      "Conversion",
      "Saving via GeoPandas"
    ]
  },
  {
    "objectID": "examples/save_to_geopandas.html#generate-a-network",
    "href": "examples/save_to_geopandas.html#generate-a-network",
    "title": "Saving via GeoPandas",
    "section": "",
    "text": "Tip\n\n\n\nFor more details on downloading for a boundary, see this example.\n\n\nAssume we have the following network.\n\nimport osmnx as ox\nfrom cityseer.tools import io, plot\n\n# retrieve a boundary from OSM\nbounds_gdf = ox.geocode_to_gdf(\n    \"R1536593\",  # OSM relation ID\n    by_osmid=True,\n)\n# project\nbounds_gdf = bounds_gdf.to_crs(3035)  # projected CRS\n# extract geom\nbounds_geom = bounds_gdf.union_all().simplify(500)\n# extract network for geom\nG_nx = io.osm_graph_from_poly(\n    bounds_geom,\n    poly_crs_code=3035,  # set to your CRS\n    to_crs_code=3035,  # output CRS\n    simplify=False,  # set to True for automatic simplification\n)\nplot.plot_nx(G_nx, plot_geoms=True)\n\nINFO:cityseer.tools.io:Converting networkX graph from EPSG code 4326 to EPSG code 3035.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n  0%|          | 0/20224 [00:00&lt;?, ?it/s]100%|██████████| 20224/20224 [00:00&lt;00:00, 648493.96it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n  0%|          | 0/22366 [00:00&lt;?, ?it/s]100%|██████████| 22366/22366 [00:00&lt;00:00, 1273931.98it/s]\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n  0%|          | 0/22366 [00:00&lt;?, ?it/s] 31%|███       | 6948/22366 [00:00&lt;00:00, 69468.47it/s] 62%|██████▏   | 13895/22366 [00:00&lt;00:00, 67593.87it/s] 92%|█████████▏| 20658/22366 [00:00&lt;00:00, 67591.37it/s]100%|██████████| 22366/22366 [00:00&lt;00:00, 67589.14it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n  0%|          | 0/20224 [00:00&lt;?, ?it/s]  5%|▍         | 918/20224 [00:00&lt;00:02, 9034.46it/s]  9%|▉         | 1822/20224 [00:00&lt;00:02, 7747.82it/s] 13%|█▎        | 2608/20224 [00:00&lt;00:02, 6656.84it/s] 16%|█▋        | 3290/20224 [00:00&lt;00:02, 6634.32it/s] 20%|█▉        | 3972/20224 [00:00&lt;00:02, 6692.60it/s] 24%|██▍       | 4816/20224 [00:00&lt;00:02, 7229.57it/s] 27%|██▋       | 5548/20224 [00:00&lt;00:02, 7232.05it/s] 31%|███       | 6308/20224 [00:00&lt;00:01, 7334.87it/s] 35%|███▌      | 7129/20224 [00:00&lt;00:01, 7591.06it/s] 40%|███▉      | 8001/20224 [00:01&lt;00:01, 7857.10it/s] 46%|████▌     | 9314/20224 [00:01&lt;00:01, 9428.78it/s] 51%|█████     | 10272/20224 [00:01&lt;00:01, 9474.05it/s] 56%|█████▋    | 11408/20224 [00:01&lt;00:00, 10035.97it/s] 63%|██████▎   | 12671/20224 [00:01&lt;00:00, 10809.73it/s] 68%|██████▊   | 13843/20224 [00:01&lt;00:00, 11073.56it/s] 75%|███████▌  | 15197/20224 [00:01&lt;00:00, 11802.64it/s] 82%|████████▏ | 16610/20224 [00:01&lt;00:00, 12492.69it/s] 88%|████████▊ | 17861/20224 [00:01&lt;00:00, 12392.94it/s] 94%|█████████▍| 19102/20224 [00:02&lt;00:00, 11621.73it/s]100%|██████████| 20224/20224 [00:02&lt;00:00, 9649.34it/s] \nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n  0%|          | 0/8688 [00:00&lt;?, ?it/s] 31%|███       | 2657/8688 [00:00&lt;00:00, 26551.67it/s] 61%|██████    | 5313/8688 [00:00&lt;00:00, 14750.02it/s] 81%|████████▏ | 7068/8688 [00:00&lt;00:00, 11548.57it/s] 97%|█████████▋| 8401/8688 [00:00&lt;00:00, 9642.59it/s] 100%|██████████| 8688/8688 [00:00&lt;00:00, 10952.18it/s]",
    "crumbs": [
      "Conversion",
      "Saving via GeoPandas"
    ]
  },
  {
    "objectID": "examples/save_to_geopandas.html#convert-to-geopandas",
    "href": "examples/save_to_geopandas.html#convert-to-geopandas",
    "title": "Saving via GeoPandas",
    "section": "Convert to GeoPandas",
    "text": "Convert to GeoPandas\nYou can now convert the network to a geopandas GeoDataFrame.\n\n# convert to a LineString GeoDataFrame\nedges_gdf = io.geopandas_from_nx(G_nx, crs=3035)\nedges_gdf.head()\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n\n\n\n\n\n\n\n\n\ngeom\nnames\nroutes\nhighways\nlevels\nis_tunnel\nis_bridge\nstart_nd_key\nend_nd_key\nedge_idx\n\n\n\n\n0\nLINESTRING (3686215.164 2665464.119, 3686209.1...\n[rue de gireugne, rue francoise dolto]\n[]\n[tertiary]\n[0]\nFalse\nFalse\n448239596\n10746741880\n0\n\n\n1\nLINESTRING (3686586.641 2665354.037, 3686435.5...\n[]\n[]\n[track]\n[0]\nFalse\nFalse\n10746741880\n10746741876\n0\n\n\n2\nLINESTRING (3686215.164 2665464.119, 3686216.1...\n[rue de gireugne]\n[]\n[tertiary]\n[0]\nFalse\nFalse\n10746741880\n1969279930\n0\n\n\n3\nLINESTRING (3683478.127 2667452.761, 3683490.1...\n[rue de chatellerault]\n[d 925]\n[secondary]\n[0]\nFalse\nFalse\n1563458310\n1527199968\n0\n\n\n4\nLINESTRING (3683926.884 2667717.073, 3683959.4...\n[rue de chatellerault]\n[d 925]\n[secondary]\n[0]\nFalse\nFalse\n1527199968\n9328420068\n0",
    "crumbs": [
      "Conversion",
      "Saving via GeoPandas"
    ]
  },
  {
    "objectID": "examples/save_to_geopandas.html#save",
    "href": "examples/save_to_geopandas.html#save",
    "title": "Saving via GeoPandas",
    "section": "Save",
    "text": "Save\nIt is then possible to save the GeoDataFrame. Create a temp folder or update your path accordingly:\n\nfrom pathlib import Path\n\nPath(\"../temp\").mkdir(exist_ok=True)  # for build\n\nf_path = \"../temp/output_file.gpkg\"\nedges_gdf.to_file(f_path)\n\nINFO:pyogrio._io:Created 8,688 records\n\n\nThe GPKG file can now be explored or modified in GIS software such as QGIS.",
    "crumbs": [
      "Conversion",
      "Saving via GeoPandas"
    ]
  },
  {
    "objectID": "examples/save_to_geopandas.html#reload",
    "href": "examples/save_to_geopandas.html#reload",
    "title": "Saving via GeoPandas",
    "section": "Reload",
    "text": "Reload\nTo reload, you can read the data with geopandas.\n\nimport geopandas as gpd\n\nin_edges_gdf = gpd.read_file(f_path)\nin_edges_gdf.head()\n\n\n\n\n\n\n\n\nnames\nroutes\nhighways\nlevels\nis_tunnel\nis_bridge\nstart_nd_key\nend_nd_key\nedge_idx\ngeometry\n\n\n\n\n0\n['rue de gireugne', 'rue francoise dolto']\n[]\n['tertiary']\n[0]\nFalse\nFalse\n448239596\n10746741880\n0\nLINESTRING (3686215.164 2665464.119, 3686209.1...\n\n\n1\n[]\n[]\n['track']\n[0]\nFalse\nFalse\n10746741880\n10746741876\n0\nLINESTRING (3686586.641 2665354.037, 3686435.5...\n\n\n2\n['rue de gireugne']\n[]\n['tertiary']\n[0]\nFalse\nFalse\n10746741880\n1969279930\n0\nLINESTRING (3686215.164 2665464.119, 3686216.1...\n\n\n3\n['rue de chatellerault']\n['d 925']\n['secondary']\n[0]\nFalse\nFalse\n1563458310\n1527199968\n0\nLINESTRING (3683478.127 2667452.761, 3683490.1...\n\n\n4\n['rue de chatellerault']\n['d 925']\n['secondary']\n[0]\nFalse\nFalse\n1527199968\n9328420068\n0\nLINESTRING (3683926.884 2667717.073, 3683959.4...",
    "crumbs": [
      "Conversion",
      "Saving via GeoPandas"
    ]
  },
  {
    "objectID": "examples/save_to_geopandas.html#convert-back-to-nx",
    "href": "examples/save_to_geopandas.html#convert-back-to-nx",
    "title": "Saving via GeoPandas",
    "section": "Convert back to nx",
    "text": "Convert back to nx\nThen use cityseer to convert the LineString GeoDataFrame back into a networkx graph.\n\nin_G_nx = io.nx_from_generic_geopandas(in_edges_gdf)\nplot.plot_nx(in_G_nx, plot_geoms=True)\n\n  0%|          | 0/8688 [00:00&lt;?, ?it/s]  7%|▋         | 590/8688 [00:00&lt;00:01, 5889.07it/s] 14%|█▎        | 1188/8688 [00:00&lt;00:01, 5939.33it/s] 21%|██        | 1782/8688 [00:00&lt;00:01, 5857.10it/s] 27%|██▋       | 2388/8688 [00:00&lt;00:01, 5933.25it/s] 34%|███▍      | 2993/8688 [00:00&lt;00:00, 5971.96it/s] 41%|████▏     | 3602/8688 [00:00&lt;00:00, 6009.23it/s] 48%|████▊     | 4204/8688 [00:00&lt;00:00, 5956.74it/s] 55%|█████▌    | 4815/8688 [00:00&lt;00:00, 6003.95it/s] 62%|██████▎   | 5430/8688 [00:00&lt;00:00, 6046.56it/s] 70%|██████▉   | 6040/8688 [00:01&lt;00:00, 6060.34it/s] 77%|███████▋  | 6648/8688 [00:01&lt;00:00, 6064.92it/s] 84%|████████▎ | 7255/8688 [00:01&lt;00:00, 6003.71it/s] 90%|█████████ | 7858/8688 [00:01&lt;00:00, 6009.57it/s] 97%|█████████▋| 8461/8688 [00:01&lt;00:00, 6013.30it/s]100%|██████████| 8688/8688 [00:01&lt;00:00, 5994.58it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n  0%|          | 0/8687 [00:00&lt;?, ?it/s]100%|██████████| 8687/8687 [00:00&lt;00:00, 165700.66it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n  0%|          | 0/8686 [00:00&lt;?, ?it/s] 28%|██▊       | 2431/8686 [00:00&lt;00:00, 24293.11it/s] 56%|█████▌    | 4861/8686 [00:00&lt;00:00, 13364.29it/s] 74%|███████▍  | 6460/8686 [00:00&lt;00:00, 10237.56it/s] 88%|████████▊ | 7657/8686 [00:00&lt;00:00, 8234.19it/s]  99%|█████████▉| 8597/8686 [00:00&lt;00:00, 7081.31it/s]100%|██████████| 8686/8686 [00:00&lt;00:00, 8738.76it/s]",
    "crumbs": [
      "Conversion",
      "Saving via GeoPandas"
    ]
  },
  {
    "objectID": "examples/london_amenities.html",
    "href": "examples/london_amenities.html",
    "title": "London Amenities",
    "section": "",
    "text": "Install and update cityseer if necessary.\n# !pip install --upgrade cityseer",
    "crumbs": [
      "Accessibility",
      "London Amenities"
    ]
  },
  {
    "objectID": "examples/london_amenities.html#data-and-preparation",
    "href": "examples/london_amenities.html#data-and-preparation",
    "title": "London Amenities",
    "section": "Data and preparation",
    "text": "Data and preparation\nThis examples calculates landuse accessibility to pubs and restaurants for London\nFor additional information on network preparation, see the corresponding notebook on graph cleaning.\nThis example will make use of OSM data downloaded from the OSM API for a 5000m radius around London Soho.\nThe landuse amenity data is taken from OpenStreetMap via osmnx.\n\nfrom cityseer.tools import graphs, io\n\n# download from OSM\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 5000\nplot_buffer = 3500\n# creates a WGS shapely polygon\npoly_wgs, _ = io.buffered_point_poly(lng, lat, buffer)\npoly_utm, _ = io.buffered_point_poly(lng, lat, buffer, projected=True)\nplot_bbox = poly_utm.centroid.buffer(plot_buffer).bounds\n\nPrepare the amenities GeoDataFrame.\n\n# prepare data layer\nfrom cityseer.metrics import layers\nfrom osmnx import features\n\ndata_gdf = features.features_from_place(\n    \"London\", tags={\"amenity\": [\"pub\", \"restaurant\"]}\n)\n\n# convert to the same UTM CRS as the network\ndata_gdf = data_gdf.to_crs(\n    32630\n)  # to match EPSG code for UTM zone 30N per network data\n\n# extract nodes\ndata_gdf = data_gdf.loc[\"node\"]\ndata_gdf = data_gdf.reset_index(level=0, drop=True)\n# set index to string for cityseer compatibility\ndata_gdf.index = data_gdf.index.astype(str)\n# extract relevant columns\ndata_gdf = data_gdf[[\"amenity\", \"geometry\"]]\nprint(data_gdf.head())\n\n      amenity                        geometry\n0         pub  POINT (694282.233 5720372.951)\n1  restaurant  POINT (694353.653 5720508.222)\n2         pub  POINT (694189.282 5720228.905)\n3         pub  POINT (695475.171 5721895.793)\n4         pub  POINT (709733.415 5720007.168)\n\n\nFetch and simplify the street network. The street network will be decomposed for a higher resolution analysis.\n\n# generate OSM graph from polygon\nG_utm = io.osm_graph_from_poly(poly_wgs, simplify=True)\n# decompose for higher resolution analysis\nG_decomp = graphs.nx_decompose(G_utm, 25)\n# prepare the data structures\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(\n    G_decomp, crs=32629\n)\n\nWARNING:cityseer.tools.io:Merging node 12282444586 into 5753060461 due to identical x, y coords.\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -0.7-1\nWARNING:cityseer.tools.io:Unable to parse level info: -0.7-1\nWARNING:cityseer.tools.io:Unable to parse level info: -1-4\nWARNING:cityseer.tools.io:Unable to parse level info: 0-1\nWARNING:cityseer.tools.io:Unable to parse level info: -1-4\nWARNING:cityseer.tools.io:Unable to parse level info: -1-4\nWARNING:cityseer.tools.io:Unable to parse level info: -1-4\nWARNING:cityseer.tools.io:Unable to parse level info: -1-4\nWARNING:cityseer.tools.io:Unable to parse level info: -1-4\nWARNING:cityseer.tools.io:Unable to parse level info: -1-4\nWARNING:cityseer.tools.io:Unable to parse level info: -1-4\nWARNING:cityseer.tools.io:Unable to parse level info: -1-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.io:Converting networkX graph from EPSG code 4326 to EPSG code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 180851/180851 [00:00&lt;00:00, 397542.49it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 198152/198152 [00:00&lt;00:00, 745908.35it/s]\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 198152/198152 [00:07&lt;00:00, 25352.52it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 180851/180851 [00:35&lt;00:00, 5113.71it/s] \nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 82209/82209 [00:00&lt;00:00, 276081.31it/s]\n100%|██████████| 82209/82209 [00:44&lt;00:00, 1866.06it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 64908/64908 [00:05&lt;00:00, 11824.79it/s]\n100%|██████████| 61067/61067 [00:03&lt;00:00, 17815.10it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 57503/57503 [00:00&lt;00:00, 73947.22it/s] \nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 53120/53120 [00:00&lt;00:00, 245444.14it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 40905/40905 [00:03&lt;00:00, 12664.62it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 53297/53297 [00:03&lt;00:00, 16473.70it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 52669/52669 [00:00&lt;00:00, 327394.55it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 40905/40905 [00:03&lt;00:00, 12144.18it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 52843/52843 [00:00&lt;00:00, 68930.39it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 52807/52807 [00:00&lt;00:00, 308338.67it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 40905/40905 [00:01&lt;00:00, 26712.76it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 52827/52827 [00:02&lt;00:00, 25655.82it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 52827/52827 [00:00&lt;00:00, 312787.18it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 40905/40905 [00:01&lt;00:00, 22769.45it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 52848/52848 [00:00&lt;00:00, 74513.79it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 40905/40905 [00:00&lt;00:00, 42765.34it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 40905/40905 [00:02&lt;00:00, 18075.59it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 51298/51298 [00:01&lt;00:00, 39739.74it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 39678/39678 [00:00&lt;00:00, 52412.52it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 38687/38687 [00:00&lt;00:00, 44243.70it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 38687/38687 [00:03&lt;00:00, 10039.57it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 47785/47785 [00:01&lt;00:00, 30199.81it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 36875/36875 [00:00&lt;00:00, 128520.54it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 36649/36649 [00:00&lt;00:00, 44319.51it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 36649/36649 [00:02&lt;00:00, 13924.18it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 46501/46501 [00:00&lt;00:00, 50490.94it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 36122/36122 [00:00&lt;00:00, 188528.34it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 36027/36027 [00:00&lt;00:00, 43143.42it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 36027/36027 [00:03&lt;00:00, 11869.58it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 45568/45568 [00:01&lt;00:00, 44626.65it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 35434/35434 [00:00&lt;00:00, 179367.20it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 35341/35341 [00:00&lt;00:00, 43281.67it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 45337/45337 [00:00&lt;00:00, 308293.81it/s]\nINFO:cityseer.tools.graphs:Snapping gapped endings.\n100%|██████████| 35341/35341 [00:03&lt;00:00, 10158.57it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 46098/46098 [00:00&lt;00:00, 215960.04it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 35341/35341 [00:04&lt;00:00, 7418.17it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 49214/49214 [00:00&lt;00:00, 70865.95it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 37053/37053 [00:00&lt;00:00, 122505.09it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 31456/31456 [00:04&lt;00:00, 7066.09it/s] \nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 37330/37330 [00:00&lt;00:00, 319512.71it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 25180/25180 [00:05&lt;00:00, 4215.51it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 37469/37469 [00:00&lt;00:00, 75234.72it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 25180/25180 [00:00&lt;00:00, 39495.07it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 25180/25180 [00:10&lt;00:00, 2293.17it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 34375/34375 [00:02&lt;00:00, 13000.65it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 33793/33793 [00:00&lt;00:00, 306287.94it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 22962/22962 [00:06&lt;00:00, 3559.53it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 33947/33947 [00:00&lt;00:00, 66343.94it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 22962/22962 [00:00&lt;00:00, 47584.01it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 22962/22962 [00:08&lt;00:00, 2570.03it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 31111/31111 [00:01&lt;00:00, 21126.65it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 20491/20491 [00:00&lt;00:00, 41716.69it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 29739/29739 [00:00&lt;00:00, 31815.78it/s]\nINFO:cityseer.tools.graphs:Ironing edges.\n100%|██████████| 29448/29448 [00:03&lt;00:00, 8897.59it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 29243/29243 [00:00&lt;00:00, 82549.06it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 19698/19698 [00:00&lt;00:00, 104428.31it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 19531/19531 [00:00&lt;00:00, 50789.06it/s]\nINFO:cityseer.tools.graphs:Decomposing graph to maximum edge lengths of 25.\n100%|██████████| 28510/28510 [00:32&lt;00:00, 878.46it/s] \nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n100%|██████████| 79185/79185 [00:02&lt;00:00, 39339.20it/s]\n100%|██████████| 79185/79185 [00:22&lt;00:00, 3593.33it/s]\n\n\n\n# compute pub accessibility\ndistances = [100, 200, 400, 800]\nnodes_gdf, pubs_data_gdf = layers.compute_accessibilities(\n    data_gdf,\n    landuse_column_label=\"amenity\",\n    accessibility_keys=[\"pub\", \"restaurant\"],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing land-use accessibility for: pub, restaurant\n100%|██████████| 79185/79185 [01:16&lt;00:00, 1038.54it/s]\n\n\nThe output GeoDataFrame will contain new columns for each landuse and distance combination. For each of these the following will have been computed:\n\nA count of reachable instances of a given landuse (within the specified distance thresholds)\nSimilarly, a distance-weighted count of reachable locations\nThe distance to the nearest instance of a given landuse. Where there are no reachable landuses for a given node within the specified distance threshold, then a np.inf value will be returned.\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom cityseer import rustalgos\nfrom cityseer.tools import plot\n\nbg_colour = \"#111\"\ntext_colour = \"#ddd\"\nfont_size = 5\nbetas = rustalgos.betas_from_distances(distances)\navg_dists = rustalgos.avg_distances_for_betas(betas)\n\nfor d, b, avg_d in zip(distances, betas, avg_dists):\n    fig, axes = plt.subplots(2, 1, figsize=(8, 8), dpi=200, facecolor=bg_colour)\n    fig.suptitle(\n        f\"Accessibilities at avg. walking tolerance: {avg_d:.2f}m and max tolerance of {d}m\",\n        color=text_colour,\n        fontsize=7,\n    )\n    nodes_gdf.plot(\n        column=f\"cc_pub_{d}_wt\",\n        cmap=\"viridis\",\n        legend=False,\n        ax=axes[0],\n        markersize=0.05,\n    )\n    axes[0].set_title(\n        \"Number of pubs within walking tolerance.\",\n        color=text_colour,\n        fontsize=font_size,\n    )\n    # set the axis limits\n    axes[0].set_xlim(plot_bbox[0], plot_bbox[2])\n    axes[0].set_ylim(plot_bbox[1], plot_bbox[3])\n    # turn off the axis\n    axes[0].axis(False)\n\n    nodes_gdf.plot(\n        column=f\"cc_restaurant_{d}_wt\",\n        cmap=\"plasma\",\n        legend=False,\n        ax=axes[1],\n        markersize=0.05,\n    )\n    axes[1].set_title(\n        \"Number of restaurants within walking tolerance.\",\n        color=text_colour,\n        fontsize=font_size,\n    )\n\n    # set the axis limits\n    axes[1].set_xlim(plot_bbox[0], plot_bbox[2])\n    axes[1].set_ylim(plot_bbox[1], plot_bbox[3])\n    # turn off the axis\n    axes[1].axis(False)\n\n    fig.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfig, axes = plt.subplots(2, 1, figsize=(8, 8), dpi=200, facecolor=bg_colour)\nfig.suptitle(\n    f\"Distances to nearest instance of specified landuse\",\n    color=text_colour,\n    fontsize=7,\n)\n\ndist_data = nodes_gdf[f\"cc_pub_nearest_max_{max(distances)}\"]\ndist_data[np.isinf(dist_data)] = max(distances)\n\nnodes_gdf.plot(\n    column=f\"cc_pub_nearest_max_{max(distances)}\",\n    cmap=\"inferno_r\",\n    legend=False,\n    ax=axes[0],\n    markersize=0.05,\n)\n\naxes[0].set_title(\"Distance to nearest pub.\", color=text_colour, fontsize=font_size)\n# set the axis limits\naxes[0].set_xlim(plot_bbox[0], plot_bbox[2])\naxes[0].set_ylim(plot_bbox[1], plot_bbox[3])\n# turn off the axis\naxes[0].axis(False)\n\ndist_data = nodes_gdf[f\"cc_restaurant_nearest_max_{max(distances)}\"]\ndist_data[np.isinf(dist_data)] = max(distances)\n\nnodes_gdf.plot(\n    column=f\"cc_pub_nearest_max_{max(distances)}\",\n    cmap=\"viridis_r\",\n    legend=False,\n    ax=axes[1],\n    markersize=0.05,\n)\naxes[1].set_title(\n    \"Distance to nearest restaurant.\", color=text_colour, fontsize=font_size\n)\n# set the axis limits\naxes[1].set_xlim(plot_bbox[0], plot_bbox[2])\naxes[1].set_ylim(plot_bbox[1], plot_bbox[3])\n# turn off the axis\naxes[1].axis(False)\n\nfig.tight_layout()\nplt.show()\n\n/var/folders/_n/10pj6p7s77548fdmhtj594n00000gp/T/ipykernel_76472/1718785405.py:9: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  dist_data[np.isinf(dist_data)] = max(distances)\n/var/folders/_n/10pj6p7s77548fdmhtj594n00000gp/T/ipykernel_76472/1718785405.py:27: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  dist_data[np.isinf(dist_data)] = max(distances)",
    "crumbs": [
      "Accessibility",
      "London Amenities"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cityseer Examples",
    "section": "",
    "text": "This repository contains examples for the cityseer-api package.\nUse the navigation menu to explore examples.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Cityseer Examples",
    "section": "Getting Started",
    "text": "Getting Started\ncityseer is a python package that can be installed with pip:\n\n# !pip install --upgrade cityseer\n\n\n\n\n\n\n\nWarning\n\n\n\nThe guide and examples are based on cityseer&gt;=4.19.1.\n\n\ncityseer revolves around networks (graphs). If you’re comfortable with numpy and abstract data handling, then the underlying data structures can be created and manipulated directly. However, it is generally more convenient to sketch the graph using NetworkX and to let cityseer take care of initialising and converting the graph for you.\n\n# any networkX MultiGraph with 'x' and 'y' node attributes will do\n# here we'll use the cityseer mock module to generate an example networkX graph\nimport networkx as nx\nfrom cityseer.tools import mock, graphs, plot, io\n\nG = mock.mock_graph()\nprint(G)\n# let's plot the network\nplot.plot_nx(G, labels=True, node_size=80, dpi=200, figsize=(4, 4))\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 57 nodes and 79 edges\n\n\n  0%|          | 0/79 [00:00&lt;?, ?it/s]100%|██████████| 79/79 [00:00&lt;00:00, 473357.17it/s]",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#graph-preparation",
    "href": "index.html#graph-preparation",
    "title": "Cityseer Examples",
    "section": "Graph Preparation",
    "text": "Graph Preparation\nThe tools.graphs module contains a collection of convenience functions for the preparation and conversion of networkX MultiGraphs, i.e. undirected graphs allowing for parallel edges. The tools.graphs module is designed to work with raw shapely Linestring geometries that have been assigned to the graph’s edge (link) geom attributes. The benefit to this approach is that the geometry of the network is decoupled from the topology: the topology is consequently free from distortions which would otherwise confound centrality and other metrics.\nThere are generally two scenarios when creating a street network graph:\n\nIn the ideal case, if you have access to a high-quality street network dataset – which keeps the topology of the network separate from the geometry of the streets – then you would construct the network based on the topology while assigning the roadway geometries to the respective edges spanning the nodes. OS Open Roads is a good example of this type of dataset. Assigning the geometries to an edge involves A - casting the geometry to a shapely LineString, and B - assigning this geometry to the respective edge by adding the LineString geometry as a geom attribute. e.g. G.add_edge(start_node, end_node, geom=a_linestring_geom).\nIn reality, most data-sources are not this refined and will represent roadway geometries by adding additional nodes to the network. For a variety of reasons, this is not ideal and you may want to follow the Graph Cleaning guide.\n\nHere, we’ll walk through a high-level overview showing how to use cityseer. You can provide your own shapely geometries if available; else, you can auto-infer simple geometries from the start to end node of each network edge, which works well for graphs where nodes have been used to inscribe roadway geometries (i.e. OSM).\n\n# use nx_simple_geoms to infer geoms for your edges\nG = graphs.nx_simple_geoms(G)\nplot.plot_nx(G, labels=True, node_size=80, plot_geoms=True, dpi=200, figsize=(4, 4))\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n  0%|          | 0/79 [00:00&lt;?, ?it/s]100%|██████████| 79/79 [00:00&lt;00:00, 33704.61it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n  0%|          | 0/79 [00:00&lt;?, ?it/s]100%|██████████| 79/79 [00:00&lt;00:00, 48599.30it/s]\n\n\n\n\n\n\n\n\n\nWe have now inferred geometries for each edge, meaning that each edge now has an associated LineString geometry. Any further manipulation of the graph using the cityseer.graph module will retain and further manipulate these geometries in-place.\nOnce the geoms are readied, we can use tools such as nx_decompose for generating granular graph representations and nx_to_dual for casting a primal graph representation to its dual.\n\n# this will (optionally) decompose the graph\nG_decomp = graphs.nx_decompose(G, 50)\nplot.plot_nx(G_decomp, plot_geoms=True, labels=False, dpi=200, figsize=(4, 4))\n\nINFO:cityseer.tools.graphs:Decomposing graph to maximum edge lengths of 50.\n  0%|          | 0/79 [00:00&lt;?, ?it/s]100%|██████████| 79/79 [00:00&lt;00:00, 1809.31it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n  0%|          | 0/316 [00:00&lt;?, ?it/s]100%|██████████| 316/316 [00:00&lt;00:00, 28150.89it/s]\n\n\n\n\n\n\n\n\n\n\n# this will (optionally) cast to a dual network\nG_dual = graphs.nx_to_dual(G)\n# here we are plotting the newly decomposed graph (blue) against the original graph (red)\nplot.plot_nx_primal_or_dual(G, G_dual, plot_geoms=False, dpi=200, figsize=(4, 4))\n\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\n  0%|          | 0/79 [00:00&lt;?, ?it/s]100%|██████████| 79/79 [00:00&lt;00:00, 38745.32it/s]\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n  0%|          | 0/79 [00:00&lt;?, ?it/s]100%|██████████| 79/79 [00:00&lt;00:00, 952.83it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n  0%|          | 0/79 [00:00&lt;?, ?it/s]100%|██████████| 79/79 [00:00&lt;00:00, 437137.22it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n  0%|          | 0/155 [00:00&lt;?, ?it/s]100%|██████████| 155/155 [00:00&lt;00:00, 561898.98it/s]",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#metrics",
    "href": "index.html#metrics",
    "title": "Cityseer Examples",
    "section": "Metrics",
    "text": "Metrics\nAfter graph preparation and cleaning has been completed, the networkX graph can be transformed into data structures for efficiently computing centralities, land-use measures, or statistical aggregations.\nUse network_structure_from_nx to convert a networkX graph into a GeoPandas GeoDataFrame and a rustalgos.NetworkStructure, which is used by Cityseer for efficiently computing over the network.\n\nNetwork Centralities\nThe networks.node_centrality_shortest, networks.node_centrality_simplest, and networks.segment_centrality methods wrap underlying rust functions that compute the centrality methods. All selected measures and distance thresholds are computed simultaneously to reduce the amount of time required for multi-variable and multi-scalar workflows. The results of the computations will be written to the GeoDataFrame.\n\nfrom cityseer.metrics import networks\n\n# create a Network layer from the networkX graph\n# use a CRS EPSG code matching the projected coordinate reference system for your data\nnodes_gdf, edges_gdf, network_structure = io.network_structure_from_nx(\n    G_decomp, crs=3395\n)\n# the underlying method allows the computation of various centralities simultaneously, e.g.\nnodes_gdf = networks.segment_centrality(\n    network_structure=network_structure,  # the network structure for which to compute the measures\n    nodes_gdf=nodes_gdf,  # the nodes GeoDataFrame, to which the results will be written\n    distances=[\n        200,\n        400,\n        800,\n        1600,\n    ],  # the distance thresholds for which to compute centralities\n)\nnodes_gdf.head()  # the results are now in the GeoDataFrame\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n  0%|          | 0/294 [00:00&lt;?, ?it/s]100%|██████████| 294/294 [00:00&lt;00:00, 113767.45it/s]\n  0%|          | 0/294 [00:00&lt;?, ?it/s]100%|██████████| 294/294 [00:00&lt;00:00, 8514.35it/s]\nINFO:cityseer.metrics.networks:Computing shortest path segment centrality.\n  0%|          | 0/294 [00:00&lt;?, ?it/s]100%|██████████| 294/294 [00:01&lt;00:00, 293.88it/s]100%|██████████| 294/294 [00:01&lt;00:00, 293.65it/s]\n\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\ngeom\ncc_seg_density_200\ncc_seg_density_400\ncc_seg_density_800\ncc_seg_density_1600\n...\ncc_seg_harmonic_800\ncc_seg_harmonic_1600\ncc_seg_beta_200\ncc_seg_beta_400\ncc_seg_beta_800\ncc_seg_beta_1600\ncc_seg_betweenness_200\ncc_seg_betweenness_400\ncc_seg_betweenness_800\ncc_seg_betweenness_1600\n\n\n\n\n0\n0\n700700.0\n5719700.0\nTrue\n1\nPOINT (700700 5719700)\n857.327026\n3042.260254\n10088.987305\n13137.789062\n...\n36.822689\n40.173214\n159.837616\n421.984436\n1365.011597\n3582.891113\n590.866028\n2805.018311\n23575.019531\n159337.734375\n\n\n1\n1\n700610.0\n5719780.0\nTrue\n1\nPOINT (700610 5719780)\n784.184753\n2527.174805\n9059.986328\n13137.791992\n...\n34.135193\n38.450062\n154.743927\n388.553589\n1221.976562\n3301.651611\n534.708435\n2270.786865\n15957.035156\n103352.679688\n\n\n2\n2\n700460.0\n5719700.0\nTrue\n1\nPOINT (700460 5719700)\n695.835876\n2062.288330\n6928.821289\n13137.790039\n...\n29.375729\n35.568359\n150.506683\n353.928864\n999.668030\n2788.973877\n484.306824\n1700.836914\n7541.832520\n36259.570312\n\n\n3\n3\n700520.0\n5719820.0\nTrue\n1\nPOINT (700520 5719820)\n817.972900\n2366.633057\n5945.978027\n13137.791992\n...\n28.526949\n35.446590\n156.397873\n392.560852\n1018.365723\n2680.288574\n538.021912\n2131.172119\n7549.369141\n24907.978516\n\n\n4\n4\n700620.0\n5719905.0\nTrue\n1\nPOINT (700620 5719905)\n812.112549\n2419.865234\n7675.241699\n13137.791992\n...\n31.385777\n36.887234\n155.821732\n388.663147\n1108.671631\n2981.365723\n528.050293\n2153.490479\n11441.317383\n66363.125000\n\n\n\n\n5 rows × 22 columns\n\n\n\n\n# plot centrality\nfrom matplotlib import colors\n\n# custom colourmap\ncmap = colors.LinearSegmentedColormap.from_list(\"cityseer\", [\"#64c1ff\", \"#d32f2f\"])\n# normalise the values\nsegment_harmonic_vals = nodes_gdf[\"cc_seg_harmonic_800\"]\nsegment_harmonic_vals = colors.Normalize()(segment_harmonic_vals)\n# cast against the colour map\nsegment_harmonic_cols = cmap(segment_harmonic_vals)\n# plot segment_harmonic\n# cityseer's plot methods are used here and in tests for convenience\n# that said, rather use plotting methods directly from networkX or GeoPandas where possible\nplot.plot_nx(\n    G_decomp, labels=False, node_colour=segment_harmonic_cols, dpi=200, figsize=(4, 4)\n)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n  0%|          | 0/316 [00:00&lt;?, ?it/s]100%|██████████| 316/316 [00:00&lt;00:00, 302188.80it/s]\n\n\n\n\n\n\n\n\n\n\n\nLand-use and statistical measures\nLanduse and statistical measures require a GeoPandas GeoDataFrame consisting of Point geometries. Columns representing categorical landuse information (“pub”, “shop”, “school”) can be passed to landuse methods, whereas columns representing numerical information can be used for statistical methods.\nWhen computing these measures, cityseer will assign each data point to the two closest network nodes — one in either direction — based on the closest adjacent street edge. This enables cityseer to use dynamic spatial aggregation methods that more accurately describe distances from the perspective of pedestrians travelling over the network, and relative to the direction of approach.\nlayers.compute_landuses and layers.compute_mixed_uses methods are used for the calculation of land-use accessibility and mixed-use measures whereas layers.compute_stats can be used for statistical aggregations. As with the centrality methods, the measures are computed over the network and are computed simultaneously for all measures and distances.\n\nfrom cityseer.metrics import layers\n\n# a mock data dictionary representing categorical landuse data\n# here randomly generated letters represent fictitious landuse categories\ndata_gdf = mock.mock_landuse_categorical_data(G_decomp, random_seed=25)\ndata_gdf.head()\n\n\n\n\n\n\n\n\ngeometry\ndata_id\ncategorical_landuses\n\n\nuid\n\n\n\n\n\n\n\n0\nPOINT (701144.149 5719228.311)\n0\nh\n\n\n1\nPOINT (700798.732 5719938.464)\n1\nf\n\n\n2\nPOINT (700434.607 5719165.951)\n2\nh\n\n\n3\nPOINT (700323.093 5719450.769)\n3\na\n\n\n4\nPOINT (700593.32 5719841.434)\n4\nh\n\n\n\n\n\n\n\n\n# example easy-wrapper method for computing mixed-uses\n# this is a distance weighted form of hill diversity\nnodes_gdf, data_gdf = layers.compute_mixed_uses(\n    data_gdf,  # the source data\n    landuse_column_label=\"categorical_landuses\",  # column in the dataframe which contains the landuse labels\n    nodes_gdf=nodes_gdf,  # nodes GeoDataFrame - the results are written here\n    network_structure=network_structure,  # measures will be computed relative to pedestrian distances over the network\n    distances=[\n        200,\n        400,\n        800,\n        1600,\n    ],  # distance thresholds for which you want to compute the measures\n)\nprint(\n    nodes_gdf.columns\n)  # the GeoDataFrame will contain the results of the calculations\nprint(nodes_gdf[\"cc_hill_q0_800_nw\"])  # which can be retrieved as needed\n\nINFO:cityseer.metrics.layers:Computing mixed-use measures.\n  0%|          | 0/294 [00:00&lt;?, ?it/s]100%|██████████| 294/294 [00:01&lt;00:00, 293.90it/s]100%|██████████| 294/294 [00:01&lt;00:00, 293.64it/s]\n\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'geom', 'cc_seg_density_200',\n       'cc_seg_density_400', 'cc_seg_density_800', 'cc_seg_density_1600',\n       'cc_seg_harmonic_200', 'cc_seg_harmonic_400', 'cc_seg_harmonic_800',\n       'cc_seg_harmonic_1600', 'cc_seg_beta_200', 'cc_seg_beta_400',\n       'cc_seg_beta_800', 'cc_seg_beta_1600', 'cc_seg_betweenness_200',\n       'cc_seg_betweenness_400', 'cc_seg_betweenness_800',\n       'cc_seg_betweenness_1600', 'cc_hill_q0_200_nw', 'cc_hill_q0_200_wt',\n       'cc_hill_q1_200_nw', 'cc_hill_q1_200_wt', 'cc_hill_q2_200_nw',\n       'cc_hill_q2_200_wt', 'cc_hill_q0_400_nw', 'cc_hill_q0_400_wt',\n       'cc_hill_q1_400_nw', 'cc_hill_q1_400_wt', 'cc_hill_q2_400_nw',\n       'cc_hill_q2_400_wt', 'cc_hill_q0_800_nw', 'cc_hill_q0_800_wt',\n       'cc_hill_q1_800_nw', 'cc_hill_q1_800_wt', 'cc_hill_q2_800_nw',\n       'cc_hill_q2_800_wt', 'cc_hill_q0_1600_nw', 'cc_hill_q0_1600_wt',\n       'cc_hill_q1_1600_nw', 'cc_hill_q1_1600_wt', 'cc_hill_q2_1600_nw',\n       'cc_hill_q2_1600_wt'],\n      dtype='object')\n0          9.0\n1          9.0\n2          9.0\n3          9.0\n4          9.0\n          ... \n53±0±54    2.0\n53±1±54    2.0\n53±2±54    2.0\n54±0±55    2.0\n54±1±55    2.0\nName: cc_hill_q0_800_nw, Length: 294, dtype: float32\n\n\n\n\n\n\n# for curiosity's sake - plot the assignments to see which edges the data points were assigned to\nplot.plot_assignment(network_structure, G_decomp, data_gdf, dpi=200, figsize=(4, 4))\n\n/home/runner/work/cityseer-examples/cityseer-examples/.venv/lib/python3.13/site-packages/cityseer/tools/plot.py:560: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n  plt.tight_layout()\n\n\n\n\n\n\n\n\n\n\n# plot distance-weighted hill mixed uses\nmixed_uses_vals = nodes_gdf[\"cc_hill_q0_800_wt\"]\nmixed_uses_vals = colors.Normalize()(mixed_uses_vals)\nmixed_uses_cols = cmap(mixed_uses_vals)\nplot.plot_assignment(\n    network_structure,\n    G_decomp,\n    data_gdf,\n    node_colour=mixed_uses_cols,\n    data_labels=data_gdf[\"categorical_landuses\"].values,\n    dpi=200,\n    figsize=(4, 4),\n)\n\n\n\n\n\n\n\n\n\n# compute landuse accessibilities for land-use types a, b, c\nnodes_gdf, data_gdf = layers.compute_accessibilities(\n    data_gdf,  # the source data\n    landuse_column_label=\"categorical_landuses\",  # column in the dataframe which contains the landuse labels\n    accessibility_keys=[\n        \"a\",\n        \"b\",\n        \"c\",\n    ],  # the landuse categories for which to compute accessibilities\n    nodes_gdf=nodes_gdf,  # nodes GeoDataFrame - the results are written here\n    network_structure=network_structure,  # measures will be computed relative to pedestrian distances over the network\n    distances=[\n        200,\n        400,\n        800,\n        1600,\n    ],  # distance thresholds for which you want to compute the measures\n)\n# accessibilities are computed in both weighted and unweighted forms, e.g. for \"a\" and \"b\" landuse codes\nprint(\n    nodes_gdf[[\"cc_a_800_wt\", \"cc_b_1600_nw\"]]\n)  # and can be retrieved as needed\n\nINFO:cityseer.metrics.layers:Computing land-use accessibility for: a, b, c\n  0%|          | 0/294 [00:00&lt;?, ?it/s]100%|██████████| 294/294 [00:01&lt;00:00, 293.19it/s]100%|██████████| 294/294 [00:01&lt;00:00, 292.96it/s]\n\n\n         cc_a_800_wt  cc_b_1600_nw\n0           0.316222           2.0\n1           0.173186           2.0\n2           0.074022           2.0\n3           0.047997           2.0\n4           0.092515           2.0\n...              ...           ...\n53±0±54     0.000000           0.0\n53±1±54     0.000000           0.0\n53±2±54     0.000000           0.0\n54±0±55     0.000000           0.0\n54±1±55     0.000000           0.0\n\n[294 rows x 2 columns]\n\n\n\n\n\nAggregations can likewise be computed for numerical data:\n\nnumerical_data_gdf = mock.mock_numerical_data(G_decomp, num_arrs=3)\nnumerical_data_gdf.head()\n# compute stats for column mock_numerical_1\nnodes_gdf, numerical_data_gdf = layers.compute_stats(\n    numerical_data_gdf,  # the source data\n    stats_column_labels=[\"mock_numerical_1\"],  # numerical columns to compute stats for\n    nodes_gdf=nodes_gdf,  # nodes GeoDataFrame - the results are written here\n    network_structure=network_structure,  # measures will be computed relative to pedestrian distances over the network\n    distances=[\n        800,\n        1600,\n    ],  # distance thresholds for which you want to compute the measures\n)\n# statistical aggregations are calculated for each requested column, and in the following forms:\n# max, min, sum, sum_weighted, mean, mean_weighted, variance, variance_weighted\nprint(nodes_gdf[\"cc_mock_numerical_1_max_800\"])\nprint(nodes_gdf[\"cc_mock_numerical_1_mean_800_wt\"])\n\nINFO:cityseer.metrics.layers:Computing statistics.\n  0%|          | 0/294 [00:00&lt;?, ?it/s]100%|██████████| 294/294 [00:01&lt;00:00, 293.90it/s]100%|██████████| 294/294 [00:01&lt;00:00, 293.66it/s]\n\n\n0          99.438004\n1          99.438004\n2          99.438004\n3          90.749001\n4          99.438004\n             ...    \n53±0±54     1.913000\n53±1±54     1.913000\n53±2±54     1.913000\n54±0±55     1.913000\n54±1±55     1.913000\nName: cc_mock_numerical_1_max_800, Length: 294, dtype: float32\n0          51.426266\n1          53.213058\n2          51.837536\n3          49.952995\n4          53.090725\n             ...    \n53±0±54     1.913000\n53±1±54     1.913000\n53±2±54     1.913000\n54±0±55     1.913000\n54±1±55     1.913000\nName: cc_mock_numerical_1_mean_800_wt, Length: 294, dtype: float32\n\n\n\n\n\nThe landuse metrics and statistical aggregations are computed over the street network relative to the network, with results written to each node. The mixed-use, accessibility, and statistical aggregations can therefore be compared directly to centrality computations from the same locations, and can be correlated or otherwise compared.\nData derived from metrics can be converted back into a NetworkX graph using the nx_from_cityseer_geopandas method.\n\nnx_multigraph_round_trip = io.nx_from_cityseer_geopandas(\n    nodes_gdf,\n    edges_gdf,\n)\nnx_multigraph_round_trip.nodes[\"0\"]\n\nINFO:cityseer.tools.io:Populating node and edge map data to a networkX graph.\nINFO:cityseer.tools.io:Unpacking node data.\n0it [00:00, ?it/s]294it [00:00, 16867.87it/s]\nINFO:cityseer.tools.io:Unpacking edge data.\n0it [00:00, ?it/s]632it [00:00, 17800.28it/s]\nINFO:cityseer.tools.io:Unpacking metrics to nodes.\n0it [00:00, ?it/s]294it [00:00, 26027.93it/s]\n0it [00:00, ?it/s]294it [00:00, 24539.81it/s]\n0it [00:00, ?it/s]294it [00:00, 24130.67it/s]\n0it [00:00, ?it/s]294it [00:00, 23745.46it/s]\n0it [00:00, ?it/s]294it [00:00, 24956.50it/s]\n0it [00:00, ?it/s]294it [00:00, 25221.93it/s]\n0it [00:00, ?it/s]294it [00:00, 24020.21it/s]\n0it [00:00, ?it/s]294it [00:00, 24243.58it/s]\n0it [00:00, ?it/s]294it [00:00, 24597.08it/s]\n0it [00:00, ?it/s]294it [00:00, 24583.84it/s]\n0it [00:00, ?it/s]294it [00:00, 24467.74it/s]\n0it [00:00, ?it/s]294it [00:00, 25133.51it/s]\n0it [00:00, ?it/s]294it [00:00, 24396.58it/s]\n0it [00:00, ?it/s]294it [00:00, 25361.99it/s]\n0it [00:00, ?it/s]294it [00:00, 24509.08it/s]\n0it [00:00, ?it/s]294it [00:00, 23703.92it/s]\n0it [00:00, ?it/s]294it [00:00, 24556.91it/s]\n0it [00:00, ?it/s]294it [00:00, 23969.31it/s]\n0it [00:00, ?it/s]294it [00:00, 24470.17it/s]\n0it [00:00, ?it/s]294it [00:00, 24513.95it/s]\n0it [00:00, ?it/s]294it [00:00, 23669.80it/s]\n0it [00:00, ?it/s]294it [00:00, 24389.35it/s]\n0it [00:00, ?it/s]294it [00:00, 24561.31it/s]\n0it [00:00, ?it/s]294it [00:00, 24349.37it/s]\n0it [00:00, ?it/s]294it [00:00, 24303.30it/s]\n0it [00:00, ?it/s]294it [00:00, 24799.40it/s]\n0it [00:00, ?it/s]294it [00:00, 24037.06it/s]\n0it [00:00, ?it/s]294it [00:00, 24524.68it/s]\n0it [00:00, ?it/s]294it [00:00, 24459.98it/s]\n0it [00:00, ?it/s]294it [00:00, 24315.76it/s]\n0it [00:00, ?it/s]294it [00:00, 23787.14it/s]\n0it [00:00, ?it/s]294it [00:00, 24620.16it/s]\n0it [00:00, ?it/s]294it [00:00, 24536.88it/s]\n0it [00:00, ?it/s]294it [00:00, 26960.04it/s]\n0it [00:00, ?it/s]294it [00:00, 24746.65it/s]\n0it [00:00, ?it/s]294it [00:00, 24387.90it/s]\n0it [00:00, ?it/s]294it [00:00, 24005.24it/s]\n0it [00:00, ?it/s]294it [00:00, 24289.90it/s]\n0it [00:00, ?it/s]294it [00:00, 23668.89it/s]\n0it [00:00, ?it/s]294it [00:00, 25187.93it/s]\n0it [00:00, ?it/s]294it [00:00, 24473.09it/s]\n0it [00:00, ?it/s]294it [00:00, 25041.13it/s]\n0it [00:00, ?it/s]294it [00:00, 24439.62it/s]\n0it [00:00, ?it/s]294it [00:00, 25317.21it/s]\n0it [00:00, ?it/s]294it [00:00, 25376.61it/s]\n0it [00:00, ?it/s]294it [00:00, 24737.21it/s]\n0it [00:00, ?it/s]294it [00:00, 25333.33it/s]\n0it [00:00, ?it/s]294it [00:00, 24814.87it/s]\n0it [00:00, ?it/s]294it [00:00, 24849.37it/s]\n0it [00:00, ?it/s]294it [00:00, 24913.64it/s]\n0it [00:00, ?it/s]294it [00:00, 25241.03it/s]\n0it [00:00, ?it/s]294it [00:00, 25310.46it/s]\n0it [00:00, ?it/s]294it [00:00, 25082.39it/s]\n0it [00:00, ?it/s]294it [00:00, 24958.01it/s]\n0it [00:00, ?it/s]294it [00:00, 24546.16it/s]\n0it [00:00, ?it/s]294it [00:00, 25346.87it/s]\n0it [00:00, ?it/s]294it [00:00, 25795.98it/s]\n0it [00:00, ?it/s]294it [00:00, 24969.63it/s]\n0it [00:00, ?it/s]294it [00:00, 24650.68it/s]\n0it [00:00, ?it/s]294it [00:00, 25188.44it/s]\n0it [00:00, ?it/s]294it [00:00, 25274.14it/s]\n0it [00:00, ?it/s]294it [00:00, 24345.05it/s]\n0it [00:00, ?it/s]294it [00:00, 24516.88it/s]\n0it [00:00, ?it/s]294it [00:00, 24418.81it/s]\n0it [00:00, ?it/s]294it [00:00, 24352.26it/s]\n0it [00:00, ?it/s]294it [00:00, 24885.98it/s]\n0it [00:00, ?it/s]294it [00:00, 26227.22it/s]\n0it [00:00, ?it/s]294it [00:00, 26575.98it/s]\n0it [00:00, ?it/s]294it [00:00, 24587.76it/s]\n0it [00:00, ?it/s]294it [00:00, 24539.32it/s]\n0it [00:00, ?it/s]294it [00:00, 24292.77it/s]\n0it [00:00, ?it/s]294it [00:00, 24816.37it/s]\n0it [00:00, ?it/s]294it [00:00, 24810.88it/s]\n0it [00:00, ?it/s]294it [00:00, 26230.57it/s]\n0it [00:00, ?it/s]294it [00:00, 24836.86it/s]\n0it [00:00, ?it/s]294it [00:00, 23915.85it/s]\n0it [00:00, ?it/s]294it [00:00, 24716.39it/s]\n0it [00:00, ?it/s]294it [00:00, 25828.40it/s]\n0it [00:00, ?it/s]294it [00:00, 24260.27it/s]\n0it [00:00, ?it/s]294it [00:00, 26371.37it/s]\n0it [00:00, ?it/s]294it [00:00, 24667.93it/s]\n0it [00:00, ?it/s]294it [00:00, 23787.14it/s]\n0it [00:00, ?it/s]294it [00:00, 23632.60it/s]\n0it [00:00, ?it/s]294it [00:00, 25152.99it/s]\n0it [00:00, ?it/s]294it [00:00, 26487.50it/s]\n0it [00:00, ?it/s]294it [00:00, 25659.11it/s]\n0it [00:00, ?it/s]294it [00:00, 26018.60it/s]\n\n\n{'x': 700700.0,\n 'y': 5719700.0,\n 'live': True,\n 'weight': 1,\n 'cc_seg_density_200': 857.3270263671875,\n 'cc_seg_density_400': 3042.26025390625,\n 'cc_seg_density_800': 10088.9873046875,\n 'cc_seg_density_1600': 13137.7890625,\n 'cc_seg_harmonic_200': 17.577617645263672,\n 'cc_seg_harmonic_400': 24.706350326538086,\n 'cc_seg_harmonic_800': 36.822689056396484,\n 'cc_seg_harmonic_1600': 40.173213958740234,\n 'cc_seg_beta_200': 159.83761596679688,\n 'cc_seg_beta_400': 421.98443603515625,\n 'cc_seg_beta_800': 1365.0115966796875,\n 'cc_seg_beta_1600': 3582.89111328125,\n 'cc_seg_betweenness_200': 590.8660278320312,\n 'cc_seg_betweenness_400': 2805.018310546875,\n 'cc_seg_betweenness_800': 23575.01953125,\n 'cc_seg_betweenness_1600': 159337.734375,\n 'cc_hill_q0_200_nw': 4.0,\n 'cc_hill_q0_200_wt': 0.2142721265554428,\n 'cc_hill_q1_200_nw': 3.789292097091675,\n 'cc_hill_q1_200_wt': 0.20572812855243683,\n 'cc_hill_q2_200_nw': 3.5714285373687744,\n 'cc_hill_q2_200_wt': 0.19956745207309723,\n 'cc_hill_q0_400_nw': 9.0,\n 'cc_hill_q0_400_wt': 1.1907039880752563,\n 'cc_hill_q1_400_nw': 8.171717643737793,\n 'cc_hill_q1_400_wt': 1.0840710401535034,\n 'cc_hill_q2_400_nw': 7.529411792755127,\n 'cc_hill_q2_400_wt': 1.0111380815505981,\n 'cc_hill_q0_800_nw': 9.0,\n 'cc_hill_q0_800_wt': 3.055056571960449,\n 'cc_hill_q1_800_nw': 8.061278343200684,\n 'cc_hill_q1_800_wt': 2.7106282711029053,\n 'cc_hill_q2_800_nw': 7.449613094329834,\n 'cc_hill_q2_800_wt': 2.5093846321105957,\n 'cc_hill_q0_1600_nw': 10.0,\n 'cc_hill_q0_1600_wt': 5.220044136047363,\n 'cc_hill_q1_1600_nw': 9.22851276397705,\n 'cc_hill_q1_1600_wt': 4.775952339172363,\n 'cc_hill_q2_1600_nw': 8.672131538391113,\n 'cc_hill_q2_1600_wt': 4.467940807342529,\n 'cc_a_200_nw': 0.0,\n 'cc_a_200_wt': 0.0,\n 'cc_a_400_nw': 2.0,\n 'cc_a_400_wt': 0.050510115921497345,\n 'cc_a_800_nw': 2.0,\n 'cc_a_800_wt': 0.3162217140197754,\n 'cc_a_1600_nw': 5.0,\n 'cc_a_1600_wt': 1.0843467712402344,\n 'cc_a_nearest_max_1600': 349.61199951171875,\n 'cc_b_200_nw': 1.0,\n 'cc_b_200_wt': 0.01839187555015087,\n 'cc_b_400_nw': 1.0,\n 'cc_b_400_wt': 0.13561664521694183,\n 'cc_b_800_nw': 2.0,\n 'cc_b_800_wt': 0.46969375014305115,\n 'cc_b_1600_nw': 2.0,\n 'cc_b_1600_wt': 0.9253296852111816,\n 'cc_b_nearest_max_1600': 199.7923126220703,\n 'cc_c_200_nw': 0.0,\n 'cc_c_200_wt': 0.0,\n 'cc_c_400_nw': 1.0,\n 'cc_c_400_wt': 0.1017569750547409,\n 'cc_c_800_nw': 4.0,\n 'cc_c_800_wt': 0.39100760221481323,\n 'cc_c_1600_nw': 5.0,\n 'cc_c_1600_wt': 1.124714732170105,\n 'cc_c_nearest_max_1600': 228.5167999267578,\n 'cc_mock_numerical_1_sum_800_nw': 1170.7391357421875,\n 'cc_mock_numerical_1_sum_800_wt': 211.98062133789062,\n 'cc_mock_numerical_1_mean_800_nw': 41.812110900878906,\n 'cc_mock_numerical_1_mean_800_wt': 51.426265716552734,\n 'cc_mock_numerical_1_count_800_nw': 28.0,\n 'cc_mock_numerical_1_count_800_wt': 4.122030258178711,\n 'cc_mock_numerical_1_var_800_nw': 766.1060791015625,\n 'cc_mock_numerical_1_var_800_wt': 5831.8505859375,\n 'cc_mock_numerical_1_max_800': 99.43800354003906,\n 'cc_mock_numerical_1_min_800': 0.4690000116825104,\n 'cc_mock_numerical_1_sum_1600_nw': 2528.32470703125,\n 'cc_mock_numerical_1_sum_1600_wt': 541.5323486328125,\n 'cc_mock_numerical_1_mean_1600_nw': 51.59846496582031,\n 'cc_mock_numerical_1_mean_1600_wt': 48.469383239746094,\n 'cc_mock_numerical_1_count_1600_nw': 49.0,\n 'cc_mock_numerical_1_count_1600_wt': 11.17266845703125,\n 'cc_mock_numerical_1_var_1600_nw': 986.6458740234375,\n 'cc_mock_numerical_1_var_1600_wt': 4370.0771484375,\n 'cc_mock_numerical_1_max_1600': 99.43800354003906,\n 'cc_mock_numerical_1_min_1600': 0.4690000116825104}",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "examples/osm_boundaries.html",
    "href": "examples/osm_boundaries.html",
    "title": "Networks for OSM Boundaries",
    "section": "",
    "text": "If you want to download a street network for a specific OSM boundary then you can use osmnx to download the boundary. The boundary can then be passed to cityseer for generating a network.",
    "crumbs": [
      "Preparation",
      "Networks for OSM Boundaries"
    ]
  },
  {
    "objectID": "examples/osm_boundaries.html#download-boundary",
    "href": "examples/osm_boundaries.html#download-boundary",
    "title": "Networks for OSM Boundaries",
    "section": "Download Boundary",
    "text": "Download Boundary\nDownload the boundary. Go to OSM and select the relation ID for the boundary that you’d like to download and pass it to ox.geocode_to_gdf().\n\nimport osmnx as ox\n\nbounds_gdf = ox.geocode_to_gdf(\n    \"R1536593\",  # OSM relation ID\n    by_osmid=True,\n)\n# optionally use to_crs() to project to a target CRS\n# returns a geoDataFrame - union for the geom\nbounds_geom = bounds_gdf.union_all()\nbounds_geom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can optionally project to a required CRS by using geopandas to_crs() methodo before taking the union. This is generally recommended if you want to apply a buffer to the geometry (assuming a unit such as metres).",
    "crumbs": [
      "Preparation",
      "Networks for OSM Boundaries"
    ]
  },
  {
    "objectID": "examples/osm_boundaries.html#buffer-and-simplify",
    "href": "examples/osm_boundaries.html#buffer-and-simplify",
    "title": "Networks for OSM Boundaries",
    "section": "Buffer and Simplify",
    "text": "Buffer and Simplify\nBuffer and simplify depending on preferences. Make sure your distances correspond to the unit of the current CRS!\n\n# buffer if wanted\nbounds_geom = bounds_geom.buffer(0.01)  # WGS - 4326\n# some simplification is recommended\n# otherwise the request to the underlying API used by io.osm_graph_from_poly()\n# might complain that the boundary description is too long\nbounds_geom = bounds_geom.simplify(\n    0.001  # WGS - 4326\n)  # here the CRS unit is degrees hence the small number\nbounds_geom",
    "crumbs": [
      "Preparation",
      "Networks for OSM Boundaries"
    ]
  },
  {
    "objectID": "examples/osm_boundaries.html#generate-network",
    "href": "examples/osm_boundaries.html#generate-network",
    "title": "Networks for OSM Boundaries",
    "section": "Generate Network",
    "text": "Generate Network\nNow you can pass the boundary to cityseer to download and create the network.\n\nfrom cityseer.tools import io, plot\n\nG_nx = io.osm_graph_from_poly(\n    bounds_geom,\n    # 4326 by default - use projected CRS instead if you projected your GDF\n    poly_crs_code=4326,\n    simplify=False,  # set to True for automatic simplification\n)\nplot.plot_nx(G_nx, plot_geoms=True)\n\nINFO:cityseer.tools.io:Converting networkX graph from EPSG code 4326 to EPSG code 32631.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n  0%|          | 0/29897 [00:00&lt;?, ?it/s]100%|██████████| 29897/29897 [00:00&lt;00:00, 639510.34it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n  0%|          | 0/32738 [00:00&lt;?, ?it/s]100%|██████████| 32738/32738 [00:00&lt;00:00, 1169866.87it/s]\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n  0%|          | 0/32738 [00:00&lt;?, ?it/s] 22%|██▏       | 7062/32738 [00:00&lt;00:00, 70527.42it/s] 44%|████▎     | 14250/32738 [00:00&lt;00:00, 71315.97it/s] 65%|██████▌   | 21382/32738 [00:00&lt;00:00, 71280.14it/s] 87%|████████▋ | 28584/32738 [00:00&lt;00:00, 71571.16it/s]100%|██████████| 32738/32738 [00:00&lt;00:00, 71176.68it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n  0%|          | 0/29897 [00:00&lt;?, ?it/s]  3%|▎         | 925/29897 [00:00&lt;00:03, 9247.63it/s]  6%|▌         | 1850/29897 [00:00&lt;00:04, 6708.34it/s]  9%|▊         | 2598/29897 [00:00&lt;00:03, 6989.66it/s] 11%|█         | 3325/29897 [00:00&lt;00:04, 6273.75it/s] 13%|█▎        | 3975/29897 [00:00&lt;00:04, 6262.37it/s] 16%|█▌        | 4694/29897 [00:00&lt;00:03, 6520.75it/s] 18%|█▊        | 5426/29897 [00:00&lt;00:03, 6747.28it/s] 21%|██        | 6347/29897 [00:00&lt;00:03, 7476.06it/s] 24%|██▍       | 7106/29897 [00:01&lt;00:03, 6650.96it/s] 26%|██▌       | 7798/29897 [00:01&lt;00:03, 6715.76it/s] 29%|██▊       | 8592/29897 [00:01&lt;00:03, 7058.54it/s] 32%|███▏      | 9419/29897 [00:01&lt;00:02, 7400.48it/s] 35%|███▍      | 10328/29897 [00:01&lt;00:02, 7860.01it/s] 38%|███▊      | 11287/29897 [00:01&lt;00:02, 8348.67it/s] 42%|████▏     | 12556/29897 [00:01&lt;00:01, 9612.25it/s] 45%|████▌     | 13528/29897 [00:01&lt;00:01, 9626.46it/s] 48%|████▊     | 14497/29897 [00:01&lt;00:01, 9350.41it/s] 53%|█████▎    | 15899/29897 [00:01&lt;00:01, 10694.56it/s] 57%|█████▋    | 17126/29897 [00:02&lt;00:01, 11154.38it/s] 62%|██████▏   | 18428/29897 [00:02&lt;00:00, 11697.25it/s] 66%|██████▋   | 19850/29897 [00:02&lt;00:00, 12444.95it/s] 71%|███████   | 21225/29897 [00:02&lt;00:00, 12833.24it/s] 76%|███████▌  | 22655/29897 [00:02&lt;00:00, 13268.76it/s] 80%|████████  | 23985/29897 [00:02&lt;00:00, 12813.33it/s] 86%|████████▌ | 25577/29897 [00:02&lt;00:00, 13713.76it/s] 90%|█████████ | 26955/29897 [00:02&lt;00:00, 13211.30it/s] 95%|█████████▍| 28284/29897 [00:02&lt;00:00, 12562.05it/s]100%|██████████| 29897/29897 [00:03&lt;00:00, 9942.06it/s] \nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n  0%|          | 0/11425 [00:00&lt;?, ?it/s] 21%|██        | 2388/11425 [00:00&lt;00:00, 23876.66it/s] 42%|████▏     | 4776/11425 [00:00&lt;00:00, 15639.64it/s] 57%|█████▋    | 6501/11425 [00:00&lt;00:00, 11765.35it/s] 68%|██████▊   | 7820/11425 [00:00&lt;00:00, 9871.56it/s]  78%|███████▊  | 8899/11425 [00:00&lt;00:00, 8547.68it/s] 86%|████████▌ | 9810/11425 [00:01&lt;00:00, 7635.92it/s] 93%|█████████▎| 10604/11425 [00:01&lt;00:00, 6891.78it/s] 99%|█████████▉| 11308/11425 [00:01&lt;00:00, 6228.25it/s]100%|██████████| 11425/11425 [00:01&lt;00:00, 8463.27it/s]",
    "crumbs": [
      "Preparation",
      "Networks for OSM Boundaries"
    ]
  },
  {
    "objectID": "examples/momepy_to_cityseer.html",
    "href": "examples/momepy_to_cityseer.html",
    "title": "momepy - cityseer",
    "section": "",
    "text": "from future import annotations\nimport geopandas as gpd from osmnx import features\nfrom cityseer.tools import io, graphs from cityseer.metrics import networks, layers\nThis example uses the momepy bubenec.gpkg GeoPandas GeoDataFrame as an example. Please download this file and place it in a locally accessible file. Update the filepaths in the next code block accordingly.\n\nfrom pathlib import Path\n\nimport geopandas as gpd\nfrom cityseer.tools import io, graphs\nfrom cityseer.metrics import networks, layers\nfrom osmnx import features\nimport momepy\n\nrepo_path = Path.cwd()\nif str(repo_path).endswith(\"/examples\"):\n    repo_path = Path.cwd() / \"..\"\nif not str(repo_path.resolve()).endswith(\"cityseer-examples\"):\n    raise ValueError(\n        \"Please check your notebook working directory relative to your project and data paths.\"\n    )\n\nbubenec_path = Path(repo_path / \"temp/bubenec.gpkg\")\nprint(\"data path:\", bubenec_path)\nprint(\"path exists:\", bubenec_path.exists())\n\ndf_streets = gpd.read_file(momepy.datasets.get_path(\"bubenec\"), layer=\"streets\")\nnx_momepy = io.nx_from_generic_geopandas(df_streets)\n\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.12/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\ndata path: /Users/gareth/dev/cityseer-examples/temp/bubenec.gpkg\npath exists: False\n\n\n100%|██████████| 35/35 [00:00&lt;00:00, 2020.91it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 35/35 [00:00&lt;00:00, 67963.26it/s]\n\n\nAt this point the input GeoPandas file has been converted to a networkX MultiGraph with geom attributes for the edges. This graph can now be fed to cityseer graph module methods if wanted. For running optimised network centrality or landuse accessibilities, use the io.network_structure_from_nx method to prepare the necessary structures.\n\nnodes_gdf, edges_gdf, network_structure = io.network_structure_from_nx(\n    nx_momepy, crs=df_streets.crs.to_epsg()\n)\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n100%|██████████| 29/29 [00:00&lt;00:00, 25759.17it/s]\n100%|██████████| 29/29 [00:00&lt;00:00, 1302.96it/s]\n\n\nThe following block downloads some OSM data which will be used for demonstrating some landuse accessibility methods.\n\nnodes_gdf.head()\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\ngeom\n\n\n\n\nx1603585.6-y6464428.8\n0\n1603585.6\n6464428.8\nTrue\n1\nPOINT (1603585.6 6464428.8)\n\n\nx1603413.2-y6464228.7\n1\n1603413.2\n6464228.7\nTrue\n1\nPOINT (1603413.2 6464228.7)\n\n\nx1603268.5-y6464060.8\n2\n1603268.5\n6464060.8\nTrue\n1\nPOINT (1603268.5 6464060.8)\n\n\nx1603363.6-y6464031.9\n3\n1603363.6\n6464031.9\nTrue\n1\nPOINT (1603363.6 6464031.9)\n\n\nx1603607.3-y6464181.9\n4\n1603607.3\n6464181.9\nTrue\n1\nPOINT (1603607.3 6464181.9)\n\n\n\n\n\n\n\n\nedges_gdf.head(3)\n\n\n\n\n\n\n\n\nns_edge_idx\nstart_ns_node_idx\nend_ns_node_idx\nedge_idx\nnx_start_node_key\nnx_end_node_key\nlength\nangle_sum\nimp_factor\nin_bearing\nout_bearing\ntotal_bearing\ngeom\n\n\n\n\nx1603585.6-y6464428.8-x1603413.2-y6464228.7\n0\n0\n1\n0\nx1603585.6-y6464428.8\nx1603413.2-y6464228.7\n264.124535\n0.000000\n1\n-130.747175\n-130.747175\n-130.747175\nLINESTRING (1603585.6 6464428.8, 1603413.2 646...\n\n\nx1603585.6-y6464428.8-x1603561.7-y6464494.5\n1\n0\n8\n0\nx1603585.6-y6464428.8\nx1603561.7-y6464494.5\n70.026746\n8.479425\n1\n111.540976\n103.061551\n109.990108\nLINESTRING (1603561.7 6464494.5, 1603564.6 646...\n\n\nx1603585.6-y6464428.8-x1603650.5-y6464368.6\n2\n0\n6\n0\nx1603585.6-y6464428.8\nx1603650.5-y6464368.6\n88.999005\n19.087196\n1\n-42.077527\n-55.684912\n-42.848413\nLINESTRING (1603585.6 6464428.8, 1603603.1 646...\n\n\n\n\n\n\n\n\ndata_gdf = features.features_from_point(\n    (50.1029248, 14.4029967), tags={\"amenity\": [\"pub\", \"restaurant\"]}, dist=400\n)\ndata_gdf.to_crs(3857, inplace=True)\ndata_gdf = data_gdf.loc[\"node\"]\ndata_gdf = data_gdf.reset_index(level=0, drop=True)\ndata_gdf.index = data_gdf.index.astype(str)\ndata_gdf = data_gdf[[\"amenity\", \"geometry\"]]\nprint(data_gdf.head())\n\n      amenity                         geometry\n0  restaurant  POINT (1602992.986 6463522.177)\n1  restaurant  POINT (1602903.753 6463784.958)\n2  restaurant  POINT (1603489.527 6463552.391)\n3         pub  POINT (1602809.665 6464167.222)\n4  restaurant   POINT (1603027.863 6464060.66)\n\n\n\n# compute metrics\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure, nodes_gdf, [250, 500, 1000]\n)\nnodes_gdf, data_gdf = layers.compute_accessibilities(\n    data_gdf,\n    landuse_column_label=\"amenity\",\n    accessibility_keys=[\"restaurant\"],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=[100, 200, 400],\n)\nnodes_gdf.head()\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\n100%|██████████| 29/29 [00:01&lt;00:00, 28.88it/s]\nINFO:cityseer.metrics.layers:Computing land-use accessibility for: restaurant\n100%|██████████| 29/29 [00:01&lt;00:00, 28.95it/s]\n\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\ngeom\ncc_beta_250\ncc_beta_500\ncc_beta_1000\ncc_cycles_250\n...\ncc_betweenness_beta_250\ncc_betweenness_beta_500\ncc_betweenness_beta_1000\ncc_restaurant_100_nw\ncc_restaurant_100_wt\ncc_restaurant_200_nw\ncc_restaurant_200_wt\ncc_restaurant_400_nw\ncc_restaurant_400_wt\ncc_restaurant_nearest_max_400\n\n\n\n\nx1603585.6-y6464428.8\n0\n1603585.6\n6464428.8\nTrue\n1\nPOINT (1603585.6 6464428.8)\n0.716430\n2.049671\n4.991226\n0.0\n...\n0.104906\n1.055928\n6.453668\n0.0\n0.000000\n0.0\n0.000000\n1.0\n0.043196\n314.199646\n\n\nx1603413.2-y6464228.7\n1\n1603413.2\n6464228.7\nTrue\n1\nPOINT (1603413.2 6464228.7)\n0.121621\n1.310057\n5.305830\n0.0\n...\n0.000000\n0.089919\n5.085167\n1.0\n0.134929\n1.0\n0.367327\n2.0\n0.660115\n50.075100\n\n\nx1603268.5-y6464060.8\n2\n1603268.5\n6464060.8\nTrue\n1\nPOINT (1603268.5 6464060.8)\n0.434258\n1.921060\n5.837248\n0.0\n...\n0.036046\n0.693404\n4.368770\n1.0\n0.309082\n1.0\n0.555951\n4.0\n0.861386\n29.353716\n\n\nx1603363.6-y6464031.9\n3\n1603363.6\n6464031.9\nTrue\n1\nPOINT (1603363.6 6464031.9)\n0.390539\n1.849684\n6.035850\n1.0\n...\n0.000000\n0.676799\n6.885900\n0.0\n0.000000\n1.0\n0.075555\n3.0\n0.380441\n129.144821\n\n\nx1603607.3-y6464181.9\n4\n1603607.3\n6464181.9\nTrue\n1\nPOINT (1603607.3 6464181.9)\n0.284575\n1.452098\n4.887502\n1.0\n...\n0.000000\n0.263222\n3.326343\n0.0\n0.000000\n0.0\n0.000000\n1.0\n0.082238\n249.814056\n\n\n\n\n5 rows × 37 columns\n\n\n\n\n# if using dual network\nnx_dual = graphs.nx_to_dual(nx_momepy)\nnodes_gdf_dual, _edges_gdf_dual, network_structure_dual = io.network_structure_from_nx(\n    nx_dual, df_streets.crs.to_epsg()\n)\nnodes_gdf_dual = networks.node_centrality_simplest(\n    network_structure_dual, nodes_gdf_dual, [500]\n)\nnodes_gdf_dual.head()\n\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\n100%|██████████| 35/35 [00:00&lt;00:00, 8403.01it/s]\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n100%|██████████| 35/35 [00:00&lt;00:00, 325.70it/s]\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n100%|██████████| 35/35 [00:00&lt;00:00, 19539.55it/s]\n100%|██████████| 35/35 [00:00&lt;00:00, 762.19it/s]\nINFO:cityseer.metrics.networks:Computing simplest path node centrality.\n100%|██████████| 35/35 [00:01&lt;00:00, 34.90it/s]\n\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\nprimal_edge\nprimal_edge_node_a\nprimal_edge_node_b\nprimal_edge_idx\ndual_node\ncc_density_500_ang\ncc_harmonic_500_ang\ncc_hillier_500_ang\ncc_farness_500_ang\ncc_betweenness_500_ang\n\n\n\n\nx1603413.2-y6464228.7_x1603585.6-y6464428.8_k0\n0\n1.603499e+06\n6.464329e+06\nTrue\n1\nLINESTRING (1603585.6 6464428.8, 1603413.2 646...\nx1603585.6-y6464428.8\nx1603413.2-y6464228.7\n0\nPOINT (1603499.4 6464328.75)\n18.0\n8.775770\n7.850220\n41.272728\n10.0\n\n\nx1603561.7-y6464494.5_x1603585.6-y6464428.8_k0\n1\n1.603573e+06\n6.464461e+06\nTrue\n1\nLINESTRING (1603561.7 6464494.5, 1603564.6 646...\nx1603585.6-y6464428.8\nx1603561.7-y6464494.5\n0\nPOINT (1603572.744261 6464461.367872)\n13.0\n6.314738\n5.733047\n29.478218\n11.0\n\n\nx1603585.6-y6464428.8_x1603650.5-y6464368.6_k0\n2\n1.603619e+06\n6.464400e+06\nTrue\n1\nLINESTRING (1603585.6 6464428.8, 1603603.1 646...\nx1603585.6-y6464428.8\nx1603650.5-y6464368.6\n0\nPOINT (1603619.281722 6464399.737661)\n13.0\n6.275379\n5.827383\n29.001013\n16.0\n\n\nx1603413.2-y6464228.7_x1603607.3-y6464181.9_k0\n3\n1.603510e+06\n6.464204e+06\nTrue\n1\nLINESTRING (1603607.3 6464181.9, 1603592.9 646...\nx1603413.2-y6464228.7\nx1603607.3-y6464181.9\n0\nPOINT (1603510.08598 6464204.473294)\n21.0\n9.990052\n9.261309\n47.617462\n10.0\n\n\nx1603363.6-y6464031.9_x1603413.2-y6464228.7_k0\n4\n1.603388e+06\n6.464130e+06\nTrue\n1\nLINESTRING (1603363.6 6464031.9, 1603376.5 646...\nx1603413.2-y6464228.7\nx1603363.6-y6464031.9\n0\nPOINT (1603388.006614 6464130.397742)\n24.0\n12.397884\n10.922266\n52.736309\n9.0",
    "crumbs": [
      "Conversion",
      "momepy - cityseer"
    ]
  },
  {
    "objectID": "examples/continuity/continuity_os_open.html",
    "href": "examples/continuity/continuity_os_open.html",
    "title": "OS Open Roads",
    "section": "",
    "text": "The following example uses the OS Open Roads dataset, which is available under the Open Government License.\n© Crown copyright and database right 2022",
    "crumbs": [
      "Continuity",
      "OS Open Roads"
    ]
  },
  {
    "objectID": "examples/continuity/continuity_os_open.html#data-source",
    "href": "examples/continuity/continuity_os_open.html#data-source",
    "title": "OS Open Roads",
    "section": "",
    "text": "The following example uses the OS Open Roads dataset, which is available under the Open Government License.\n© Crown copyright and database right 2022",
    "crumbs": [
      "Continuity",
      "OS Open Roads"
    ]
  },
  {
    "objectID": "examples/continuity/continuity_os_open.html#preparation",
    "href": "examples/continuity/continuity_os_open.html#preparation",
    "title": "OS Open Roads",
    "section": "Preparation",
    "text": "Preparation\nThe following example assumes:\n\nThat the notebook is being run from a cloned cityseer-api repository.\nThat the above dataset has been downloaded to temp/os_open_roads/oproad_gb.gpkg as a relative path. If running this notebook directly from within a clone of the cityseer-api repo, then this equates to the cityseer-api/temp/os_open_roads/oproad_gb.gpkg path. Please edit the paths and path setup in this cell if you are using different directories.\n\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nrepo_path = Path.cwd()\nif str(repo_path).endswith(\"continuity\"):\n    repo_path = Path.cwd() / \"../..\"\nif not str(repo_path.resolve()).endswith(\"cityseer-examples\"):\n    raise ValueError(\n        \"Please check your notebook working directory relative to your project and data paths.\"\n    )\n\nopen_roads_path = Path(repo_path / \"temp/os_open_roads/oproad_gb.gpkg\")\nprint(\"data path:\", open_roads_path)\nprint(\"path exists:\", open_roads_path.exists())\n\ndata path: /Users/gareth/dev/benchmark-urbanism/cityseer-examples/examples/continuity/../../temp/os_open_roads/oproad_gb.gpkg\npath exists: True\n\n\n\nExtents\nInstead of loading the entire dataset, we’ll use a bounding box to only load an area of interest.\n\nfrom pyproj import Transformer\nfrom shapely import geometry\n\nfrom cityseer.tools import io\n\n# create graph - only UK locations will work for OS Open Roads data\n# stratford-upon-avon\n# lng, lat, buffer_dist, plot_buffer = -1.7063649924889566, 52.19277374082795, 2500, 2000\n# london\nlng, lat, buffer_dist, plot_buffer = (\n    -0.13039709427587876,\n    51.516434828344366,\n    6000,\n    5000,\n)\n# transform from WGS to BNG\ntransformer = Transformer.from_crs(\"EPSG:4326\", \"EPSG:27700\")\neasting, northing = transformer.transform(lat, lng)\n# calculate bbox relative to centroid\ncentroid = geometry.Point(easting, northing)\ntarget_bbox: tuple[float, float, float, float] = centroid.buffer(buffer_dist).bounds  # type: ignore\nplot_bbox: tuple[float, float, float, float] = centroid.buffer(plot_buffer).bounds  # type: ignore\n\n\n\nLoad\nWe can now load the OS Open Roads dataset\n\n# load OS Open Roads data from downloaded geopackage\nG_open = io.nx_from_open_roads(open_roads_path, target_bbox=target_bbox)\n\nINFO:cityseer.tools.io:Nodes: 24778\nINFO:cityseer.tools.io:Edges: 32723\nINFO:cityseer.tools.io:Dropped 463 edges where not both start and end nodes were present.\nINFO:cityseer.tools.io:Running basic graph cleaning\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 24778/24778 [00:00&lt;00:00, 33240.53it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 10.\n100%|██████████| 30681/30681 [00:00&lt;00:00, 50838.55it/s]",
    "crumbs": [
      "Continuity",
      "OS Open Roads"
    ]
  },
  {
    "objectID": "examples/continuity/continuity_os_open.html#observe-continuity-metrics",
    "href": "examples/continuity/continuity_os_open.html#observe-continuity-metrics",
    "title": "OS Open Roads",
    "section": "Observe continuity metrics",
    "text": "Observe continuity metrics\nThis step runs the continuity analysis using the specified heuristic.\n\nimport matplotlib.pyplot as plt\n\nfrom cityseer.tools import io, plot\nfrom cityseer.metrics import observe\n\n# methods can be \"names\", \"routes\", \"highways\"\n\nprint(\"Continuity by street names\")\nG_cont, NamesContReport = observe.street_continuity(G_open, method=\"names\")\nNamesContReport.report_by_count(n_items=5)\nNamesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by route numbers\")\nG_cont, RoutesContReport = observe.street_continuity(G_cont, method=\"routes\")\nRoutesContReport.report_by_count(n_items=5)\nRoutesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by highway types\")\nG_cont, HwyContReport = observe.street_continuity(G_cont, method=\"highways\")\nHwyContReport.report_by_count(n_items=5)\nHwyContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by overlapping routes and names types\")\nG_cont, HybridContReport = observe.hybrid_street_continuity(G_cont)\nHybridContReport.report_by_count(n_items=5)\nHybridContReport.report_by_length(n_items=5)\n\nContinuity by street names\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for names.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 31274.62it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 82 - finchley road\nINFO:cityseer.metrics.observe:Count: 62 - harrow road\nINFO:cityseer.metrics.observe:Count: 58 - old kent road\nINFO:cityseer.metrics.observe:Count: 57 - king's road\nINFO:cityseer.metrics.observe:Count: 46 - clapham road\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 5.4km - harrow road\nINFO:cityseer.metrics.observe:Length: 5.34km - finchley road\nINFO:cityseer.metrics.observe:Length: 4.48km - outer circle\nINFO:cityseer.metrics.observe:Length: 3.7km - westway\nINFO:cityseer.metrics.observe:Length: 3.28km - old kent road\n\n\nContinuity by route numbers\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 109845.11it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 142 - a1\nINFO:cityseer.metrics.observe:Count: 135 - a10\nINFO:cityseer.metrics.observe:Count: 129 - a41\nINFO:cityseer.metrics.observe:Count: 128 - a107\nINFO:cityseer.metrics.observe:Count: 116 - a5\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 9.1km - a41\nINFO:cityseer.metrics.observe:Length: 8.1km - a1\nINFO:cityseer.metrics.observe:Length: 7.96km - a10\nINFO:cityseer.metrics.observe:Length: 7.76km - a3220\nINFO:cityseer.metrics.observe:Length: 7.12km - a107\n\n\nContinuity by highway types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for highways.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 156124.61it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 5056 - a road\nINFO:cityseer.metrics.observe:Count: 2510 - minor road\nINFO:cityseer.metrics.observe:Count: 1711 - primary road\nINFO:cityseer.metrics.observe:Count: 1487 - b road\nINFO:cityseer.metrics.observe:Count: 463 - secondary access road\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 336.17km - a road\nINFO:cityseer.metrics.observe:Length: 181.0km - minor road\nINFO:cityseer.metrics.observe:Length: 116.88km - primary road\nINFO:cityseer.metrics.observe:Length: 105.99km - b road\nINFO:cityseer.metrics.observe:Length: 33.74km - secondary access road\n\n\nContinuity by overlapping routes and names types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 118874.56it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 230 - a1\nINFO:cityseer.metrics.observe:Count: 204 - a41\nINFO:cityseer.metrics.observe:Count: 162 - a40\nINFO:cityseer.metrics.observe:Count: 162 - a10\nINFO:cityseer.metrics.observe:Count: 154 - a107\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 14.76km - a41\nINFO:cityseer.metrics.observe:Length: 13.1km - a1\nINFO:cityseer.metrics.observe:Length: 12.38km - a40\nINFO:cityseer.metrics.observe:Length: 10.98km - a3220\nINFO:cityseer.metrics.observe:Length: 9.46km - a10\n\n\n\nfor method, shape_exp, descriptor, cmap, inverse, col_by_categ in zip(\n    [\"names\", \"routes\", \"highways\", \"hybrid\"],  #\n    [1, 0.75, 0.5, 1],  #\n    [\"Street names\", \"Routes\", \"Road types\", \"Hybrid routes & names\"],  #\n    [\"plasma\", \"viridis\", \"tab10\", \"tab10\"],  #\n    [False, False, True, False],  #\n    [False, False, True, True],\n):\n    print(f\"Plotting results for method: {method}\")\n    # plot\n    bg_colour = \"#111\"\n    fig, axes = plt.subplots(\n        2, 1, dpi=150, figsize=(8, 12), facecolor=bg_colour, constrained_layout=True\n    )\n    fig.suptitle(\n        f\"OS Open Roads plotted by {descriptor} continuity\",\n        fontsize=\"small\",\n        ha=\"center\",\n    )\n    # by count\n    plot.plot_nx_edges(\n        axes[0],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_count\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[0].set_xlabel(f\"{descriptor} by count\", fontsize=\"x-small\")  # type: ignore\n    # by length\n    plot.plot_nx_edges(\n        axes[1],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_length\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[1].set_xlabel(f\"{descriptor} by length (metres)\", fontsize=\"x-small\")  # type: ignore\n    plt.show()\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: names\n\n\n30609it [00:00, 469577.59it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:02&lt;00:00, 11117.21it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 545878.18it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:03&lt;00:00, 10180.88it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: routes\n\n\n30609it [00:00, 464096.40it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:03&lt;00:00, 9764.13it/s] \nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 694550.28it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:03&lt;00:00, 8866.57it/s] \n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: highways\n\n\n30609it [00:00, 532384.47it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 6/6 [00:02&lt;00:00,  2.75it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 593554.44it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 6/6 [00:02&lt;00:00,  2.96it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: hybrid\n\n\n30609it [00:00, 652573.79it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:02&lt;00:00,  5.26it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 700114.25it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  5.77it/s]",
    "crumbs": [
      "Continuity",
      "OS Open Roads"
    ]
  },
  {
    "objectID": "examples/osm_to_cityseer.html",
    "href": "examples/osm_to_cityseer.html",
    "title": "OSM - cityseer",
    "section": "",
    "text": "See the accompanying discussion in the guide.\nInstall and update cityseer if necessary.\n# !pip install --upgrade cityseer\n# !pip install osmnx",
    "crumbs": [
      "Conversion",
      "OSM - cityseer"
    ]
  },
  {
    "objectID": "examples/osm_to_cityseer.html#setup",
    "href": "examples/osm_to_cityseer.html#setup",
    "title": "OSM - cityseer",
    "section": "Setup",
    "text": "Setup\nIf you’re prepared to get your hands dirty, it is possible to directly query the OSM API and to then use this data to create a cityseer graph. This can be preferred in situations where you want detailed control over the structure of the OSM API query. However, if you prefer, OSM data can also be retrieved with OSMnx and then converted into a cityseer compatible networkX graph.\nThe following example makes use of data for London Soho.\n\nimport osmnx as ox\nfrom shapely import geometry\nimport utm\n\nfrom cityseer.tools import graphs, plot, io\n\n# centrepoint\nlng, lat = -0.13396079424572427, 51.51371088849723\n\n# select extents for plotting\neasting, northing = utm.from_latlon(lat, lng)[:2]\nbuffer_dist = 1250\nbuffer_poly = geometry.Point(easting, northing).buffer(1000)\nmin_x, min_y, max_x, max_y = buffer_poly.bounds\n\n\n# reusable plot function\ndef simple_plot(_G):\n    # plot using the selected extents\n    plot.plot_nx(\n        _G,\n        labels=False,\n        plot_geoms=True,\n        node_size=4,\n        edge_width=1,\n        x_lim=(min_x, max_x),\n        y_lim=(min_y, max_y),\n        figsize=(6, 6),\n        dpi=150,\n    )\n\n\n# Let's use OSMnx to fetch an OSM graph\n# We'll use the same raw network for both workflows (hence simplify=False)\nmulti_di_graph_raw = ox.graph_from_point((lat, lng), dist=buffer_dist, simplify=False)",
    "crumbs": [
      "Conversion",
      "OSM - cityseer"
    ]
  },
  {
    "objectID": "examples/osm_to_cityseer.html#workflow-1",
    "href": "examples/osm_to_cityseer.html#workflow-1",
    "title": "OSM - cityseer",
    "section": "Workflow 1",
    "text": "Workflow 1\nOne option is to both download and simplify the data in OSMnx and to then convert the graph from OSMnx to cityseer (per the io.nx_from_osm_nx method).\n\n# Workflow 1: Using OSMnx to prepare the graph\n# ============================================\n# explicit simplification and consolidation via OSMnx\nmulti_di_graph_utm = ox.project_graph(multi_di_graph_raw)\nmulti_di_graph_simpl = ox.simplify_graph(multi_di_graph_utm)\nmulti_di_graph_cons = ox.consolidate_intersections(\n    multi_di_graph_simpl, tolerance=10, dead_ends=True\n)\n# let's use the same plotting function for both scenarios to aid visual comparisons\nmulti_graph_cons = io.nx_from_osm_nx(multi_di_graph_cons, tolerance=50)\nsimple_plot(multi_graph_cons)\n\nINFO:cityseer.tools.io:Converting OSMnx MultiDiGraph to cityseer MultiGraph.\n100%|██████████| 9876/9876 [00:02&lt;00:00, 3853.99it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n100%|██████████| 5472/5472 [00:00&lt;00:00, 24407.25it/s]",
    "crumbs": [
      "Conversion",
      "OSM - cityseer"
    ]
  },
  {
    "objectID": "examples/osm_to_cityseer.html#workflow-2",
    "href": "examples/osm_to_cityseer.html#workflow-2",
    "title": "OSM - cityseer",
    "section": "Workflow 2",
    "text": "Workflow 2\nAnother option is to simply download the OSM graph directly from within cityseer. The following uses a default OSM query, however, the OSM Overpass API can be used to roll-your-own. See documentation for more information.\n\n# WORKFLOW 2: Using cityseer to download and automatically simplify the graph\n# ===========================================================================\npoly_wgs, _ = io.buffered_point_poly(lng, lat, buffer_dist)\nG_utm = io.osm_graph_from_poly(poly_wgs, simplify=True)\nsimple_plot(G_utm)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.io:Converting networkX graph from EPSG code 4326 to EPSG code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 16483/16483 [00:00&lt;00:00, 218135.99it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 17715/17715 [00:00&lt;00:00, 412784.83it/s]\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 17715/17715 [00:00&lt;00:00, 19960.29it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 16483/16483 [00:04&lt;00:00, 3553.22it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 9182/9182 [00:00&lt;00:00, 318642.59it/s]\n100%|██████████| 9182/9182 [00:04&lt;00:00, 1889.23it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 7950/7950 [00:00&lt;00:00, 10565.93it/s]\n100%|██████████| 5581/5581 [00:00&lt;00:00, 26583.01it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 6864/6864 [00:00&lt;00:00, 150866.50it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5039/5039 [00:00&lt;00:00, 119694.06it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 46449.80it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5039/5039 [00:00&lt;00:00, 37407.91it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5007/5007 [00:00&lt;00:00, 333490.23it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 6802.18it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5059/5059 [00:00&lt;00:00, 53665.69it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5050/5050 [00:00&lt;00:00, 317131.83it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 23398.69it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5051/5051 [00:00&lt;00:00, 75601.50it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5051/5051 [00:00&lt;00:00, 315922.24it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 17164.88it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5052/5052 [00:00&lt;00:00, 88888.62it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3999/3999 [00:00&lt;00:00, 36852.77it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 68376.47it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5052/5052 [00:00&lt;00:00, 56706.63it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3999/3999 [00:00&lt;00:00, 100285.33it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3957/3957 [00:00&lt;00:00, 32483.63it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3957/3957 [00:00&lt;00:00, 6239.51it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4617/4617 [00:00&lt;00:00, 14805.80it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3648/3648 [00:00&lt;00:00, 74220.34it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3620/3620 [00:00&lt;00:00, 22292.44it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3620/3620 [00:00&lt;00:00, 11376.81it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4449/4449 [00:00&lt;00:00, 51129.17it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3584/3584 [00:00&lt;00:00, 240537.41it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3576/3576 [00:00&lt;00:00, 38804.10it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3576/3576 [00:00&lt;00:00, 9699.83it/s] \nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4345/4345 [00:00&lt;00:00, 49689.99it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3507/3507 [00:00&lt;00:00, 74974.26it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3502/3502 [00:00&lt;00:00, 40722.87it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4334/4334 [00:00&lt;00:00, 403241.21it/s]\nINFO:cityseer.tools.graphs:Snapping gapped endings.\n100%|██████████| 3502/3502 [00:01&lt;00:00, 2526.70it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4496/4496 [00:00&lt;00:00, 256018.99it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3502/3502 [00:01&lt;00:00, 2605.13it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5206/5206 [00:00&lt;00:00, 65201.17it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 3903/3903 [00:00&lt;00:00, 120925.19it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3298/3298 [00:00&lt;00:00, 3816.46it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 3681/3681 [00:00&lt;00:00, 408369.69it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2379/2379 [00:01&lt;00:00, 2350.85it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 3709/3709 [00:00&lt;00:00, 22550.28it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2379/2379 [00:00&lt;00:00, 27888.17it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2379/2379 [00:01&lt;00:00, 1192.78it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2896/2896 [00:00&lt;00:00, 9605.02it/s] \nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2743/2743 [00:00&lt;00:00, 280725.57it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1833/1833 [00:00&lt;00:00, 2865.49it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2748/2748 [00:00&lt;00:00, 56523.57it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1833/1833 [00:00&lt;00:00, 41366.66it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1833/1833 [00:01&lt;00:00, 1725.17it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2362/2362 [00:00&lt;00:00, 12636.43it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1506/1506 [00:00&lt;00:00, 13348.34it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 2185/2185 [00:00&lt;00:00, 26411.20it/s]\nINFO:cityseer.tools.graphs:Ironing edges.\n100%|██████████| 2168/2168 [00:00&lt;00:00, 6032.16it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 2157/2157 [00:00&lt;00:00, 103651.46it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 1398/1398 [00:00&lt;00:00, 180664.19it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1386/1386 [00:00&lt;00:00, 49747.17it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n100%|██████████| 2116/2116 [00:00&lt;00:00, 13022.12it/s]",
    "crumbs": [
      "Conversion",
      "OSM - cityseer"
    ]
  }
]