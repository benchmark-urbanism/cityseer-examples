[
  {
    "objectID": "data/datasets.html",
    "href": "data/datasets.html",
    "title": "Datasets",
    "section": "",
    "text": "The datasets used from the recipes are provided for reproducibility per the following links. Please refer to the respective sources for the most up-to-date versions, and use the datasets in accordance with the source licenses (these should be open, but always check), and be sure to cite the original authors of the data.\nDataset preprocessing is done per the ua-dataset-madrid repository, which is intended to be a source for openly reproducible urban analytics data for reproducible papers, workflows, and tutorials.",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#neighbourhoods",
    "href": "data/datasets.html#neighbourhoods",
    "title": "Datasets",
    "section": "Neighbourhoods",
    "text": "Neighbourhoods\nShapefile\nGeoPackage\nSource\nLicense\nOrigin of the data: Madrid City Council (or, where appropriate, administrative body, body or entity in question)\nDescription: Delimitation of the 131 neighborhoods of the municipality of Madrid. The names and codes of each neighborhood and the districts to which they belong are indicated. The initial delimitation corresponds to the territorial restructuring of 1987.",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#blocks",
    "href": "data/datasets.html#blocks",
    "title": "Datasets",
    "section": "Blocks",
    "text": "Blocks\nGeoPackage\nSource\nLicense\nThe Copernicus land monitoring products and services are made available on a principle of full, open and free access, as established by the Commission Delegated Regulation (EU) No 1159/2013 of 12 July 2013. Free, full and open access to the products and services of the Copernicus Land Monitoring Service is made on the conditions that:\n\nWhen distributing or communicating Copernicus Land Monitoring Service products and services (data, software scripts, web services, user and methodological documentation and similar) to the public, users shall inform the public of the source of these products and services.\nWhere the Copernicus Land Monitoring Service products and services have been adapted or modified by the user, the user shall clearly state this.\nUsers shall make sure not to convey the impression to the public that the user’s activities are officially endorsed by the European Union.\n\nUrban Atlas Land Cover/Land Use 2018 (vector), Europe, 6-yearly. European Union’s Copernicus Land Monitoring Service information, https://land.copernicus.eu/en/products/urban-atlas/urban-atlas-2018. https://doi.org/10.2909/fb4dffa1-6ceb-4cc0-8372-1ed354c285e6 (Accessed on DD.MM.YYYY)",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#premises",
    "href": "data/datasets.html#premises",
    "title": "Datasets",
    "section": "Premises",
    "text": "Premises\nGeoPackage\nCSV\nSource\nLicense\nOrigin of the data: Madrid City Council (or, where appropriate, administrative body, body or entity in question)\nDescription: Microdata file of the census of premises and activities of the Madrid City Council, classified according to their type of access (street door or grouped), situation (open, closed…) and indication of the economic activity exercised and the hospitality and restaurant terraces that appear registered in said census.\nPreprocessing performed per: https://github.com/songololo/ua-dataset-madrid.",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#overture-maps-buildings",
    "href": "data/datasets.html#overture-maps-buildings",
    "title": "Datasets",
    "section": "Overture Maps Buildings",
    "text": "Overture Maps Buildings\nGeoPackage\nSource\nLicense\nLicense for theme: ODbL\n\n© OpenStreetMap contributors. Available under the Open Database License.\nEsri Community Maps contributors. Available under CC BY 4.0.\nGlobal ML Building Footprints. Licensed by Microsoft under the Open Database License.\nGoogle Open Buildings. Available under CC BY 4.0.\nUSGS 3D Elevation Program Digital Elevation Program.\nQian Shi, et al. A First High-quality Vector Data of Buildings in East Asian Countries Based on a Comprehensive Large-scale Mapping Framework. Zenodo, 22 July 2023, doi:10.5281/zenodo.8174931. Available under CC BY 4.0.",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#overture-maps-infrastructure",
    "href": "data/datasets.html#overture-maps-infrastructure",
    "title": "Datasets",
    "section": "Overture Maps Infrastructure",
    "text": "Overture Maps Infrastructure\nGeoPackage\nSource\nLicense\nLicense for theme: ODbL\n\n© OpenStreetMap contributors. Available under the Open Database License.\nData from the Daylight Map Distribution\nESA WorldCover. Available under CC BY 4.0 DEED.\nData products from ETOPO1. Available under Open Data Commons Public Domain Dedication and License.\nData from GLOBathy. Available under CC0 1.0 (assumed).",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#streets",
    "href": "data/datasets.html#streets",
    "title": "Datasets",
    "section": "Streets",
    "text": "Streets\nGeoPackage\nSource\nLicense\nOrigin of the data: Madrid City Council (or, where appropriate, administrative body, body or entity in question)\nDescription: Set of roads officially approved by the municipalities of the Community of Madrid, ordered by different characteristics.\nPreprocessing and manual cleaning performed per: https://github.com/songololo/ua-dataset-madrid.",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#census",
    "href": "data/datasets.html#census",
    "title": "Datasets",
    "section": "Census",
    "text": "Census\nGeoPackage\nSource\nLicense\nCopyright European Union 2025 - The source needs to be indicated and when re-use involves modifications to the data or text, this must be stated clearly to the end user of the information. For further information refer to https://ec.europa.eu/eurostat/web/main/help/copyright-notice.\n\n\n\nCode\nDescription\n\n\n\n\nT\nTotal population\n\n\nM\nMale population\n\n\nF\nFemale population\n\n\nY_LT15\nAge under 15 years\n\n\nY_1564\nAge 15 to 64 years\n\n\nY_GE65\nAge 65+ years\n\n\nEMP\nEmployed persons\n\n\nNAT\nBorn in reporting country\n\n\nEU_OTH\nBorn in other EU Member State\n\n\nOTH\nBorn elsewhere\n\n\nSAME\nResidence unchanged in past year\n\n\nCHG_IN\nMoved within reporting country\n\n\nCHG_OUT\nMoved from outside reporting country",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "data/datasets.html#gtfs---metro",
    "href": "data/datasets.html#gtfs---metro",
    "title": "Datasets",
    "section": "GTFS - Metro",
    "text": "GTFS - Metro\nStops\nStop Times\nSource\nLicense",
    "crumbs": [
      "Datasets"
    ]
  },
  {
    "objectID": "class/index.html",
    "href": "class/index.html",
    "title": "Cityseer Guide",
    "section": "",
    "text": "This section provides introductory examples on the usage of Python and computational notebooks. These are high-level snapshots to give a basic indication of how these tools might typically be used; for more detailed examples, please refer to the online documentation for the libraries used.\nIf you would like to master python for spatial analysis, then you are encouraged to avail yourself of online resources and roll up your proverbial sleeves: getting your hands dirty is the only reliable way to familiarise yourself with geospatial python and its capabilities.\n\nNotebooks: Learn what computational notebooks are and how to use them.\nPython Basics: Python basics in a nutshell, touching on variables, data types, and simple operations.\nSpatial Data: Spatial data types and elementary operations using the shapely package.\nGeoPandas: Use of the geopandas package for handling geospatial datasets.\nOSM Data & Urban Morphology: Explore the wider Python urban analytics community by using the osmnx and momepy libraries to explore urban morphology.\nExploratory Data Science: Use the seaborn plotting library and scikit-learn for exploratory data science and predictive analytics.",
    "crumbs": [
      "Python 101"
    ]
  },
  {
    "objectID": "class/4_geopandas.html",
    "href": "class/4_geopandas.html",
    "title": "GeoPandas",
    "section": "",
    "text": "In urban analysis, working with spatial data often means handling numerous geographic features simultaneously, such as buildings, streets, or administrative boundaries. While processing each feature individually is possible, it’s considerably more efficient to manage and analyse them collectively within a structured format.\nFor general data analysis in Python, the pandas library is the standard tool. Pandas provides the DataFrame, a powerful table-like structure where rows represent observations (e.g., individual buildings) and columns store their attributes (e.g., height, area, land use). This structure is conceptually similar to attribute tables found in GIS software such as QGIS or ArcGIS.\nGeoPandas extends pandas by incorporating first-class support for geographic data. It introduces the GeoDataFrame, which is effectively a pandas DataFrame enhanced with a dedicated column for storing geometry objects (such as points, lines, or polygons). This integration allows you to combine tabular data analysis with spatial operations.\nKey features of GeoPandas include:",
    "crumbs": [
      "Python 101",
      "GeoPandas"
    ]
  },
  {
    "objectID": "class/4_geopandas.html#from-scratch",
    "href": "class/4_geopandas.html#from-scratch",
    "title": "GeoPandas",
    "section": "From Scratch",
    "text": "From Scratch\nAlthough you’ll frequently load spatial data directly from files, knowing how to create a GeoDataFrame manually is beneficial. To do this, you typically need:\n\nTabular data (like a list of dictionaries).\nCorresponding geometry objects.\nA Coordinate Reference System (CRS) identifier.\n\nLet’s begin with a simple example.\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\nFirst, we’ll define some data as a list of dictionaries. Each dictionary will represent a city, storing its name and approximate coordinates (longitude, latitude).\n\ndata = [\n    {\"city\": \"Madrid\", \"x\": -3.7038, \"y\": 40.4168},\n    {\"city\": \"Barcelona\", \"x\": 2.1734, \"y\": 41.3851},\n    {\"city\": \"Valencia\", \"x\": -0.3774, \"y\": 39.4699}\n]\n\ndata\n\n[{'city': 'Madrid', 'x': -3.7038, 'y': 40.4168},\n {'city': 'Barcelona', 'x': 2.1734, 'y': 41.3851},\n {'city': 'Valencia', 'x': -0.3774, 'y': 39.4699}]\n\n\nNext, we need to create the corresponding geometry objects. As these are coordinates, Point objects are suitable. We can generate a list of Point objects directly from our data.\n\n# Create Point geometries from the x and y columns\nlocations = []\n\nfor city in data:\n    locations.append(Point(city[\"x\"], city[\"y\"]))\n\nlocations\n\n[&lt;POINT (-3.704 40.417)&gt;, &lt;POINT (2.173 41.385)&gt;, &lt;POINT (-0.377 39.47)&gt;]\n\n\nWith the structured data and geometry prepared, the final component is the CRS. Given that the coordinates are longitude and latitude, the appropriate CRS is WGS 84, identified by the EPSG code 4326.\nWe can now construct the GeoDataFrame:\n\ngdf_cities = gpd.GeoDataFrame(\n    data,  # The list of dictionaries\n    geometry=locations,  # The Shapely Points\n    crs=4326  # Coordinate Reference System (WGS 84)\n)\n\ngdf_cities\n\n\n\n\n\n\n\n\ncity\nx\ny\ngeometry\n\n\n\n\n0\nMadrid\n-3.7038\n40.4168\nPOINT (-3.7038 40.4168)\n\n\n1\nBarcelona\n2.1734\n41.3851\nPOINT (2.1734 41.3851)\n\n\n2\nValencia\n-0.3774\n39.4699\nPOINT (-0.3774 39.4699)",
    "crumbs": [
      "Python 101",
      "GeoPandas"
    ]
  },
  {
    "objectID": "class/4_geopandas.html#indexing",
    "href": "class/4_geopandas.html#indexing",
    "title": "GeoPandas",
    "section": "Indexing",
    "text": "Indexing\nSimilar to pandas DataFrames, GeoDataFrames possess an index. By default, this is a range of integers. You can assign a more meaningful index using one of the columns (e.g., the city name) with the set_index() method. This often simplifies data selection.\n\ngdf_cities = gdf_cities.set_index(\"city\")\n\ngdf_cities\n\n\n\n\n\n\n\n\nx\ny\ngeometry\n\n\ncity\n\n\n\n\n\n\n\nMadrid\n-3.7038\n40.4168\nPOINT (-3.7038 40.4168)\n\n\nBarcelona\n2.1734\n41.3851\nPOINT (2.1734 41.3851)\n\n\nValencia\n-0.3774\n39.4699\nPOINT (-0.3774 39.4699)\n\n\n\n\n\n\n\nYou can access a row using its index. Pandas provides a special indexing method, .loc[], which allows you to access rows by their index label. This is particularly useful when you’ve set a meaningful index, such as city names.\n\ngdf_cities.loc[\"Madrid\"]\n\nx                           -3.7038\ny                           40.4168\ngeometry    POINT (-3.7038 40.4168)\nName: Madrid, dtype: object\n\n\nYou can also specify a column name. For instance, to retrieve the latitude of Barcelona:\n\ngdf_cities.loc['Barcelona', \"y\"]\n\nnp.float64(41.3851)\n\n\nTo retrieve all rows for a specific column, use the : operator. For example, to get all rows for the y column:\n\ngdf_cities.loc[:, \"y\"]\n\ncity\nMadrid       40.4168\nBarcelona    41.3851\nValencia     39.4699\nName: y, dtype: float64\n\n\nA particularly powerful feature of GeoDataFrames is the ability to filter rows based on their properties. To do this, you create a boolean mask, which can then be used to exclude rows you are not interested in. For instance, if you want to filter the cities to include only those with a latitude greater than 40, you can proceed as follows:\n\n# Create a boolean mask\nmask = gdf_cities[\"y\"] &gt; 40\n\nmask\n\ncity\nMadrid        True\nBarcelona     True\nValencia     False\nName: y, dtype: bool\n\n\nThis mask is a pandas Series of boolean values, where True indicates that the condition (y &gt; 40) is met, and False indicates it is not. You can now apply this mask to filter the rows in the original GeoDataFrame.\n\n# Use the mask to filter the rows\ngdf_cities.loc[mask]\n\n\n\n\n\n\n\n\nx\ny\ngeometry\n\n\ncity\n\n\n\n\n\n\n\nMadrid\n-3.7038\n40.4168\nPOINT (-3.7038 40.4168)\n\n\nBarcelona\n2.1734\n41.3851\nPOINT (2.1734 41.3851)\n\n\n\n\n\n\n\nAs shown, only two rows are returned because Valencia, the third city, has a latitude below 40.",
    "crumbs": [
      "Python 101",
      "GeoPandas"
    ]
  },
  {
    "objectID": "class/4_geopandas.html#geospatial",
    "href": "class/4_geopandas.html#geospatial",
    "title": "GeoPandas",
    "section": "Geospatial",
    "text": "Geospatial\nGeoDataFrames possess special properties stemming from their spatial nature.\nGeoPandas formally designates a particular column as the geometry; this is typically done during the creation of the GeoDataFrame. The geometry column contains Shapely geometry objects, which can be points, lines, or polygons. This column is often called geometry, but this is not always the case.\n\ngdf_cities.geometry\n\ncity\nMadrid       POINT (-3.7038 40.4168)\nBarcelona     POINT (2.1734 41.3851)\nValencia     POINT (-0.3774 39.4699)\nName: geometry, dtype: geometry\n\n\nSimilarly, GeoPandas formally associates the geometry with a given CRS, accessible via the .crs attribute.\n\ngdf_cities.crs\n\n&lt;Geographic 2D CRS: EPSG:4326&gt;\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\nGeoPandas conveniently integrates with matplotlib for straightforward plotting. Calling .plot() on a GeoDataFrame will render its geometries.\n\ngdf_cities.plot()\n\n\n\n\n\n\n\n\n\nCoordinate Transformations\nGeoPandas makes CRS transformation very easy with the to_crs() method. Ensure you use a projected coordinate reference system when performing detailed spatial analysis. Let’s convert our cities GeoDataFrame to EPSG:3035, a projected equal-area CRS suitable for Europe (ETRS89-LAEA).\n\ngdf_cities_proj = gdf_cities.to_crs(3035)\n\ngdf_cities_proj\n\n\n\n\n\n\n\n\nx\ny\ngeometry\n\n\ncity\n\n\n\n\n\n\n\nMadrid\n-3.7038\n40.4168\nPOINT (3159390.356 2029850.92)\n\n\nBarcelona\n2.1734\n41.3851\nPOINT (3664996.992 2065549.826)\n\n\nValencia\n-0.3774\n39.4699\nPOINT (3426003.188 1881060.49)\n\n\n\n\n\n\n\nNotice how the x and y columns no longer match the geometry, as the geometry is now in metres according to EPSG:3035. The .crs attribute reflects this change:\n\ngdf_cities_proj.crs\n\n&lt;Projected CRS: EPSG:3035&gt;\nName: ETRS89-extended / LAEA Europe\nAxis Info [cartesian]:\n- Y[north]: Northing (metre)\n- X[east]: Easting (metre)\nArea of Use:\n- name: Europe - European Union (EU) countries and candidates. Europe - onshore and offshore: Albania; Andorra; Austria; Belgium; Bosnia and Herzegovina; Bulgaria; Croatia; Cyprus; Czechia; Denmark; Estonia; Faroe Islands; Finland; France; Germany; Gibraltar; Greece; Hungary; Iceland; Ireland; Italy; Kosovo; Latvia; Liechtenstein; Lithuania; Luxembourg; Malta; Monaco; Montenegro; Netherlands; North Macedonia; Norway including Svalbard and Jan Mayen; Poland; Portugal including Madeira and Azores; Romania; San Marino; Serbia; Slovakia; Slovenia; Spain including Canary Islands; Sweden; Switzerland; Türkiye (Turkey); United Kingdom (UK) including Channel Islands and Isle of Man; Vatican City State.\n- bounds: (-35.58, 24.6, 44.83, 84.73)\nCoordinate Operation:\n- name: Europe Equal Area 2001\n- method: Lambert Azimuthal Equal Area\nDatum: European Terrestrial Reference System 1989 ensemble\n- Ellipsoid: GRS 1980\n- Prime Meridian: Greenwich\n\n\nPlotting the transformed data shows the locations relative to the new projected coordinate system.\n\ngdf_cities_proj.plot()\n\n\n\n\n\n\n\n\n\n\nSpatial Operations\nGeoPandas enables you to apply spatial operations directly to GeoDataFrames or GeoSeries. These operations are applied element-wise.\nFor instance, to create a 100km buffer around each city:\n\n# The buffer distance is in the units of the CRS (metres for EPSG:3035)\ngdf_cities_proj[\"geometry\"] = gdf_cities_proj.geometry.buffer(100000)  # 100km buffer\n\ngdf_cities_proj.plot()\n\n\n\n\n\n\n\n\nAlternatively, you can calculate the distance from each feature in a GeoDataFrame to a single Shapely geometry object. Let’s determine the distance from each city buffer to a specific point (also defined in EPSG:3035 coordinates):\n\n# Define a point in the same CRS (EPSG:3035)\npt = Point(3300000, 2000000)\n\n# Calculate distance from each geometry in the GeoSeries to the point\ngdf_cities_proj.geometry.distance(pt)\n\ncity\nMadrid        43770.428827\nBarcelona    270860.150569\nValencia      73357.551677\ndtype: float64\n\n\n\n\nCreating and Updating Columns\nIf we wished to create a new column named ‘easting’ and assign it the x-coordinate of the geometry, we could proceed as follows:\n\ngdf_cities_proj['easting'] = gdf_cities_proj.geometry.centroid.x\n\ngdf_cities_proj\n\n\n\n\n\n\n\n\nx\ny\ngeometry\neasting\n\n\ncity\n\n\n\n\n\n\n\n\nMadrid\n-3.7038\n40.4168\nPOLYGON ((3259390.356 2029850.92, 3258908.829 ...\n3.159390e+06\n\n\nBarcelona\n2.1734\n41.3851\nPOLYGON ((3764996.992 2065549.826, 3764515.465...\n3.664997e+06\n\n\nValencia\n-0.3774\n39.4699\nPOLYGON ((3526003.188 1881060.49, 3525521.661 ...\n3.426003e+06\n\n\n\n\n\n\n\nEach geometry row in the DataFrame is a Shapely geometry, so you can use standard Shapely syntax to access properties such as the centroid or its x-coordinate.\nIf you decide instead to update the existing x and y columns, you can reference them directly:\n\ngdf_cities_proj['x'] = gdf_cities_proj.geometry.centroid.x\ngdf_cities_proj['y'] = gdf_cities_proj.geometry.centroid.y\n\ngdf_cities_proj\n\n\n\n\n\n\n\n\nx\ny\ngeometry\neasting\n\n\ncity\n\n\n\n\n\n\n\n\nMadrid\n3.159390e+06\n2.029851e+06\nPOLYGON ((3259390.356 2029850.92, 3258908.829 ...\n3.159390e+06\n\n\nBarcelona\n3.664997e+06\n2.065550e+06\nPOLYGON ((3764996.992 2065549.826, 3764515.465...\n3.664997e+06\n\n\nValencia\n3.426003e+06\n1.881060e+06\nPOLYGON ((3526003.188 1881060.49, 3525521.661 ...\n3.426003e+06\n\n\n\n\n\n\n\nDataFrames offer an extensive variety of useful methods; here, we will use the drop method to remove the column we no longer wish to retain:\n\ngdf_cities_proj = gdf_cities_proj.drop(columns=['easting'])\n\ngdf_cities_proj\n\n\n\n\n\n\n\n\nx\ny\ngeometry\n\n\ncity\n\n\n\n\n\n\n\nMadrid\n3.159390e+06\n2.029851e+06\nPOLYGON ((3259390.356 2029850.92, 3258908.829 ...\n\n\nBarcelona\n3.664997e+06\n2.065550e+06\nPOLYGON ((3764996.992 2065549.826, 3764515.465...\n\n\nValencia\n3.426003e+06\n1.881060e+06\nPOLYGON ((3526003.188 1881060.49, 3525521.661 ...",
    "crumbs": [
      "Python 101",
      "GeoPandas"
    ]
  },
  {
    "objectID": "class/4_geopandas.html#working-with-data",
    "href": "class/4_geopandas.html#working-with-data",
    "title": "GeoPandas",
    "section": "Working with Data",
    "text": "Working with Data\n\nReading Data\nGeoPandas can read various spatial data formats, such as Shapefiles, GeoPackages, and GeoJSON files. The read_file() function is the primary method for this. Note that the file path in the example below must be adjusted to point to the actual location of the file on your computer.\n\nmad_bldgs = gpd.read_file('../data/madrid_buildings/madrid_bldgs.gpkg')\n\nmad_bldgs.head()\n\n\n\n\n\n\n\n\nmean_height\narea\nperimeter\ncompactness\norientation\nvolume\nfloor_area_ratio\nform_factor\ncorners\nshape_index\nfractal_dimension\ngeometry\n\n\n\n\n0\nNaN\n187.418714\n58.669276\n0.491102\n40.235999\nNaN\nNaN\nNaN\n4\n0.700787\n1.026350\nPOLYGON ((448688.642 4492911, 448678.351 44928...\n\n\n1\n7.0\n39.082821\n26.992208\n0.472874\n10.252128\n273.579749\n78.165643\n5.410857\n4\n0.687658\n1.041691\nPOLYGON ((440862.665 4482604.017, 440862.64 44...\n\n\n2\n7.0\n39.373412\n27.050303\n0.475086\n10.252128\n275.613883\n78.746824\n5.400665\n4\n0.689265\n1.040760\nPOLYGON ((440862.681 4482608.269, 440862.665 4...\n\n\n3\n7.5\n37.933979\n26.739878\n0.464266\n10.252129\n284.504846\n75.867959\n5.513124\n4\n0.681371\n1.045072\nPOLYGON ((440862.705 4482612.365, 440862.681 4...\n\n\n4\n7.0\n39.013701\n26.972641\n0.472468\n10.183618\n273.095907\n78.027402\n5.412350\n4\n0.687363\n1.041798\nPOLYGON ((440880.29 4482607.963, 440880.274 44...\n\n\n\n\n\n\n\nThe head() method shows the first few rows of the GeoDataFrame, including the geometry column. The CRS is automatically detected and set.\n\n\nPlotting\nLet’s plot the data.\n\nmad_bldgs.plot()\n\n\n\n\n\n\n\n\nTo zoom in when plotting, you can set your x and y-axis limits. For a cleaner plot, it is also generally preferable to turn off the axes so that the coordinates do not render.\n\nax = mad_bldgs.plot()\n\nax.set_xlim(439000, 442000)\nax.set_ylim(4473000, 4476000)\nax.axis('off')\n\n(np.float64(439000.0),\n np.float64(442000.0),\n np.float64(4473000.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\nLet’s create a new column named area, which we will set to the value of each geometry’s area. Then, we will plot the data again, this time rendering the colour according to the building’s area.\n\nmad_bldgs['area'] = mad_bldgs.geometry.area\n\nax = mad_bldgs.plot(\n    column='area',\n    cmap='viridis',\n    vmax=10000,\n)\n\nax.set_xlim(439000, 442000)\nax.set_ylim(4473000, 4476000)\nax.axis('off')\n\n(np.float64(439000.0),\n np.float64(442000.0),\n np.float64(4473000.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\n\n\nSaving Data\nGeoPandas can save GeoDataFrames to various formats, including Shapefiles, GeoPackages, and GeoJSON files. The to_file() method is used for this purpose. You can specify the format using the driver parameter.\nmad_bldgs.to_file('bldgs_w_area.gpkg', driver='GPKG')",
    "crumbs": [
      "Python 101",
      "GeoPandas"
    ]
  },
  {
    "objectID": "class/2_basics.html",
    "href": "class/2_basics.html",
    "title": "Python 101",
    "section": "",
    "text": "Python is a versatile language, widely used for urban analysis and data science. This guide introduces its foundational concepts.\nThe best way to learn Python is by trying things out. Change the examples, break them, and see what happens. Progress comes fastest when you actively use the tools to solve problems and learn as you go.\nThis is a brief introduction to Python. To use it effectively day-to-day, you’ll need hands-on practice and to explore further resources, which are widely available online. It’s a great time to learn, as Large Language Models (LLMs) can help speed up the process and answer many of your questions. However, be mindful: use LLMs to amplify your understanding and guide your learning, not as a substitute for grasping the concepts yourself. Relying on them to do the work without understanding means you might not learn effectively and could miss out on using these tools to their full potential.",
    "crumbs": [
      "Python 101",
      "Python 101"
    ]
  },
  {
    "objectID": "class/2_basics.html#collections",
    "href": "class/2_basics.html#collections",
    "title": "Python 101",
    "section": "Collections",
    "text": "Collections\nOften, you need to work with multiple pieces of data at once. Python provides several ways to group data, each with its own characteristics.\n\n\n\n\n\n\n\n\n\n\n\nType\nOrdered\nUnique\nMutable\nExample Syntax\nExample Use Case\n\n\n\n\nList\nYes\nNo\nYes\n[1, 2, 3]\nShopping list, coordinates\n\n\nTuple\nYes\nNo\nNo\n(1, 2, 3)\nFixed coordinates, RGB colour\n\n\nSet\nNo\nYes (Values)\nYes\n{1, 2, 3}\nUnique tags, deduplication\n\n\nDictionary\nYes\nYes (Keys)\nYes\n{\"a\": 1, \"b\": 2}\nLookup tables, data records\n\n\n\n\nLists\nUse lists when the order of items is important and you might need to change them later. Lists are mutable (meaning they can be changed after creation). Think of them like a row of mailboxes: you can change what’s inside a mailbox. Access items using their index (position, starting from 0) in square brackets []. Negative indexing is also handy, where -1 refers to the last item, -2 to the second last, and so on.\nCreate a list using square brackets []:\n\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]\n\nplanets\n\n['Mercury', 'Venus', 'Earth', 'Mars']\n\n\nAccess items by index (position, starting from 0)\n\nprint(planets[0]) # Mercury\nprint(planets[2]) # Earth\n\nMercury\nEarth\n\n\nReverse index\n\nplanets[-1] # Mars\nplanets[-3] # Venus\n\n'Venus'\n\n\nAdd an item to the end\n\nplanets.append(\"Jupiter\")\n\nplanets\n\n['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter']\n\n\n\n\n\n\n\n\nNote\n\n\n\nPython has several useful built-in functions. One is len(), which we’ll use below. It returns the length (i.e., the number of items) of an object like a list or a string.\n\n\nGet the number of items\n\nlen(planets) # Output: 5\n\n5\n\n\nLists are mutable (can be changed after creation)\n\nplanets[0] = \"Fast Planet\" # Change the first item\nplanets[3] = \"Red Planet\" # Update Mars\n\nplanets\n\n['Fast Planet', 'Venus', 'Earth', 'Red Planet', 'Jupiter']\n\n\nCommon list operations\n\nplanets.insert(1, \"New Planet\") # Insert at a specific index\nprint(planets)\n\n['Fast Planet', 'New Planet', 'Venus', 'Earth', 'Red Planet', 'Jupiter']\n\n\nRemove item at index 2 and get its value\n\nremoved_planet = planets.pop(2)\nprint(f\"Removed: {removed_planet}\")\nprint(planets)\n\nRemoved: Venus\n['Fast Planet', 'New Planet', 'Earth', 'Red Planet', 'Jupiter']\n\n\n\n\nDictionaries\nUse dictionaries when you need to associate values with unique keys (like looking up a word in a dictionary to find its definition). They are very efficient for retrieving values when you know the key.\nOnce data is stored, you can easily retrieve or update a value using its key.\nDictionaries are defined using curly braces {}. Each item is a key-value pair, separated by a colon :. The key is on the left, and the value is on the right.\nSimilar to lists, dictionaries use square brackets [] to access values, but instead of a numerical index, you use the key.\n\n# Create a dictionary using curly braces {}\n# Format: {key1: value1, key2: value2}\nbuilding_info = {\n    \"type\": \"Residential\",\n    \"floors\": 5,\n    \"year_built\": 1998\n}\nbuilding_info\n\n{'type': 'Residential', 'floors': 5, 'year_built': 1998}\n\n\n\n# Access values using keys\nprint(building_info[\"type\"]) # Residential\nprint(building_info[\"floors\"]) # 5\n\nResidential\n5\n\n\n\n# Add a new key-value pair\nbuilding_info[\"has_elevator\"] = True\nprint(building_info)\n\n{'type': 'Residential', 'floors': 5, 'year_built': 1998, 'has_elevator': True}\n\n\n\n# Dictionaries are mutable\nbuilding_info[\"year_built\"] = 2000 # Update a value\nprint(building_info)\n\n{'type': 'Residential', 'floors': 5, 'year_built': 2000, 'has_elevator': True}\n\n\n\n# Common dictionary operations\nprint(building_info.keys())   # Get all keys\nprint(building_info.values()) # Get all values\nprint(building_info.get(\"address\", \"Not specified\")) # Get value, provide default if key not found\n\ndict_keys(['type', 'floors', 'year_built', 'has_elevator'])\ndict_values(['Residential', 5, 2000, True])\nNot specified\n\n\n\n\nTuples\nUse tuples for ordered collections of items that shouldn’t change after creation (e.g., coordinates). Tuples are immutable, meaning they cannot be altered once created.\n\n# A tuple of coordinates\npoint = (10.5, 25.3)\nprint(point)\nprint(point[0]) # Access items like lists\n\n(10.5, 25.3)\n10.5\n\n\n# point[0] = 11.0 # This would cause a TypeError! Tuples are immutable.\n\n# Tuples are often used to return multiple values from functions or for unpacking\ndef get_coordinates():\n    return (10.5, 25.3)\n\n\ncoords = get_coordinates()\nlat, lon = coords # Tuple unpacking\nprint(f\"Latitude: {lat}, Longitude: {lon}\")\n\nLatitude: 10.5, Longitude: 25.3\n\n\n\n\nSets\nUse sets when you need a collection of unique items, and the order of those items isn’t important.\n\n # Duplicate \"London\" is ignored\nunique_cities = {\"London\", \"Paris\", \"Berlin\", \"London\"}\n# Output might be in any order, e.g., {'Berlin', 'London', 'Paris'}\nprint(unique_cities)\n\n{'London', 'Berlin', 'Paris'}\n\n\n\n# Check for membership\nprint(\"Paris\" in unique_cities) # True\n\nTrue\n\n\n\n# Add an item\nunique_cities.add(\"Rome\")\nprint(unique_cities)\n\n{'London', 'Rome', 'Berlin', 'Paris'}\n\n\n\n# Set operations\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\nprint(set1.union(set2))        # All items from both: {1, 2, 3, 4, 5}\nprint(set1.intersection(set2)) # Items in both: {3}\nprint(set1.difference(set2))   # Items in set1 but not set2: {1, 2}\n\n{1, 2, 3, 4, 5}\n{3}\n{1, 2}",
    "crumbs": [
      "Python 101",
      "Python 101"
    ]
  },
  {
    "objectID": "class/2_basics.html#control-flow",
    "href": "class/2_basics.html#control-flow",
    "title": "Python 101",
    "section": "Control Flow",
    "text": "Control Flow\nControl flow structures are fundamental to programming. They allow your code to make decisions (using if/elif/else) and repeat actions (using for/while loops).\n\nConditionals\nConditionals allow your program to execute different blocks of code based on whether certain conditions are True or False. They use comparison operators to evaluate conditions.\n\n# Comparison operators return boolean values\nprint(5 == 5) # Equal to: True\nprint(5 != 3) # Not equal to: True\nprint(5 &gt; 3)  # Greater than: True\nprint(5 &lt; 3)  # Less than: False\nprint(5 &gt;= 5) # Greater than or equal to: True\nprint(5 &lt;= 3) # Less than or equal to: False\n\nTrue\nTrue\nTrue\nFalse\nTrue\nFalse\n\n\n\n\n\n\n\n\nIndentation\n\n\n\nIndentation is non-negotiable in Python: it defines code blocks. Always use consistent spacing (the common convention is 4 spaces per indentation level) and avoid mixing spaces with tabs. Code blocks are introduced by a colon (:) and can be nested.\n\n# Example of indentation\nfor i in range(3):\n    if i == 2:\n        print(f\"{i} is two\")\n    else:\n        print(f\"{i} is not two\")\n\n0 is not two\n1 is not two\n2 is two\n\n\n\n\nUse if, elif (short for ‘else if’), and else to direct the flow of execution. Conditions can be combined using and and or. For identity checks (e.g., if a value is None), use is and is not.\n\npopulation_density = 5000 # people per sq km\n\nif population_density &gt; 10000:\n    print(\"Very high density\")\nelif population_density &gt; 3000:\n    print(\"High density\")\nelif population_density &gt; 1000:\n    print(\"Medium density\")\nelse:\n    print(\"Low density\")\n\nHigh density\n\n\n\n# Combining conditions with 'and', 'or'\nfloors = 12\n\nif population_density &gt; 3000 and floors &gt; 10:\n    print(\"High density and tall buildings\")\n\nHigh density and tall buildings\n\n\n\n# Checking for None (often used for missing data)\nmaybe_data = None # Represents absence of a value\n\nif maybe_data is None:\n    print(\"Data is missing.\")\nelse:\n    print(f\"Data found: {maybe_data}\")\n\nData is missing.\n\n\nThis conditional logic enables your program to adapt its behaviour to various situations.\n\n\nLoops\nLoops are fantastic for avoiding repetitive code. They are essential for processing items in collections and can be combined with conditionals to apply logic selectively to each item.\n\nfor Loops\nUse for loops to iterate over each item in a sequence (such as a list, tuple, or string). In each pass (iteration), the loop variable (e.g., planet in the example below) takes the value of the current item from the sequence.\n\n# Loop through a list\nfor planet in planets:\n    print(f\"Checking planet: {planet}\")\n\nChecking planet: Fast Planet\nChecking planet: New Planet\nChecking planet: Earth\nChecking planet: Red Planet\nChecking planet: Jupiter\n\n\n\n\nwhile Loops\nUse while loops when you don’t know exactly how many times to loop in advance, but you know the condition under which the loop should continue running.\n\n# Countdown\ncountdown = 3\nwhile countdown &gt; 0:\n    print(countdown)\n    # Decrease countdown (essential to avoid infinite loop!!!)\n    countdown = countdown - 1\nprint(\"Blast off!\")\n\n3\n2\n1\nBlast off!\n\n\nCaution: Ensure the while loop’s condition eventually becomes False, otherwise it will run forever (an infinite loop)!\n\n\n\nExercise\nCreate a list named numbers containing the integers from 1 to 10. Then, write a loop that iterates through this list. For each number, if it is even, print the number.\nHint: The modulo operator (%) gives the remainder of a division. A number is even if number % 2 == 0.",
    "crumbs": [
      "Python 101",
      "Python 101"
    ]
  },
  {
    "objectID": "class/2_basics.html#functions",
    "href": "class/2_basics.html#functions",
    "title": "Python 101",
    "section": "Functions",
    "text": "Functions\nFunctions help you organise your code into logical, reusable blocks. This improves readability, makes debugging easier, and simplifies maintenance. If you find yourself copying and pasting code, that’s often a good sign you could write a function instead.\n\n# Define a function with parameters (inputs)\ndef calculate_density(population, area, unit=\"sq km\"):\n    \"\"\"Calculates population density.\n\n    It's good practice to include a *docstring* (documentation string) right after\n    the def line to explain what the function does, its parameters, and what it returns.\n\n    Args:\n        population (int): The total population.\n        area (float): The total area.\n        unit (str, optional): The unit for the area. Defaults to \"sq km\".\n\n    Returns:\n        float: The calculated density, or 0 if area is non-positive.\n    \"\"\"\n    if area &lt;= 0:\n        print(\"Area must be positive to calculate density.\")\n        return 0 # Return 0 or raise an error for invalid input\n    density = population / area\n    return density\n\n# Call the function with arguments (values for the parameters)\ndensity1 = calculate_density(1000000, 50)\nprint(f\"Density 1: {density1:.2f} people per sq km\")\n\ndensity2 = calculate_density(population=500000, area=100, unit=\"square kilometres\") # Can name arguments\nprint(f\"Density 2: {density2:.2f} people per square kilometres\")\n\n# Example of invalid input\ndensity_invalid = calculate_density(1000, 0)\nprint(f\"Density invalid: {density_invalid}\")\n\nDensity 1: 20000.00 people per sq km\nDensity 2: 5000.00 people per square kilometres\nArea must be positive to calculate density.\nDensity invalid: 0\n\n\n\n# Call the function with arguments (values for the parameters)\ndensity1 = calculate_density(1000000, 50)\nprint(f\"Density 1: {density1:.2f} people per sq km\")\n\nDensity 1: 20000.00 people per sq km\n\n\n\n# Can name arguments\ndensity2 = calculate_density(\n    population=500000, area=100, unit=\"square kilometres\"\n)\nprint(f\"Density 2: {density2:.2f} people per square kilometres\")\n\nDensity 2: 5000.00 people per square kilometres\n\n\n\n# Example of invalid input\ndensity_invalid = calculate_density(1000, 0)\nprint(f\"Density invalid: {density_invalid}\")\n\nArea must be positive to calculate density.\nDensity invalid: 0\n\n\nKey Ideas:\n\nParameters: These are the names listed in the function definition’s parentheses (e.g., population, area).\nArguments: These are the actual values you pass to the function when you call it.\nDefault Arguments: You can give parameters default values (e.g., unit=\"sq km\"). If you don’t provide an argument for that parameter when calling the function, the default value is used.\nScope: Variables defined inside a function are typically local to that function, meaning they only exist and can be accessed within that function.\nDocstrings: As mentioned, the triple-quoted string \"\"\"...\"\"\" right after the def line. They are used to document what the function does, its arguments (often listed under an Args: section), and what it returns (under a Returns: section). Good docstrings are vital for writing understandable and maintainable code.\nReturn Statement: The return statement is used to send a value back from the function to the place where it was called. If a function doesn’t have a return statement, or if the return statement is used without a value, it implicitly returns None.\n\nFunctions make your code modular, which means it’s broken down into smaller, manageable pieces. This makes it easier to test and understand. While functions don’t always have to return a value (e.g., a function that just prints something), they often do.",
    "crumbs": [
      "Python 101",
      "Python 101"
    ]
  },
  {
    "objectID": "class/2_basics.html#importing-modules",
    "href": "class/2_basics.html#importing-modules",
    "title": "Python 101",
    "section": "Importing Modules",
    "text": "Importing Modules\nPython has a vast collection of modules that provide ready-to-use tools – so you often don’t need to reinvent the wheel! If you encounter an unfamiliar function, it’s a good idea to check the import statements, usually found at the top of the file, as the function might come from an imported module.\n\nimport math # Import the built-in math module\n\nradius = 5\narea = math.pi * (radius ** 2) # Use math.pi\nprint(f\"Circle Area: {area:.2f}\")\n\nCircle Area: 78.54\n\n\n\ncircumference = 2 * math.pi * radius\nprint(f\"Circle Circumference: {circumference:.2f}\")\n\nCircle Circumference: 31.42\n\n\n\n# You can also import specific methods from a module\nfrom math import sqrt # Import only the square root function\nprint(f\"Square root of 16 is {sqrt(16)}\")\n\nSquare root of 16 is 4.0\n\n\nKey Idea: import module_name makes the functions and variables within that module available, accessed via module_name.function_name.\nIn later sections, we’ll be making extensive use of powerful libraries such as pandas, geopandas, and cityseer, which are all imported as modules.",
    "crumbs": [
      "Python 101",
      "Python 101"
    ]
  },
  {
    "objectID": "class/2_basics.html#common-errors",
    "href": "class/2_basics.html#common-errors",
    "title": "Python 101",
    "section": "Common Errors",
    "text": "Common Errors\nDon’t worry, errors are a normal part of programming! Learning to read and understand error messages is a key skill for fixing them. If you get stuck, searching for the error message online is often helpful – chances are, someone else has encountered the same problem. You can also ask an LLM to help explain what an error message means.\n\nNameError: name '...' is not defined: You tried to use a variable before assigning a value to it, or you misspelled the variable name.\nTypeError: unsupported operand type(s) for ...: You tried to perform an operation on incompatible data types (e.g., adding a string to an integer: \"Hello\" + 5).\nSyntaxError: invalid syntax: You made a mistake in the Python grammar (e.g., missing colon :, mismatched parentheses ()).\nIndexError: list index out of range: You tried to access an item in a list using an index that doesn’t exist (e.g., accessing my_list[5] when the list only has 3 items).\nImportError: No module named '...' or ModuleNotFoundError: No module named '...': You tried to import a module that Python can’t find. It might be misspelled or not installed.\n\nDebugging Tip: When you encounter an error, the last line of the message usually tells you the specific type of error. The lines mentioned in the traceback help you find where the problem occurred in your code. Sprinkling print() statements in your code to check the values of variables at different stages can also be a very effective way to debug. And remember, it’s common to fix one error only to find another – just tackle them one by one.",
    "crumbs": [
      "Python 101",
      "Python 101"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro",
    "section": "",
    "text": "This repository contains examples for the cityseer package.",
    "crumbs": [
      "Intro"
    ]
  },
  {
    "objectID": "index.html#datasets",
    "href": "index.html#datasets",
    "title": "Intro",
    "section": "Datasets",
    "text": "Datasets\nThe datasets used from the recipes are available on the datasets page, where you can also find information on the sources.",
    "crumbs": [
      "Intro"
    ]
  },
  {
    "objectID": "index.html#python-101",
    "href": "index.html#python-101",
    "title": "Intro",
    "section": "Python 101",
    "text": "Python 101\nIf you are new to Python or computational notebooks, start with the Python 101 section.",
    "crumbs": [
      "Intro"
    ]
  },
  {
    "objectID": "index.html#recipes",
    "href": "index.html#recipes",
    "title": "Intro",
    "section": "Recipes",
    "text": "Recipes\nIf you already have some experience, you can dive straight into the recipes section, which contains practical examples and use-cases for cityseer.",
    "crumbs": [
      "Intro"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Intro",
    "section": "Installation",
    "text": "Installation\nTo install cityseer, use pip:\npip install --upgrade cityseer\nOr, from a notebook:\n!pip install --upgrade cityseer\nThe examples in this cookbook also use packages such as geopandas, networkx, and matplotlib. You can install these using the same method.",
    "crumbs": [
      "Intro"
    ]
  },
  {
    "objectID": "recipes/stats/index.html",
    "href": "recipes/stats/index.html",
    "title": "Statistics",
    "section": "",
    "text": "The following two examples use the layers.compute_stats method to compute statistics such as min, max, mean, and var. In general, the same network pre-processing steps can be followed as shown for these network preparation steps or for the network centrality steps. A data set is their necessary for identifying the locations of different land uses and it is the impossible to compete accessibilities over the network using the layers.compute_stats method.\nThis method requires:",
    "crumbs": [
      "Cityseer Recipes",
      "Statistics"
    ]
  },
  {
    "objectID": "recipes/stats/index.html#statistics-from-geopandas-data",
    "href": "recipes/stats/index.html#statistics-from-geopandas-data",
    "title": "Statistics",
    "section": "Statistics from geopandas data",
    "text": "Statistics from geopandas data\nCalculate building statistics from a geopandas GeoDataFrame.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Statistics"
    ]
  },
  {
    "objectID": "recipes/stats/index.html#statistics-from-osm-data",
    "href": "recipes/stats/index.html#statistics-from-osm-data",
    "title": "Statistics",
    "section": "Statistics from OSM data",
    "text": "Statistics from OSM data\nCalculate building statistics from osmnx data.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Statistics"
    ]
  },
  {
    "objectID": "recipes/continuity/continuity_osm.html",
    "href": "recipes/continuity/continuity_osm.html",
    "title": "OSM",
    "section": "",
    "text": "Set the coordinates and buffer distances to your preferred extents.\n\nfrom cityseer.tools import io\n\n# lng, lat, buffer_dist, plot_buffer = -1.7063649924889566, 52.19277374082795, 1500, 1250  # stratford-upon-avon\nlng, lat, buffer_dist, plot_buffer = (\n    -0.13039709427587876,\n    51.516434828344366,\n    6000,\n    5000,\n)  # london\n# lng, lat, buffer_dist, plot_buffer = 18.425702641104582, -33.9204746754594, 3000, 2500  # cape town\npoly_wgs, _ = io.buffered_point_poly(lng, lat, buffer_dist)\npoly_utm, _ = io.buffered_point_poly(lng, lat, buffer_dist, projected=True)\n# select extents for plotting\nplot_bbox = poly_utm.centroid.buffer(plot_buffer).bounds"
  },
  {
    "objectID": "recipes/continuity/continuity_osm.html#preparation",
    "href": "recipes/continuity/continuity_osm.html#preparation",
    "title": "OSM",
    "section": "",
    "text": "Set the coordinates and buffer distances to your preferred extents.\n\nfrom cityseer.tools import io\n\n# lng, lat, buffer_dist, plot_buffer = -1.7063649924889566, 52.19277374082795, 1500, 1250  # stratford-upon-avon\nlng, lat, buffer_dist, plot_buffer = (\n    -0.13039709427587876,\n    51.516434828344366,\n    6000,\n    5000,\n)  # london\n# lng, lat, buffer_dist, plot_buffer = 18.425702641104582, -33.9204746754594, 3000, 2500  # cape town\npoly_wgs, _ = io.buffered_point_poly(lng, lat, buffer_dist)\npoly_utm, _ = io.buffered_point_poly(lng, lat, buffer_dist, projected=True)\n# select extents for plotting\nplot_bbox = poly_utm.centroid.buffer(plot_buffer).bounds"
  },
  {
    "objectID": "recipes/continuity/continuity_osm.html#loading-data-from-osm",
    "href": "recipes/continuity/continuity_osm.html#loading-data-from-osm",
    "title": "OSM",
    "section": "Loading data from OSM",
    "text": "Loading data from OSM\nFor this example, we’ll use a custom OSM query that excludes footways because the continuity analysis needs OSM ways that have street name or route number information.\nFor this form of analysis, only basic cleaning is recommended:\n\nnot consolidating nodes because this risks accidentally dropping highway / ref / name attributes\nnot like closeness or betweenness methods, where topological distortions are arguably a bigger issue\n\n\nquery = \"\"\"\n[out:json];\n(\n    way[\"highway\"]\n    [\"area\"!=\"yes\"]\n    [\"highway\"!~\"footway|pedestrian|steps|bus_guideway|escape|raceway|proposed|planned|abandoned|platform|construction\"]\n    [\"service\"!~\"parking_aisle\"]\n    [\"amenity\"!~\"charging_station|parking|fuel|motorcycle_parking|parking_entrance|parking_space\"]\n    [\"access\"!~\"private|customers\"]\n    [\"indoor\"!=\"yes\"]\n    (poly:\"{geom_osm}\");\n);\nout body;\n&gt;;\nout qt;\n\"\"\"\nG_osm = io.osm_graph_from_poly(\n    poly_wgs, custom_request=query, simplify=True, iron_edges=False\n)\n\nINFO:cityseer.tools.io:Converting networkX graph from EPSG code 4326 to EPSG code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 141799/141799 [00:00&lt;00:00, 307109.58it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 152077/152077 [00:00&lt;00:00, 672708.16it/s]\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 152077/152077 [00:03&lt;00:00, 47701.10it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 141799/141799 [00:23&lt;00:00, 6088.50it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 36411/36411 [00:00&lt;00:00, 226888.05it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 34012/34012 [00:00&lt;00:00, 56288.52it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 32172/32172 [00:00&lt;00:00, 87738.65it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 32172/32172 [00:08&lt;00:00, 3622.80it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 26632/26632 [00:00&lt;00:00, 184209.95it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 36520/36520 [00:03&lt;00:00, 10934.54it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 34380/34380 [00:00&lt;00:00, 529406.13it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 26335/26335 [00:09&lt;00:00, 2859.41it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 35324/35324 [00:00&lt;00:00, 149166.62it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 27279/27279 [00:00&lt;00:00, 97660.35it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 27279/27279 [00:04&lt;00:00, 6087.78it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 24920/24920 [00:00&lt;00:00, 58761.52it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 32513/32513 [00:01&lt;00:00, 20982.18it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 23585/23585 [00:00&lt;00:00, 141766.68it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 30677/30677 [00:00&lt;00:00, 700146.18it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 23133/23133 [00:05&lt;00:00, 4191.83it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 30750/30750 [00:00&lt;00:00, 43371.19it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 23206/23206 [00:00&lt;00:00, 119011.86it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 23206/23206 [00:01&lt;00:00, 12658.30it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 23083/23083 [00:00&lt;00:00, 621311.58it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 30654/30654 [00:00&lt;00:00, 131804.30it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 23066/23066 [00:00&lt;00:00, 503339.17it/s]"
  },
  {
    "objectID": "recipes/continuity/continuity_osm.html#observe-continuity-metrics",
    "href": "recipes/continuity/continuity_osm.html#observe-continuity-metrics",
    "title": "OSM",
    "section": "Observe continuity metrics",
    "text": "Observe continuity metrics\nWe can now run the contunity metrics\n\nimport matplotlib.pyplot as plt\n\nfrom cityseer.tools import io, plot\nfrom cityseer.metrics import observe\n\n# methods can be \"names\", \"routes\", \"highways\"\n\nprint(\"Continuity by street names\")\nG_cont, NamesContReport = observe.street_continuity(G_osm, method=\"names\")\nNamesContReport.report_by_count(n_items=5)\nNamesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by route numbers\")\nG_cont, RoutesContReport = observe.street_continuity(G_cont, method=\"routes\")\nRoutesContReport.report_by_count(n_items=5)\nRoutesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by highway types\")\nG_cont, HwyContReport = observe.street_continuity(G_cont, method=\"highways\")\nHwyContReport.report_by_count(n_items=5)\nHwyContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by overlapping routes and names types\")\nG_cont, HybridContReport = observe.hybrid_street_continuity(G_cont)\nHybridContReport.report_by_count(n_items=5)\nHybridContReport.report_by_length(n_items=5)\n\nINFO:cityseer.metrics.observe:Calculating metrics for names.\n\n\nContinuity by street names\n\n\n100%|██████████| 30519/30519 [00:00&lt;00:00, 44680.14it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 52 - harrow road\nINFO:cityseer.metrics.observe:Count: 50 - holloway road\nINFO:cityseer.metrics.observe:Count: 48 - king's road\nINFO:cityseer.metrics.observe:Count: 46 - wandsworth road\nINFO:cityseer.metrics.observe:Count: 44 - battersea park road\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 6.0km - westway\nINFO:cityseer.metrics.observe:Length: 5.02km - regent's canal towpath\nINFO:cityseer.metrics.observe:Length: 4.43km - outer circle\nINFO:cityseer.metrics.observe:Length: 3.95km - harrow road\nINFO:cityseer.metrics.observe:Length: 3.35km - finchley road\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n\n\nContinuity by route numbers\n\n\n100%|██████████| 30519/30519 [00:00&lt;00:00, 172552.22it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 174 - a4\nINFO:cityseer.metrics.observe:Count: 151 - a3220\nINFO:cityseer.metrics.observe:Count: 144 - a501\nINFO:cityseer.metrics.observe:Count: 107 - a400\nINFO:cityseer.metrics.observe:Count: 99 - a202\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 12.6km - a4\nINFO:cityseer.metrics.observe:Length: 10.95km - a3220\nINFO:cityseer.metrics.observe:Length: 9.0km - a501\nINFO:cityseer.metrics.observe:Length: 7.94km - a400\nINFO:cityseer.metrics.observe:Length: 7.71km - a202\n\n\nContinuity by highway types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for highways.\n100%|██████████| 30519/30519 [00:00&lt;00:00, 87953.52it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 13294 - residential\nINFO:cityseer.metrics.observe:Count: 6573 - service\nINFO:cityseer.metrics.observe:Count: 3200 - unclassified\nINFO:cityseer.metrics.observe:Count: 2650 - primary\nINFO:cityseer.metrics.observe:Count: 1963 - cycleway\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 1045.4km - residential\nINFO:cityseer.metrics.observe:Length: 428.53km - service\nINFO:cityseer.metrics.observe:Length: 243.57km - unclassified\nINFO:cityseer.metrics.observe:Length: 181.72km - primary\nINFO:cityseer.metrics.observe:Length: 167.71km - cycleway\n\n\nContinuity by overlapping routes and names types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n100%|██████████| 30519/30519 [00:00&lt;00:00, 140316.03it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 304 - a501\nINFO:cityseer.metrics.observe:Count: 281 - a202\nINFO:cityseer.metrics.observe:Count: 280 - a3220\nINFO:cityseer.metrics.observe:Count: 255 - a4\nINFO:cityseer.metrics.observe:Count: 170 - a400\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 22.66km - a501\nINFO:cityseer.metrics.observe:Length: 21.08km - a3220\nINFO:cityseer.metrics.observe:Length: 19.9km - a202\nINFO:cityseer.metrics.observe:Length: 19.06km - a4\nINFO:cityseer.metrics.observe:Length: 13.35km - a40\n\n\n\nfor method, shape_exp, descriptor, cmap, inverse, col_by_categ in zip(\n    [\"names\", \"routes\", \"highways\", \"hybrid\"],  #\n    [1, 0.75, 0.5, 1],  #\n    [\"Street names\", \"Routes\", \"Road types\", \"Hybrid routes & names\"],  #\n    [\"plasma\", \"viridis\", \"tab10\", \"tab10\"],  #\n    [False, False, True, False],  #\n    [False, False, True, True],\n):\n    print(f\"Plotting results for method: {method}\")\n    # plot\n    bg_colour = \"#1d1d1d\"\n    fig, axes = plt.subplots(\n        2, 1, dpi=150, figsize=(8, 12), facecolor=bg_colour, constrained_layout=True\n    )\n    fig.suptitle(\n        f\"OS Open Roads plotted by {descriptor} continuity\",\n        fontsize=\"small\",\n        ha=\"center\",\n    )\n    # by count\n    plot.plot_nx_edges(\n        axes[0],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_count\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[0].set_xlabel(f\"{descriptor} by count\", fontsize=\"x-small\")  # type: ignore\n    # by length\n    plot.plot_nx_edges(\n        axes[1],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_length\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[1].set_xlabel(f\"{descriptor} by length (metres)\", fontsize=\"x-small\")  # type: ignore\n    plt.show()\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: names\n\n\n30519it [00:00, 436173.32it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:03&lt;00:00, 9848.79it/s] \nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 515888.89it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:02&lt;00:00, 11225.09it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: routes\n\n\n30519it [00:00, 639530.98it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:02&lt;00:00, 10577.33it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 623780.34it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30519/30519 [00:02&lt;00:00, 10582.54it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: highways\n\n\n30519it [00:00, 583939.51it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:02&lt;00:00,  5.28it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 538861.30it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  5.67it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: hybrid\n\n\n30519it [00:00, 632900.20it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  6.20it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30519it [00:00, 686204.52it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  7.26it/s]"
  },
  {
    "objectID": "recipes/centrality/osm_centrality.html",
    "href": "recipes/centrality/osm_centrality.html",
    "title": "Network centrality from OSM data",
    "section": "",
    "text": "Calculate metric distance centralities for OSM data.\n\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import networks\nfrom cityseer.tools import graphs, io\n\nPrepare the network as shown in OSM examples. For example, from a relation id, bounding box, buffered point, or for extents defined from a loaded file. This example uses a buffered point.\nUsing a simplified representation is recommended, otherwise centrality measures will be distorted for “messier” portions of the network.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 1500\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\nG = io.osm_graph_from_poly(poly_wgs)\nG_dual = graphs.nx_to_dual(G)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n\n\nUse network_structure_from_nx from the cityseer package’s io module to prepare the GeoDataFrames and NetworkStructure.\n\n# prepare the data structures\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(\n    G_dual,\n)\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 6706 items.\n\n\nUse the node_centrality_shortest function from the cityseer package’s networks module to calculate shortest metric distance centralities.\n\nUse angular centralities with caution on automatically cleaned OSM networks, preferably only after visual inspection and manual cleaning.\n\n\ndistances = [500, 1000]\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\nnodes_gdf.head()\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 500m, Beta: 0.008, Walking Time: 6.25 minutes.\nINFO:cityseer.config:Distance: 1000m, Beta: 0.004, Walking Time: 12.5 minutes.\n\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\nprimal_edge\nprimal_edge_node_a\nprimal_edge_node_b\nprimal_edge_idx\ndual_node\n...\ncc_farness_500\ncc_farness_1000\ncc_harmonic_500\ncc_harmonic_1000\ncc_hillier_500\ncc_hillier_1000\ncc_betweenness_500\ncc_betweenness_1000\ncc_betweenness_beta_500\ncc_betweenness_beta_1000\n\n\n\n\n108285_108286_k0\n0\n698450.790070\n5.709384e+06\nTrue\n1\nLINESTRING (698442.587 5709352.756, 698457.019...\n108285\n108286\n0\nPOINT (698450.79007 5709383.911839)\n...\n5902.179688\n58297.644531\n0.205285\n0.283637\n0.142490\n0.145186\n0.0\n0.0\n0.000000\n0.000000\n\n\n108286_6226833739_k0\n1\n698445.179340\n5.709425e+06\nTrue\n1\nLINESTRING (698434.184 5709439.895, 698435.241...\n108286\n6226833739\n0\nPOINT (698445.17934 5709425.495934)\n...\n5099.849121\n59582.296875\n0.272599\n0.355433\n0.164907\n0.151471\n10.0\n10.0\n2.265440\n4.563673\n\n\n108286_1270370717±1784656260_k0\n2\n698462.371609\n5.709425e+06\nTrue\n1\nLINESTRING (698465.562 5709434.93, 698459.182 ...\n108286\n1270370717±1784656260\n0\nPOINT (698462.371609 5709424.972768)\n...\n5873.369141\n66387.937500\n0.310040\n0.401042\n0.163620\n0.162921\n32.0\n161.0\n8.085369\n20.560766\n\n\n1936005006_610896454±61089|05006_k0\n3\n698508.474675\n5.709425e+06\nTrue\n1\nLINESTRING (698494.235 5709445.995, 698518.821...\n1936005006\n610896454±61089|05006\n0\nPOINT (698508.474675 5709425.429823)\n...\n6557.249023\n66452.132812\n0.213808\n0.303199\n0.146555\n0.159649\n0.0\n0.0\n0.000000\n0.000000\n\n\n1784656176_6226833739_k0\n4\n698421.101261\n5.709460e+06\nTrue\n1\nLINESTRING (698434.184 5709439.895, 698432.763...\n6226833739\n1784656176\n0\nPOINT (698421.101261 5709459.670573)\n...\n5744.818359\n61325.531250\n0.265900\n0.349195\n0.167281\n0.156607\n63.0\n63.0\n14.625960\n29.263128\n\n\n\n\n5 rows × 26 columns\n\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_beta_500', 'cc_beta_1000', 'cc_cycles_500',\n       'cc_cycles_1000', 'cc_density_500', 'cc_density_1000', 'cc_farness_500',\n       'cc_farness_1000', 'cc_harmonic_500', 'cc_harmonic_1000',\n       'cc_hillier_500', 'cc_hillier_1000', 'cc_betweenness_500',\n       'cc_betweenness_1000', 'cc_betweenness_beta_500',\n       'cc_betweenness_beta_1000'],\n      dtype='object')\n\n\n\nnodes_gdf[\"cc_hillier_500\"].describe()\n\ncount    2847.000000\nmean        0.567491\nstd         0.212634\nmin         0.028749\n25%         0.424058\n50%         0.553027\n75%         0.710088\nmax         1.070101\nName: cc_hillier_500, dtype: float64\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_hillier_500\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(697035.8123208123),\n np.float64(700647.6928482385),\n np.float64(5709134.052621752),\n np.float64(5712638.694212982))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_betweenness_1000\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(697035.8123208123),\n np.float64(700647.6928482385),\n np.float64(5709134.052621752),\n np.float64(5712638.694212982))"
  },
  {
    "objectID": "recipes/centrality/centrality_metro.html",
    "href": "recipes/centrality/centrality_metro.html",
    "title": "Calculate centralities",
    "section": "",
    "text": "import geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import networks\nfrom cityseer.tools import graphs, io\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n\n\n\n# prepare the data structures\nnodes_gdf, edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 104026 items.\n\n\n\ndistances = [1000, 2000, 5000]\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\nfor col in nodes_gdf.columns:\n    if col.startswith(\"cc_\"):\n        nodes_gdf[f\"{col}_not\"] = nodes_gdf[col]\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 1000m, Beta: 0.004, Walking Time: 12.5 minutes.\nINFO:cityseer.config:Distance: 2000m, Beta: 0.002, Walking Time: 25.0 minutes.\nINFO:cityseer.config:Distance: 5000m, Beta: 0.0008, Walking Time: 62.5 minutes.\n\n\n\nnetwork_structure, stops, avg_stop_pairs = io.add_transport_gtfs(\n    \"data/madrid_gtfs/madrid_metro\",\n    network_structure,\n    nodes_gdf.crs,\n)\n\nINFO:cityseer.tools.io:Loading GTFS data from data/madrid_gtfs/madrid_metro\nINFO:cityseer.tools.io:Loaded 1272 stops and 2360 stop times\nINFO:cityseer.tools.io:Adding GTFS stops to network nodes (with street linking logic).\nINFO:cityseer.tools.io:Generating segment durations between stops.\nINFO:cityseer.tools.io:Adding GTFS segments to network edges.\nINFO:cityseer.graph:Edge R-tree built successfully with 104026 items.\n\n\n\nstops\n\n\n\n\n\n\n\n\nstop_id\nstop_code\nstop_name\nstop_desc\nstop_lat\nstop_lon\nzone_id\nstop_url\nlocation_type\nparent_station\nstop_timezone\nwheelchair_boarding\navg_wait_time\n\n\n\n\n0\ngtfs-data/madrid_gtfs/madrid_metro-par_4_1\n1\nPLAZA DE CASTILLA\nPaseo de la Castellana 189\n40.46690\n-3.68917\nA\nhttp://www.crtm.es\n0\nest_90_21\nNaN\n0\n430.357143\n\n\n1\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1\n1\nPlaza de Castilla\nPaseo de la Castellana 189\n40.46682\n-3.68918\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\n\n\n2\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1040\n1\nAscensor\nPlaza de Castilla 9\n40.46555\n-3.68877\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\n\n\n3\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1043\n1\nIntercambiador Superficie\nPaseo de la Castellana 191 B\n40.46728\n-3.68915\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\n\n\n4\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1044\n1\nAscensor\nPaseo de la Castellana 189\n40.46702\n-3.68918\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1267\ngtfs-data/madrid_gtfs/madrid_metro-est_4_234\n234\nHOSPITAL SEVERO OCHOA\nAvda Orellana 3\n40.32177\n-3.76797\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\n\n\n1268\ngtfs-data/madrid_gtfs/madrid_metro-est_4_235\n235\nLEGANES CENTRAL\nCalle Virgen del Camino 1\n40.32899\n-3.77154\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\n\n\n1269\ngtfs-data/madrid_gtfs/madrid_metro-est_4_236\n236\nSAN NICASIO\nAvda Mar Mediterráneo SN\n40.33616\n-3.77587\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\n\n\n1270\ngtfs-data/madrid_gtfs/madrid_metro-par_4_237\n237\nOPERA\nPlaza de Isabel II 9\n40.41809\n-3.70928\nA\nhttp://www.crtm.es\n0\nest_4_36\nNaN\n0\n13.214286\n\n\n1271\ngtfs-data/madrid_gtfs/madrid_metro-par_4_238\n238\nPRINCIPE PIO\nPaseo de la Florida 2\n40.42099\n-3.72033\nA\nhttp://www.crtm.es\n0\nest_90_18\nNaN\n1\n13.214286\n\n\n\n\n1272 rows × 13 columns\n\n\n\n\n# convert stops to geopandas\nstops_gdf = gpd.GeoDataFrame(\n    stops,\n    geometry=gpd.points_from_xy(stops[\"stop_lon\"], stops[\"stop_lat\"]),\n    crs=4326,  # Adjust the CRS to suit your data if needed\n)\nstops_gdf = stops_gdf.to_crs(streets_gpd.crs.to_epsg())\nstops_gdf\n\n\n\n\n\n\n\n\nstop_id\nstop_code\nstop_name\nstop_desc\nstop_lat\nstop_lon\nzone_id\nstop_url\nlocation_type\nparent_station\nstop_timezone\nwheelchair_boarding\navg_wait_time\ngeometry\n\n\n\n\n0\ngtfs-data/madrid_gtfs/madrid_metro-par_4_1\n1\nPLAZA DE CASTILLA\nPaseo de la Castellana 189\n40.46690\n-3.68917\nA\nhttp://www.crtm.es\n0\nest_90_21\nNaN\n0\n430.357143\nPOINT (441575.052 4479808.7)\n\n\n1\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1\n1\nPlaza de Castilla\nPaseo de la Castellana 189\n40.46682\n-3.68918\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441574.135 4479799.826)\n\n\n2\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1040\n1\nAscensor\nPlaza de Castilla 9\n40.46555\n-3.68877\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441607.793 4479658.584)\n\n\n3\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1043\n1\nIntercambiador Superficie\nPaseo de la Castellana 191 B\n40.46728\n-3.68915\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441577.077 4479850.867)\n\n\n4\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1044\n1\nAscensor\nPaseo de la Castellana 189\n40.46702\n-3.68918\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441574.308 4479822.026)\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1267\ngtfs-data/madrid_gtfs/madrid_metro-est_4_234\n234\nHOSPITAL SEVERO OCHOA\nAvda Orellana 3\n40.32177\n-3.76797\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\nPOINT (434754.721 4463754.488)\n\n\n1268\ngtfs-data/madrid_gtfs/madrid_metro-est_4_235\n235\nLEGANES CENTRAL\nCalle Virgen del Camino 1\n40.32899\n-3.77154\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\nPOINT (434458.401 4464558.532)\n\n\n1269\ngtfs-data/madrid_gtfs/madrid_metro-est_4_236\n236\nSAN NICASIO\nAvda Mar Mediterráneo SN\n40.33616\n-3.77587\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\nPOINT (434097.544 4465357.604)\n\n\n1270\ngtfs-data/madrid_gtfs/madrid_metro-par_4_237\n237\nOPERA\nPlaza de Isabel II 9\n40.41809\n-3.70928\nA\nhttp://www.crtm.es\n0\nest_4_36\nNaN\n0\n13.214286\nPOINT (439826.687 4474404.289)\n\n\n1271\ngtfs-data/madrid_gtfs/madrid_metro-par_4_238\n238\nPRINCIPE PIO\nPaseo de la Florida 2\n40.42099\n-3.72033\nA\nhttp://www.crtm.es\n0\nest_90_18\nNaN\n1\n13.214286\nPOINT (438891.852 4474733.771)\n\n\n\n\n1272 rows × 14 columns\n\n\n\n\nstops.avg_wait_time.describe()\n# count nan\nstops.avg_wait_time.isna().sum()\n# impute\n\nnp.int64(982)\n\n\n\navg_stop_pairs\n\n\n\n\n\n\n\n\nprev_stop_id\nnext_stop_id\navg_segment_time\n\n\n\n\n0\ngtfs-data/madrid_gtfs/madrid_metro-par_4_1\ngtfs-data/madrid_gtfs/madrid_metro-par_4_10\n92.0\n\n\n1\ngtfs-data/madrid_gtfs/madrid_metro-par_4_10\ngtfs-data/madrid_gtfs/madrid_metro-par_4_11\n80.0\n\n\n2\ngtfs-data/madrid_gtfs/madrid_metro-par_4_100\ngtfs-data/madrid_gtfs/madrid_metro-par_4_101\n86.5\n\n\n3\ngtfs-data/madrid_gtfs/madrid_metro-par_4_101\ngtfs-data/madrid_gtfs/madrid_metro-par_4_102\n126.5\n\n\n4\ngtfs-data/madrid_gtfs/madrid_metro-par_4_102\ngtfs-data/madrid_gtfs/madrid_metro-par_4_103\n184.0\n\n\n...\n...\n...\n...\n\n\n274\ngtfs-data/madrid_gtfs/madrid_metro-par_4_94\ngtfs-data/madrid_gtfs/madrid_metro-par_4_95\n110.0\n\n\n275\ngtfs-data/madrid_gtfs/madrid_metro-par_4_95\ngtfs-data/madrid_gtfs/madrid_metro-par_4_96\n107.5\n\n\n276\ngtfs-data/madrid_gtfs/madrid_metro-par_4_96\ngtfs-data/madrid_gtfs/madrid_metro-par_4_97\n104.5\n\n\n277\ngtfs-data/madrid_gtfs/madrid_metro-par_4_97\ngtfs-data/madrid_gtfs/madrid_metro-par_4_98\n93.0\n\n\n278\ngtfs-data/madrid_gtfs/madrid_metro-par_4_98\ngtfs-data/madrid_gtfs/madrid_metro-par_4_99\n116.5\n\n\n\n\n279 rows × 3 columns\n\n\n\nThe centrality methods can now be computed.\n\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 1000m, Beta: 0.004, Walking Time: 12.5 minutes.\nINFO:cityseer.config:Distance: 2000m, Beta: 0.002, Walking Time: 25.0 minutes.\nINFO:cityseer.config:Distance: 5000m, Beta: 0.0008, Walking Time: 62.5 minutes.\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_beta_1000', 'cc_beta_2000', 'cc_beta_5000',\n       'cc_cycles_1000', 'cc_cycles_2000', 'cc_cycles_5000', 'cc_density_1000',\n       'cc_density_2000', 'cc_density_5000', 'cc_farness_1000',\n       'cc_farness_2000', 'cc_farness_5000', 'cc_harmonic_1000',\n       'cc_harmonic_2000', 'cc_harmonic_5000', 'cc_hillier_1000',\n       'cc_hillier_2000', 'cc_hillier_5000', 'cc_betweenness_1000',\n       'cc_betweenness_2000', 'cc_betweenness_5000',\n       'cc_betweenness_beta_1000', 'cc_betweenness_beta_2000',\n       'cc_betweenness_beta_5000', 'cc_beta_1000_not', 'cc_beta_2000_not',\n       'cc_beta_5000_not', 'cc_cycles_1000_not', 'cc_cycles_2000_not',\n       'cc_cycles_5000_not', 'cc_density_1000_not', 'cc_density_2000_not',\n       'cc_density_5000_not', 'cc_farness_1000_not', 'cc_farness_2000_not',\n       'cc_farness_5000_not', 'cc_harmonic_1000_not', 'cc_harmonic_2000_not',\n       'cc_harmonic_5000_not', 'cc_hillier_1000_not', 'cc_hillier_2000_not',\n       'cc_hillier_5000_not', 'cc_betweenness_1000_not',\n       'cc_betweenness_2000_not', 'cc_betweenness_5000_not',\n       'cc_betweenness_beta_1000_not', 'cc_betweenness_beta_2000_not',\n       'cc_betweenness_beta_5000_not'],\n      dtype='object')\n\n\n\nnodes_gdf[\"cc_harmonic_1000_diff\"] = (\n    nodes_gdf[\"cc_harmonic_1000\"] - nodes_gdf[\"cc_harmonic_1000_not\"]\n)\n\n\nfig, axes = plt.subplots(3, 1, figsize=(8, 20), facecolor=\"#1d1d1d\")\n\nnodes_gdf.plot(\n    column=\"cc_harmonic_1000_not\",\n    cmap=\"magma\",\n    legend=True,\n    ax=axes[0],\n    vmax=5,\n)\naxes[0].set_title(\n    \"Harmonic Closeness Centrality without Metro Stops\",\n    fontsize=8,\n    color=\"#ddd\",\n)\nstops_gdf.plot(ax=axes[0], color=\"red\", markersize=1)\n\nnodes_gdf.plot(\n    column=\"cc_harmonic_1000\",\n    cmap=\"magma\",\n    legend=True,\n    ax=axes[1],\n    vmax=5,\n)\naxes[1].set_title(\n    \"Harmonic Closeness Centrality with Metro Stops\",\n    fontsize=8,\n    color=\"#ddd\",\n)\nstops_gdf.plot(ax=axes[1], color=\"red\", markersize=1)\n\nnodes_gdf.plot(\n    column=\"cc_harmonic_1000_diff\",\n    cmap=\"viridis\",\n    legend=True,\n    ax=axes[2],\n)\naxes[2].set_title(\n    \"Harmonic Closeness Centrality with difference due to Metro Stops\",\n    fontsize=8,\n    color=\"#ddd\",\n)\n\nfor ax in axes:\n    ax.set_xlim(438500, 438500 + 3500)\n    ax.set_ylim(4472500, 4472500 + 3500)\n    ax.axis(False)\n\nplt.tight_layout()"
  },
  {
    "objectID": "recipes/centrality/index.html",
    "href": "recipes/centrality/index.html",
    "title": "Network Centrality",
    "section": "",
    "text": "Once you have created a cityseer compatible networkx graph and the derivative NetworkStructure, you can calculate a variety of centrality metrics.",
    "crumbs": [
      "Cityseer Recipes",
      "Network Centrality"
    ]
  },
  {
    "objectID": "recipes/centrality/index.html#metric-distance-network-centrality",
    "href": "recipes/centrality/index.html#metric-distance-network-centrality",
    "title": "Network Centrality",
    "section": "Metric distance network centrality",
    "text": "Metric distance network centrality\nCalculate metric distance centralities from a geopandas GeoDataFrame.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Centrality"
    ]
  },
  {
    "objectID": "recipes/centrality/index.html#angular-distance-network-centrality",
    "href": "recipes/centrality/index.html#angular-distance-network-centrality",
    "title": "Network Centrality",
    "section": "Angular distance network centrality",
    "text": "Angular distance network centrality\nCalculate angular (geometric or “simplest”) distance centralities from a geopandas GeoDataFrame.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Centrality"
    ]
  },
  {
    "objectID": "recipes/centrality/index.html#network-centrality-from-osm-data",
    "href": "recipes/centrality/index.html#network-centrality-from-osm-data",
    "title": "Network Centrality",
    "section": "Network centrality from OSM data",
    "text": "Network centrality from OSM data\nCalculate metric distance centralities for OSM data.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Centrality"
    ]
  },
  {
    "objectID": "recipes/centrality/index.html#adding-gtfs-transport-data",
    "href": "recipes/centrality/index.html#adding-gtfs-transport-data",
    "title": "Network Centrality",
    "section": "Adding GTFS transport data",
    "text": "Adding GTFS transport data\n\nGTFS transport data support is still experimental.\n\nAdd GTFS transportation data to the network.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Centrality"
    ]
  },
  {
    "objectID": "recipes/index.html",
    "href": "recipes/index.html",
    "title": "Cityseer Guide",
    "section": "",
    "text": "This cookbook contains a collection of recipes to illustrate typical usage scenarios for cityseer.\nThe recipes build on each other, so if you are wondering why or how to do something, you may find the answers in another (typically preceding) recipe.\nPlease open an issue to request the addition of further examples for a given use-case.\n\nNetwork Preparation\ncityseer uses networkx MultiGraphs to represent pedestrian networks. In doing so, it embeds spatial information in the graph nodes and edges so that it can accurately manipulate the graphs and calculate derivative metrics.\nSee the Network Preparation page for examples of how to create a cityseer compatible networkx graph from:\n\nOSM data using bounding boxes, radii around points, or from a custom boundary file;\ngeopandas data including the use of geopandas to open and import files such as geopackages and shapefiles;\nImports from momepy and osmnx;\nAutomatic and manual network simplification;\nCasting primal networks to dual representations to model and visualise metrics using streets instead of intersections.\n\n\n\nMetrics\ncityseer converts the network into a rust data structure prior to computing derivative metrics. This is done to improve performance so that it can be used for larger cities with correspondingly larger data sets and networks.\nThis is done using network_structure_from_nx function which is available in the cityseer io module. You will see this method used in all of the following examples. Use of this method will result in three derivative data structures:\n\nA nodes GeoDataFrame with the graph’s nodes. This is used for saving the outputs of calculations, and makes it easy to export the outputs of calculations to files that can be used from QGIS or other GIS software and workflows.\nAn edges GeoDataFrame with the graph’s edges, including information that has been generated for the graph’s edges such as metric and angular distances, entry and exit angles, and the overall bearing of the edge.\nA cityseer NetworkStructure object which is used by cityseer for calculating the measures.\n\nOnce you’ve prepared the NetworkStructure object, you can use it over-and-over again to calculate a variety of centrality, accessibility, mixed-uses, and statistical metrics over the street network. The exception to this is when you change the input network, in which case you need to re-create the NetworkStructure object.\nUse of the dual representation is optional, but recommended. Keep in mind that if you’ve converted your networkx network into a dual representation, then the nodes GeoDataFrame will contain both the dual nodes (midpoints of streets) the primal edges. The primal edges will be set to the default geometry so that outputs can be visualised using the primal street geometries.\nNote that distances used when computing accessibilities, statistics, or other measures are all based on distances over the network. In the case of weighted variants, the distances used for the weighting process are the distances from each point of measure to the individual data points (such as land uses) under consideration.\n\nCentrality\nSee the Network Centrality page for examples of how to calculate a variety of shortest “metric” and simplest “angular” centrality metrics.\n\n\nAccessibility\nSee the Accessibility page for examples of how to calculate a variety of landuse accessibility and mixed-use metrics.\n\n\nStatistics\nSee the Statistics page for examples of how to calculate statistical metrics over the network.\n\n\n\nEdge Rolloff\nWhen calculating network or layer metrics, the network has to be buffered by a distance equal to the maximum distance threshold being considered by the algorithms. This prevents problematic results arising due to edge roll-off effects. For example, if running analysis using distances of 500, 1000, 2000m, then the network must be buffered by 2000m. When using data layers, the data points should — for the same reasons — cover these buffered extents as well.\nThe live=True node attribute is used for identifying nodes falling within the original non-buffered graph extents as opposed to the live=False nodes that fall within the surrounding buffered area. The underlying shortest-path algorithms will have access to both live=True and live=False nodes (thus preventing edge rolloff), but derivative metrics are only tabulated for live=True nodes. This eliminates edge roll-off effects, reduces unnecessary computation, and cleanly identifies which nodes are or are not in the buffered roll-off area. If some other post-processing step will be used for filtering the nodes, or if boundary roll-off is not being considered, then use the default behaviour where all nodes automatically set to live=True.\nHere is an example of how to set node status to live or not based on whether it intersects the original boundary.",
    "crumbs": [
      "Cityseer Recipes"
    ]
  },
  {
    "objectID": "recipes/networks/network_simplification.html",
    "href": "recipes/networks/network_simplification.html",
    "title": "Custom network simplification",
    "section": "",
    "text": "Manually configure network simplification steps and parameters.\nNetwork simplification helps to prevent distortions in centrality measures and can also be preferable for visualisation.\nWhile cleaning and simplifying the network, cityseer keeps track of intersection coordinates and street geometries and updates these in place, checking that the street alignments remain as accurate as possible. This is a complex undertaking that involves finding an approach intended to work for most situations. Manual inspection and cleaning is recommended as a final step for best results.\n\nfrom cityseer.tools import graphs, plot, io\n\nThe test area is taken from London Soho.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 1200\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\n\n\nOption 1 - Automatic simplification\nSimplification is automatic when using the osm_graph_from_poly function.\n\nG_auto = io.osm_graph_from_poly(poly_wgs, simplify=True)\nprint(G_auto)\nplot.plot_nx(\n    G_auto,\n    plot_geoms=True,\n    figsize=(10, 10),\n    x_lim=(698173, 699570),\n    y_lim=(5710085, 5711440),\n)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 16721/16721 [00:00&lt;00:00, 52954.11it/s]\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 15582/15582 [00:00&lt;00:00, 1151235.60it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 16721/16721 [00:00&lt;00:00, 18774.94it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 15582/15582 [00:00&lt;00:00, 23807.70it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 8611/8611 [00:00&lt;00:00, 1417748.84it/s]\n100%|██████████| 8611/8611 [00:00&lt;00:00, 10483.71it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 7472/7472 [00:00&lt;00:00, 64412.90it/s]\n100%|██████████| 5224/5224 [00:00&lt;00:00, 262883.11it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 6457/6457 [00:00&lt;00:00, 999727.61it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4729/4729 [00:00&lt;00:00, 1206793.84it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 298592.95it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4729/4729 [00:00&lt;00:00, 177436.03it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4700/4700 [00:00&lt;00:00, 1833618.16it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 33844.30it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4748/4748 [00:00&lt;00:00, 301562.06it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4740/4740 [00:00&lt;00:00, 1748395.12it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 145297.34it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4741/4741 [00:00&lt;00:00, 468946.21it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4741/4741 [00:00&lt;00:00, 1195742.35it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 90900.40it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4742/4742 [00:00&lt;00:00, 429140.82it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3753/3753 [00:00&lt;00:00, 55272.51it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 311942.11it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4742/4742 [00:00&lt;00:00, 55589.41it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 605129.09it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3715/3715 [00:00&lt;00:00, 55362.53it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3715/3715 [00:03&lt;00:00, 985.21it/s] \nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4326/4326 [00:00&lt;00:00, 71722.44it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3418/3418 [00:00&lt;00:00, 532407.29it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3391/3391 [00:00&lt;00:00, 55468.44it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3391/3391 [00:00&lt;00:00, 5271.49it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4167/4167 [00:00&lt;00:00, 230655.17it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3357/3357 [00:00&lt;00:00, 947720.17it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3349/3349 [00:00&lt;00:00, 59628.66it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3349/3349 [00:01&lt;00:00, 3085.00it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4077/4077 [00:00&lt;00:00, 277235.74it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3291/3291 [00:00&lt;00:00, 1072029.70it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3285/3285 [00:00&lt;00:00, 55230.46it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4064/4064 [00:00&lt;00:00, 1517597.17it/s]\nINFO:cityseer.tools.graphs:Snapping gapped endings.\n100%|██████████| 3285/3285 [00:00&lt;00:00, 16483.71it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4225/4225 [00:00&lt;00:00, 1510993.72it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3285/3285 [00:00&lt;00:00, 15411.61it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4886/4886 [00:00&lt;00:00, 469170.54it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 3658/3658 [00:00&lt;00:00, 643437.37it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3092/3092 [00:00&lt;00:00, 32576.30it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 3464/3464 [00:00&lt;00:00, 1682384.10it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2237/2237 [00:00&lt;00:00, 11791.13it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 3496/3496 [00:00&lt;00:00, 143108.11it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2237/2237 [00:00&lt;00:00, 58454.56it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2237/2237 [00:05&lt;00:00, 401.02it/s] \nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2721/2721 [00:00&lt;00:00, 40823.94it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2567/2567 [00:00&lt;00:00, 1930222.01it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1718/1718 [00:00&lt;00:00, 12688.79it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2572/2572 [00:00&lt;00:00, 351942.77it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1718/1718 [00:00&lt;00:00, 53980.99it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1718/1718 [00:03&lt;00:00, 560.17it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2210/2210 [00:00&lt;00:00, 62422.38it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1411/1411 [00:00&lt;00:00, 110839.48it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 2057/2057 [00:00&lt;00:00, 124765.85it/s]\nINFO:cityseer.tools.graphs:Ironing edges.\n100%|██████████| 2042/2042 [00:00&lt;00:00, 22811.04it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 2033/2033 [00:00&lt;00:00, 380857.57it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 1319/1319 [00:00&lt;00:00, 997707.30it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1306/1306 [00:00&lt;00:00, 274946.60it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 1276 nodes and 1990 edges\n\n\n100%|██████████| 1990/1990 [00:00&lt;00:00, 72305.56it/s]\n\n\n\n\n\n\n\n\n\n\n\nOption 2 - Automatic simplification with custom parameters\nosm_graph_from_poly accepts parameters which offer a certain amount of control over the simplification process. Altering the distances used for final_clean_distances will affect how aggressive the final round of network simplification is. The default is (5, 10). So, for example, adding 25 will make the simplification more aggressive.\nFootways and service roads intersecting green spaces are removed by default. This can be changed by setting green_footways and green_service_roads to True.\ncycleways is set to True by default because they sometimes provide important links within networks.\nThe below example uses more aggressive cleaning while not discarding green footways.\n\nG_params = io.osm_graph_from_poly(\n    poly_wgs,\n    simplify=True,\n    final_clean_distances=(5, 10, 25),  # adds 20\n    remove_disconnected=100,\n    cycleways=True,\n    busways=False,\n    green_footways=True,  # keeps\n    green_service_roads=False,\n)\nprint(G_params)\nplot.plot_nx(\n    G_params,\n    plot_geoms=True,\n    figsize=(10, 10),\n    x_lim=(698173, 699570),\n    y_lim=(5710085, 5711440),\n)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 16721/16721 [00:00&lt;00:00, 52195.89it/s]\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 15582/15582 [00:00&lt;00:00, 1139354.36it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 16721/16721 [00:00&lt;00:00, 18822.05it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 15582/15582 [00:00&lt;00:00, 23681.68it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 8611/8611 [00:00&lt;00:00, 1582627.92it/s]\n100%|██████████| 8611/8611 [00:00&lt;00:00, 10645.73it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 7472/7472 [00:00&lt;00:00, 63628.38it/s]\n100%|██████████| 5224/5224 [00:00&lt;00:00, 323988.88it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 6457/6457 [00:00&lt;00:00, 1179762.19it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4999/4999 [00:00&lt;00:00, 1521355.80it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3924/3924 [00:00&lt;00:00, 274421.82it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4999/4999 [00:00&lt;00:00, 40789.92it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4965/4965 [00:00&lt;00:00, 1664778.91it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3924/3924 [00:00&lt;00:00, 35331.22it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5013/5013 [00:00&lt;00:00, 272831.68it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5005/5005 [00:00&lt;00:00, 1552928.80it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3924/3924 [00:00&lt;00:00, 146232.33it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5006/5006 [00:00&lt;00:00, 486586.31it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5006/5006 [00:00&lt;00:00, 1334308.96it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3924/3924 [00:00&lt;00:00, 90707.15it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5007/5007 [00:00&lt;00:00, 444943.33it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3924/3924 [00:00&lt;00:00, 57815.69it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3924/3924 [00:00&lt;00:00, 299179.25it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5007/5007 [00:00&lt;00:00, 372712.88it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3924/3924 [00:00&lt;00:00, 269691.27it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3878/3878 [00:00&lt;00:00, 55101.65it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3878/3878 [00:04&lt;00:00, 928.90it/s] \nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4583/4583 [00:00&lt;00:00, 72578.53it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3581/3581 [00:00&lt;00:00, 580587.65it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3554/3554 [00:00&lt;00:00, 57969.46it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3554/3554 [00:00&lt;00:00, 5075.46it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4424/4424 [00:00&lt;00:00, 224684.88it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3520/3520 [00:00&lt;00:00, 985972.36it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3512/3512 [00:00&lt;00:00, 56913.23it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3512/3512 [00:01&lt;00:00, 2860.79it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4334/4334 [00:00&lt;00:00, 287401.00it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3454/3454 [00:00&lt;00:00, 1035016.50it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3448/3448 [00:00&lt;00:00, 58432.87it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4321/4321 [00:00&lt;00:00, 1488957.24it/s]\nINFO:cityseer.tools.graphs:Snapping gapped endings.\n100%|██████████| 3448/3448 [00:00&lt;00:00, 17414.59it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4481/4481 [00:00&lt;00:00, 1837211.75it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3448/3448 [00:00&lt;00:00, 15792.22it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5177/5177 [00:00&lt;00:00, 418500.76it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 3841/3841 [00:00&lt;00:00, 678643.65it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3284/3284 [00:00&lt;00:00, 32642.90it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 3750/3750 [00:00&lt;00:00, 1502975.63it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2415/2415 [00:00&lt;00:00, 11691.81it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 3784/3784 [00:00&lt;00:00, 147317.46it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2415/2415 [00:00&lt;00:00, 57181.17it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2415/2415 [00:06&lt;00:00, 362.26it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2993/2993 [00:00&lt;00:00, 44035.96it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2838/2838 [00:00&lt;00:00, 31884.74it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1882/1882 [00:00&lt;00:00, 13374.45it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2844/2844 [00:00&lt;00:00, 370453.43it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1882/1882 [00:00&lt;00:00, 57295.66it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1882/1882 [00:03&lt;00:00, 492.58it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2466/2466 [00:00&lt;00:00, 61899.10it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2399/2399 [00:00&lt;00:00, 1718554.28it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1560/1560 [00:00&lt;00:00, 11690.48it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2421/2421 [00:00&lt;00:00, 335450.10it/s]\nWARNING:cityseer.tools.graphs:Be cautious with large buffer distances when using crawl!\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1560/1560 [00:00&lt;00:00, 52985.40it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1560/1560 [00:03&lt;00:00, 486.45it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1976/1976 [00:00&lt;00:00, 43839.96it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1158/1158 [00:00&lt;00:00, 136505.55it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 1846/1846 [00:00&lt;00:00, 73277.17it/s]\nINFO:cityseer.tools.graphs:Ironing edges.\n100%|██████████| 1818/1818 [00:00&lt;00:00, 22250.24it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 1803/1803 [00:00&lt;00:00, 308477.67it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 1102/1102 [00:00&lt;00:00, 729271.54it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1097/1097 [00:00&lt;00:00, 306886.65it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 1076 nodes and 1778 edges\n\n\n100%|██████████| 1778/1778 [00:00&lt;00:00, 89553.43it/s]\n\n\n\n\n\n\n\n\n\n\n\nOption 3 - Custom OSM requests\nYou may want more control over the data request that is sent internally to the OSM Overpass API. This is possible by providing the custom_request argument. The Overpass API is useful for figuring out which tags you may want to include or exclude in your request.\nNote that the custom request must include a {geom_osm} placeholder, which will be replaced internally with the geometry of the area you are requesting data for.\n\nreq = \"\"\"\n    [out:json];\n    (way[\"highway\"]\n        [\"highway\"!~\"bus_guideway|busway|escape|raceway|proposed|planned|abandoned|platform|\n            emergency_bay|rest_area|disused|corridor|ladder|bus_stop|elevator|services\"]\n        [\"area\"!=\"yes\"]\n        [\"footway\"!=\"sidewalk\"]\n        [\"amenity\"!~\"charging_station|parking|fuel|motorcycle_parking|parking_entrance|parking_space\"]\n        [\"indoor\"!=\"yes\"]\n        [\"level\"!=\"-2\"]\n        [\"level\"!=\"-3\"]\n        [\"level\"!=\"-4\"]\n        [\"level\"!=\"-5\"](poly:\"{geom_osm}\");\n    );\n    out body;\n    &gt;;\n    out qt;\n\"\"\"\nG_req = io.osm_graph_from_poly(poly_wgs, simplify=True, custom_request=req)\nprint(G_req)\nplot.plot_nx(\n    G_req,\n    plot_geoms=True,\n    figsize=(10, 10),\n    x_lim=(698173, 699570),\n    y_lim=(5710085, 5711440),\n)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 16721/16721 [00:00&lt;00:00, 41785.16it/s]\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 15582/15582 [00:00&lt;00:00, 1165337.89it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 16721/16721 [00:00&lt;00:00, 17050.36it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 15582/15582 [00:00&lt;00:00, 23632.83it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 8611/8611 [00:00&lt;00:00, 1371658.95it/s]\n100%|██████████| 8611/8611 [00:00&lt;00:00, 10914.57it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 7472/7472 [00:00&lt;00:00, 61267.10it/s]\n100%|██████████| 5224/5224 [00:00&lt;00:00, 304518.84it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 6457/6457 [00:00&lt;00:00, 897310.35it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4729/4729 [00:00&lt;00:00, 1257440.32it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 299975.66it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4729/4729 [00:00&lt;00:00, 173337.73it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4700/4700 [00:00&lt;00:00, 1644002.07it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 34201.83it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4748/4748 [00:00&lt;00:00, 293141.32it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4740/4740 [00:00&lt;00:00, 1563832.37it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 143692.47it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4741/4741 [00:00&lt;00:00, 46165.73it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4741/4741 [00:00&lt;00:00, 1085377.18it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 89775.94it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4742/4742 [00:00&lt;00:00, 493962.24it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3753/3753 [00:00&lt;00:00, 59320.93it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 302343.71it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4742/4742 [00:00&lt;00:00, 436094.32it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3753/3753 [00:00&lt;00:00, 588061.23it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3715/3715 [00:00&lt;00:00, 55094.94it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3715/3715 [00:04&lt;00:00, 875.38it/s] \nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4326/4326 [00:00&lt;00:00, 71453.56it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3418/3418 [00:00&lt;00:00, 533914.23it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3391/3391 [00:00&lt;00:00, 54557.99it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3391/3391 [00:00&lt;00:00, 4624.76it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4167/4167 [00:00&lt;00:00, 223728.43it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3357/3357 [00:00&lt;00:00, 941635.69it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3349/3349 [00:00&lt;00:00, 54150.62it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3349/3349 [00:01&lt;00:00, 2923.54it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4077/4077 [00:00&lt;00:00, 259881.12it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3291/3291 [00:00&lt;00:00, 981544.08it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3285/3285 [00:00&lt;00:00, 54005.61it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4064/4064 [00:00&lt;00:00, 1474154.76it/s]\nINFO:cityseer.tools.graphs:Snapping gapped endings.\n100%|██████████| 3285/3285 [00:00&lt;00:00, 16668.71it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4225/4225 [00:00&lt;00:00, 1216929.98it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3285/3285 [00:00&lt;00:00, 14650.91it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4886/4886 [00:00&lt;00:00, 418967.36it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 3658/3658 [00:00&lt;00:00, 745771.84it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3092/3092 [00:00&lt;00:00, 32972.53it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 3464/3464 [00:00&lt;00:00, 1414985.30it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2237/2237 [00:00&lt;00:00, 11441.75it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 3496/3496 [00:00&lt;00:00, 137708.01it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2237/2237 [00:00&lt;00:00, 55918.05it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2237/2237 [00:06&lt;00:00, 357.55it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2721/2721 [00:00&lt;00:00, 39963.10it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2567/2567 [00:00&lt;00:00, 1487946.15it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1718/1718 [00:00&lt;00:00, 12582.95it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2572/2572 [00:00&lt;00:00, 358814.23it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1718/1718 [00:00&lt;00:00, 53992.72it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1718/1718 [00:03&lt;00:00, 506.75it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2210/2210 [00:00&lt;00:00, 61529.04it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1411/1411 [00:00&lt;00:00, 112538.28it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 2057/2057 [00:00&lt;00:00, 125340.43it/s]\nINFO:cityseer.tools.graphs:Ironing edges.\n100%|██████████| 2042/2042 [00:00&lt;00:00, 22462.32it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 2033/2033 [00:00&lt;00:00, 382720.83it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 1319/1319 [00:00&lt;00:00, 643064.86it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1306/1306 [00:00&lt;00:00, 182027.75it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 1276 nodes and 1990 edges\n\n\n100%|██████████| 1990/1990 [00:00&lt;00:00, 72579.70it/s]\n\n\n\n\n\n\n\n\n\n\n\nOption 4 - Manual simplification\nIf you need full control over the simplification process, you can use the following as a template for further configuring your cleaning recipe. This offers a large degree of control, but he precise combination of tags and distances involves a degree of experimentation and some inevitable trade-offs for a given area of interest.\nFor this approach, start with an unsimplified network, which will perform only rudimentary preparation.\n\nG_raw = io.osm_graph_from_poly(poly_wgs, simplify=False)\nprint(G_raw)\nplot.plot_nx(\n    G_raw,\n    plot_geoms=True,\n    figsize=(10, 10),\n    x_lim=(698173, 699570),\n    y_lim=(5710085, 5711440),\n)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 16721/16721 [00:00&lt;00:00, 52433.82it/s]\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 15582/15582 [00:00&lt;00:00, 1059506.28it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 16721/16721 [00:00&lt;00:00, 17653.83it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 15582/15582 [00:00&lt;00:00, 23599.05it/s]\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 7472 nodes and 8611 edges\n\n\n100%|██████████| 8611/8611 [00:00&lt;00:00, 27621.77it/s]\n\n\n\n\n\n\n\n\n\nThen manipulate the network depending on your needs. See the graphs module for further information what the various functions do.\n\nfrom cityseer import config\n\n# It is recommended to override validation during cleaning\n# This spares unnecessary repetition of validation checks\nconfig.SKIP_VALIDATION = True\n\n# deduplicate by hierarchy\nG = graphs.nx_deduplicate_edges(G_raw, dissolve_distance=20, max_ang_diff=20)\n# remove disconnected components\nG = graphs.nx_remove_dangling_nodes(G, despine=0, remove_disconnected=100)\n# clean by highway types - leave motorways alone\n# split only for a given type at a time\nfor dist, tags, max_angle in (\n    (28, [\"trunk\"], 45),\n    (24, [\"primary\"], 45),\n    (20, [\"secondary\"], 45),\n    (16, [\"tertiary\"], 45),\n):\n    G = graphs.nx_split_opposing_geoms(\n        G,\n        buffer_dist=dist,\n        squash_nodes=True,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=tags,\n        osm_matched_tags_only=True,\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\n# consolidate\nfor dist, tags, max_angle in (\n    (28, [\"trunk\"], 95),\n    (24, [\"trunk\", \"primary\"], 95),\n    (20, [\"trunk\", \"primary\", \"secondary\"], 95),\n    (16, [\"trunk\", \"primary\", \"secondary\", \"tertiary\"], 95),\n):\n    G = graphs.nx_consolidate_nodes(\n        G,\n        buffer_dist=dist,\n        crawl=False,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=tags,\n        osm_matched_tags_only=True,\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\n    G = graphs.nx_remove_filler_nodes(G)\n# snap gapped endings - don't clean danglers before this\nG = graphs.nx_snap_gapped_endings(\n    G,\n    osm_hwy_target_tags=[\n        \"residential\",\n        \"living_street\",\n        # \"service\", # intentionally omitted - e.g. parking lots\n        \"cycleway\",\n        \"bridleway\",\n        \"pedestrian\",\n        \"steps\",\n        \"footway\",\n        \"footway_green\",\n        \"footway_pedestrian\",  # plazas\n        \"path\",\n    ],\n    buffer_dist=20,\n)\n# snap gapped endings to roads - don't clean danglers before this\n# look for degree 1 dead-ends and link to nearby edges\nG = graphs.nx_split_opposing_geoms(\n    G,\n    buffer_dist=20,\n    osm_hwy_target_tags=[\n        # \"trunk\",  # intentionally omitted\n        \"primary\",\n        \"primary_link\",\n        \"secondary\",\n        \"secondary_link\",\n        \"tertiary\",\n        \"tertiary_link\",\n        \"residential\",\n        \"living_street\",\n        # \"service\", # intentionally omitted - e.g. parking lots\n        \"cycleway\",\n        \"bridleway\",\n        \"pedestrian\",\n        \"steps\",\n        \"footway\",\n        \"footway_green\",\n        \"footway_pedestrian\",  # plazas\n        \"path\",\n    ],\n    min_node_degree=1,\n    max_node_degree=1,\n    squash_nodes=False,\n)\n# remove danglers\nG = graphs.nx_remove_dangling_nodes(G, despine=40)\n# do smaller scale cleaning\nmax_angle = 120  # rue de nevers in Paris\nfor dist in (5, 10):\n    G = graphs.nx_split_opposing_geoms(\n        G,\n        buffer_dist=dist,\n        squash_nodes=True,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=[\n            # \"trunk\",  # intentionally omitted\n            \"primary\",\n            \"primary_link\",\n            \"secondary\",\n            \"secondary_link\",\n            \"tertiary\",\n            \"tertiary_link\",\n            \"residential\",\n            \"living_street\",\n            \"service\",\n            \"cycleway\",\n            \"bridleway\",\n            \"pedestrian\",\n            # \"steps\",\n            \"footway\",\n            \"footway_pedestrian\",  # plazas\n            \"path\",\n            \"unclassified\",\n        ],\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\n    G = graphs.nx_consolidate_nodes(\n        G,\n        buffer_dist=dist,\n        crawl=True,\n        centroid_by_itx=True,\n        osm_hwy_target_tags=[\n            \"trunk\",\n            \"trunk_link\",\n            \"primary\",\n            \"primary_link\",\n            \"secondary\",\n            \"secondary_link\",\n            \"tertiary\",\n            \"tertiary_link\",\n            \"residential\",\n            \"living_street\",\n            \"service\",\n            \"cycleway\",\n            \"bridleway\",\n            \"pedestrian\",\n            \"steps\",\n            \"footway\",\n            \"footway_pedestrian\",  # plazas\n            \"path\",\n            \"unclassified\",\n        ],\n        prioritise_by_hwy_tag=True,\n        simplify_by_max_angle=max_angle,\n    )\nG = graphs.nx_remove_filler_nodes(G)\nG = graphs.nx_merge_parallel_edges(\n    G, merge_edges_by_midline=True, contains_buffer_dist=50\n)\nG = graphs.nx_iron_edges(G, min_self_loop_length=100, max_foot_tunnel_length=100)\n# do this last to clean up any orphaned sub components\nG = graphs.nx_remove_dangling_nodes(G, despine=25)\n\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 8611/8611 [00:00&lt;00:00, 38266.71it/s]\n100%|██████████| 8611/8611 [00:01&lt;00:00, 8508.57it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 7472/7472 [00:00&lt;00:00, 39386.01it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 6457/6457 [00:00&lt;00:00, 1331823.01it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5020/5020 [00:00&lt;00:00, 1260727.27it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3940/3940 [00:00&lt;00:00, 274219.40it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5020/5020 [00:00&lt;00:00, 160240.23it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4987/4987 [00:00&lt;00:00, 670287.57it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3940/3940 [00:00&lt;00:00, 14755.90it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5035/5035 [00:00&lt;00:00, 274581.28it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5027/5027 [00:00&lt;00:00, 1270013.63it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3940/3940 [00:00&lt;00:00, 135687.84it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5028/5028 [00:00&lt;00:00, 380591.59it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5028/5028 [00:00&lt;00:00, 1287560.93it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3940/3940 [00:00&lt;00:00, 90137.60it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5029/5029 [00:00&lt;00:00, 429385.94it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3940/3940 [00:00&lt;00:00, 59391.90it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3940/3940 [00:00&lt;00:00, 266056.35it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5029/5029 [00:00&lt;00:00, 384602.78it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3940/3940 [00:00&lt;00:00, 473851.12it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3895/3895 [00:00&lt;00:00, 48015.84it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3895/3895 [00:04&lt;00:00, 850.98it/s] \nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4606/4606 [00:00&lt;00:00, 75415.51it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3598/3598 [00:00&lt;00:00, 567249.50it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3571/3571 [00:00&lt;00:00, 60083.52it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3571/3571 [00:00&lt;00:00, 5132.07it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4447/4447 [00:00&lt;00:00, 233793.81it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3537/3537 [00:00&lt;00:00, 945703.66it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3529/3529 [00:00&lt;00:00, 57151.62it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 3529/3529 [00:01&lt;00:00, 2769.40it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 4357/4357 [00:00&lt;00:00, 276422.72it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3471/3471 [00:00&lt;00:00, 732131.21it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 3465/3465 [00:00&lt;00:00, 57530.37it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4344/4344 [00:00&lt;00:00, 1353242.47it/s]\nINFO:cityseer.tools.graphs:Snapping gapped endings.\n100%|██████████| 3465/3465 [00:00&lt;00:00, 15664.98it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 4504/4504 [00:00&lt;00:00, 1295067.20it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 3465/3465 [00:00&lt;00:00, 14907.21it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 5199/5199 [00:00&lt;00:00, 402068.53it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 3858/3858 [00:00&lt;00:00, 799092.58it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3296/3296 [00:00&lt;00:00, 33692.06it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 3765/3765 [00:00&lt;00:00, 1319812.33it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2425/2425 [00:00&lt;00:00, 11565.25it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 3799/3799 [00:00&lt;00:00, 38760.19it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2425/2425 [00:00&lt;00:00, 57226.05it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2425/2425 [00:06&lt;00:00, 357.15it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 3001/3001 [00:00&lt;00:00, 46156.32it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2847/2847 [00:00&lt;00:00, 1607590.67it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1885/1885 [00:00&lt;00:00, 12694.73it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2855/2855 [00:00&lt;00:00, 353028.83it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1885/1885 [00:00&lt;00:00, 58585.74it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1885/1885 [00:03&lt;00:00, 477.44it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2444/2444 [00:00&lt;00:00, 64255.14it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1540/1540 [00:00&lt;00:00, 125849.55it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 2289/2289 [00:00&lt;00:00, 130276.98it/s]\nINFO:cityseer.tools.graphs:Ironing edges.\n100%|██████████| 2273/2273 [00:00&lt;00:00, 23793.33it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 2265/2265 [00:00&lt;00:00, 361646.75it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 1450/1450 [00:00&lt;00:00, 965969.00it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1437/1437 [00:00&lt;00:00, 299251.02it/s]\n\n\n\nplot.plot_nx(\n    G,\n    plot_geoms=True,\n    figsize=(10, 10),\n    x_lim=(698173, 699570),\n    y_lim=(5710085, 5711440),\n)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n100%|██████████| 2223/2223 [00:00&lt;00:00, 75885.81it/s]"
  },
  {
    "objectID": "recipes/networks/network_from_streets.html",
    "href": "recipes/networks/network_from_streets.html",
    "title": "Custom network from a streets dataset",
    "section": "",
    "text": "Use geopandas to open a street network file and convert it to a networkx graph.\nIf you have a street network file in a GeoPackage, shapefile, or similar format, then you can load this file and convert it to a networkx graph.\n\nimport geopandas as gpd\nfrom cityseer.tools import io, plot\n\nUse geopandas to load the street network file. Check that your file path is correct!\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd.head()\n\n\n\n\n\n\n\n\nGEODB_OID\nCDID\nCDMUNI\nCDVIAL\nCDTVIA\nDSPART\nDSVIAL\nDSVIAL_25\nDSVIAL_NOR\nCDVIAL_INE\nTIPOLOGIA\nGEOMETRY1_\ngeometry\n\n\n\n\n0\n2116085.0\n2116085.0\n049\n049A0246\nAvda\nde\nSan Pablo\nSan Pablo\nSAN PABLO\n00624\n35.0\n1424.530768\nMULTILINESTRING ((454855.882 4476818.629, 4548...\n\n\n1\n2116085.0\n2116085.0\n049\n049A0246\nAvda\nde\nSan Pablo\nSan Pablo\nSAN PABLO\n00624\n35.0\n1424.530768\nMULTILINESTRING ((454839.501 4476885.272, 4548...\n\n\n2\n2116085.0\n2116085.0\n049\n049A0246\nAvda\nde\nSan Pablo\nSan Pablo\nSAN PABLO\n00624\n35.0\n1424.530768\nMULTILINESTRING ((454833.577 4476910.504, 4548...\n\n\n3\n2116085.0\n2116085.0\n049\n049A0246\nAvda\nde\nSan Pablo\nSan Pablo\nSAN PABLO\n00624\n35.0\n1424.530768\nMULTILINESTRING ((454823.07 4476952.149, 45482...\n\n\n4\n2116085.0\n2116085.0\n049\n049A0246\nAvda\nde\nSan Pablo\nSan Pablo\nSAN PABLO\n00624\n35.0\n1424.530768\nMULTILINESTRING ((454817.822 4476974.014, 4548...\n\n\n\n\n\n\n\nTake note of you data CRS.\n\nepsg_code = streets_gpd.crs.to_epsg()\nprint(epsg_code)\nprint(streets_gpd.crs.is_projected)\n\n25830\nTrue\n\n\nIf your street network is not in a projected CRS, it is recommended to convert your dataset to a locally projected coordinate system. This can be done with the built-in to_crs method in geopandas. The EPSG code for the UTM zone can be found at epsg.io.\nAlternatively, you can project the graph after creation.\n\n# shown as example - unnecessary step for current dataset\nstreets_gpd = streets_gpd.to_crs(epsg=25830)\nprint(epsg_code)\nprint(streets_gpd.crs.is_projected)\n\n25830\nTrue\n\n\nTake note of the geometry type.\n\nstreets_gpd.geometry.type.unique()\n\narray(['MultiLineString'], dtype=object)\n\n\nIf your data consists of MultiLineString geometries, then these should first be converted to unnested LineString geometries.\n\nstreets_gpd = streets_gpd.explode(ignore_index=True)\nstreets_gpd.geometry.type.unique()\n\narray(['LineString'], dtype=object)\n\n\nUse the nx_from_generic_geopandas function to convert the geopandas LineStrings dataset to a networkx graph. This function will automatically create nodes and edges from the LineStrings in the dataset.\nThe function expects that all features are LineString geometries, where the geometries represent individual street segments that meet at intersections. Street segments which share endpoints will be connected by a node in the graph.\n\nG = io.nx_from_generic_geopandas(streets_gpd)\nprint(G)\n\n100%|██████████| 47155/47155 [00:06&lt;00:00, 7684.49it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 47129/47129 [00:00&lt;00:00, 280225.96it/s]\n\n\nMultiGraph with 31280 nodes and 47129 edges\n\n\n\nplot.plot_nx(\n    G,\n    plot_geoms=True,\n    x_lim=(438500, 438500 + 3500),\n    y_lim=(4472500, 4472500 + 3500),\n)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n100%|██████████| 47129/47129 [00:00&lt;00:00, 61490.78it/s]\n\n\n\n\n\n\n\n\n\nIf your data is not in a projected CRS (and if you did not already reproject the GeoDataFrame before creating the graph), then reproject your networkx graph to a locally projected coordinate system before doing further analysis.\nIf the data is currently in geographic longitudes and latitudes (WGS84 / 4326) then the nx_wgs_to_utm function can be used to convert it to the local UTM projection. Alternatively, the nx_epsg_conversion function can be used to specify input and output CRS.\n\n# shown as an example - unnecessary step for current dataset\nG_utm = io.nx_epsg_conversion(G, to_crs_code=32630)\nprint(G_utm)\n\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 31280/31280 [00:00&lt;00:00, 1153945.46it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 47129/47129 [00:03&lt;00:00, 15486.95it/s]\n\n\nMultiGraph with 31280 nodes and 47129 edges"
  },
  {
    "objectID": "recipes/networks/index.html",
    "href": "recipes/networks/index.html",
    "title": "Network Preparation",
    "section": "",
    "text": "The below examples illustrate how to create cityseer compatible networkx graphs from various data sources, including OpenStreetMap (OSM) data and geopandas GeoDataFrames. These workflows will automatically prepare the network for you, and this should be sufficient for the great majority of cases.\nIf you specifically wish to prepare the network manually:\nThe network nodes require x and y attributes storing the coordinates of the node in a projected coordinate system. You can also optionally add the following two attributes:\nFor edges, cityseer network representations contain a geom attribute which stores a shapely LineString geometry of the edge. cityseer will use the geom attribute to calculate properties of the network such as the lengths of streets and their angular deviations. For the best to results the topology of the graph should reflect the real world topology of the street network and should not be conflated with the geometric representation of the streets. Curvatures and turns within a street segment should be represented within the same LineString geometry rather than adding additional nodes and segments, which would otherwise distort the outcomes of centrality measures.\nThe first several examples use the osm_graph_from_poly function available from the cityseer package’s io module. This is a versatile function for generating networks from OSM data.",
    "crumbs": [
      "Cityseer Recipes",
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#osm-network-from-a-bounding-box",
    "href": "recipes/networks/index.html#osm-network-from-a-bounding-box",
    "title": "Network Preparation",
    "section": "OSM network from a bounding box",
    "text": "OSM network from a bounding box\nUse a bounding box to create a networkx graph from OpenStreetMap data. See this example for some use cases including how to use specific Coordinate Reference Systems.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#osm-network-from-a-buffered-coordinate",
    "href": "recipes/networks/index.html#osm-network-from-a-buffered-coordinate",
    "title": "Network Preparation",
    "section": "OSM network from a buffered coordinate",
    "text": "OSM network from a buffered coordinate\nUse a buffered point to create a networkx graph from OSM.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#osm-network-from-a-boundary-file",
    "href": "recipes/networks/index.html#osm-network-from-a-boundary-file",
    "title": "Network Preparation",
    "section": "OSM network from a boundary file",
    "text": "OSM network from a boundary file\nUse a custom boundary file to create a networkx graph from OSM.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#osm-network-from-a-relation-id",
    "href": "recipes/networks/index.html#osm-network-from-a-relation-id",
    "title": "Network Preparation",
    "section": "OSM network from a relation id",
    "text": "OSM network from a relation id\nUse an OSM relation id to create a networkx graph from OSM.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#custom-network-from-a-streets-dataset",
    "href": "recipes/networks/index.html#custom-network-from-a-streets-dataset",
    "title": "Network Preparation",
    "section": "Custom network from a streets dataset",
    "text": "Custom network from a streets dataset\nUse geopandas to open a street network file and convert it to a networkx graph.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#convert-a-network-from-osmnx",
    "href": "recipes/networks/index.html#convert-a-network-from-osmnx",
    "title": "Network Preparation",
    "section": "Convert a network from osmnx",
    "text": "Convert a network from osmnx\nConvert a network from osmnx to a cityseer compatible networkx graph.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#convert-a-network-from-momepy",
    "href": "recipes/networks/index.html#convert-a-network-from-momepy",
    "title": "Network Preparation",
    "section": "Convert a network from momepy",
    "text": "Convert a network from momepy\nConvert a network from momepy to a cityseer compatible networkx graph.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#saving-a-network-to-a-file",
    "href": "recipes/networks/index.html#saving-a-network-to-a-file",
    "title": "Network Preparation",
    "section": "Saving a network to a file",
    "text": "Saving a network to a file\nSave a networkx graph to a file.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#dual-graph-from-a-primal-graph",
    "href": "recipes/networks/index.html#dual-graph-from-a-primal-graph",
    "title": "Network Preparation",
    "section": "Dual graph from a primal graph",
    "text": "Dual graph from a primal graph\nCreate a dual graph representation from a primal graph.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/index.html#custom-network-simplification",
    "href": "recipes/networks/index.html#custom-network-simplification",
    "title": "Network Preparation",
    "section": "Custom network simplification",
    "text": "Custom network simplification\nFor purposes of network analysis, good sources of street network data, such as the Ordnance Survey’s OS Open Roads, typically have two distinguishing characteristics:\n\nThe network has been simplified to its essential structure: i.e. unnecessarily complex representations of intersections, on-ramps, divided roadways, etc., have been reduced to a simpler representation concurring more readily with the core topological structure of street networks.\nThe topology of the network is kept distinct from the geometry of the streets. Often-times, as can be seen with Open Street Map, additional nodes are added to streets to represent geometric twists and turns along a roadway. These additional nodes cause topological distortions that impact network centrality measures.\n\nWhen a high-quality source is available, it may be best not to attempt additional clean-up unless there is a particular rationale for doing so. On the other hand, cleaning and simplification is recommended when working with Open Street Map data. cityseer has an automated cleaning routine for OSM data, but it is also possible to manually configure network simplification steps and parameters as shown in the following notebook.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Network Preparation"
    ]
  },
  {
    "objectID": "recipes/networks/save_to_file.html",
    "href": "recipes/networks/save_to_file.html",
    "title": "Saving a network to a file",
    "section": "",
    "text": "Save a cityseer prepared networkx graph to a file.\nTo save a graph or to visualise it from QGIS, convert it to a GeoDataFrame and save it using geopandas.\nFirst, let’s create a simple OSM graph from a bounding box, using the same approach as before.\n\nfrom shapely import geometry\n\nfrom cityseer.tools import io\n\npoly_wgs = geometry.box(\n    -0.14115725966109327,\n    51.509220662095714,\n    -0.12676440185383622,\n    51.51820111033659,\n)\nG = io.osm_graph_from_poly(poly_wgs)\nprint(G)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 4040/4040 [00:00&lt;00:00, 51675.10it/s]\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 3735/3735 [00:00&lt;00:00, 1023836.71it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 4040/4040 [00:00&lt;00:00, 18823.10it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3735/3735 [00:00&lt;00:00, 24011.87it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2222/2222 [00:00&lt;00:00, 1494267.03it/s]\n100%|██████████| 2222/2222 [00:00&lt;00:00, 10737.09it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1917/1917 [00:00&lt;00:00, 67329.43it/s]\n100%|██████████| 1427/1427 [00:00&lt;00:00, 328049.98it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1687/1687 [00:00&lt;00:00, 1271480.84it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 1364/1364 [00:00&lt;00:00, 1726321.86it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1090/1090 [00:00&lt;00:00, 302787.69it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1364/1364 [00:00&lt;00:00, 301154.43it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 1362/1362 [00:00&lt;00:00, 1786875.84it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1090/1090 [00:00&lt;00:00, 33829.79it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1372/1372 [00:00&lt;00:00, 337354.03it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 1371/1371 [00:00&lt;00:00, 1830168.93it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1090/1090 [00:00&lt;00:00, 115563.09it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1372/1372 [00:00&lt;00:00, 507369.52it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 1372/1372 [00:00&lt;00:00, 1230664.05it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1090/1090 [00:00&lt;00:00, 88210.84it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1372/1372 [00:00&lt;00:00, 460698.51it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1090/1090 [00:00&lt;00:00, 54305.19it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1090/1090 [00:00&lt;00:00, 324401.57it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1372/1372 [00:00&lt;00:00, 531355.96it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1090/1090 [00:00&lt;00:00, 931687.66it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1087/1087 [00:00&lt;00:00, 57506.95it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1087/1087 [00:00&lt;00:00, 4431.35it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1269/1269 [00:00&lt;00:00, 80188.20it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1008/1008 [00:00&lt;00:00, 747367.59it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1003/1003 [00:00&lt;00:00, 57710.01it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1003/1003 [00:00&lt;00:00, 25783.97it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1229/1229 [00:00&lt;00:00, 244083.51it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 992/992 [00:00&lt;00:00, 1064130.32it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 990/990 [00:00&lt;00:00, 55910.50it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 990/990 [00:00&lt;00:00, 8382.09it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1201/1201 [00:00&lt;00:00, 281463.88it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 973/973 [00:00&lt;00:00, 1138052.93it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 972/972 [00:00&lt;00:00, 55574.90it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 1198/1198 [00:00&lt;00:00, 1657248.08it/s]\nINFO:cityseer.tools.graphs:Snapping gapped endings.\n100%|██████████| 972/972 [00:00&lt;00:00, 16148.17it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 1237/1237 [00:00&lt;00:00, 1212798.98it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 972/972 [00:00&lt;00:00, 15660.01it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1416/1416 [00:00&lt;00:00, 462441.37it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 1074/1074 [00:00&lt;00:00, 671739.11it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 889/889 [00:00&lt;00:00, 32969.95it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 984/984 [00:00&lt;00:00, 1828619.91it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 642/642 [00:00&lt;00:00, 11644.40it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 991/991 [00:00&lt;00:00, 157977.85it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 642/642 [00:00&lt;00:00, 57604.95it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 642/642 [00:00&lt;00:00, 1640.42it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 758/758 [00:00&lt;00:00, 42529.36it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 715/715 [00:00&lt;00:00, 1589256.68it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 487/487 [00:00&lt;00:00, 12877.48it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 715/715 [00:00&lt;00:00, 354357.48it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 487/487 [00:00&lt;00:00, 53568.65it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 487/487 [00:00&lt;00:00, 2046.42it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 638/638 [00:00&lt;00:00, 103187.67it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 413/413 [00:00&lt;00:00, 155735.64it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 611/611 [00:00&lt;00:00, 92858.89it/s]\nINFO:cityseer.tools.graphs:Ironing edges.\n100%|██████████| 605/605 [00:00&lt;00:00, 21146.28it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 605/605 [00:00&lt;00:00, 599044.83it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 395/395 [00:00&lt;00:00, 908305.96it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 392/392 [00:00&lt;00:00, 256060.92it/s]\n\n\nMultiGraph with 384 nodes and 594 edges\n\n\nUse the geopandas_from_nx function to convert the networkx dataset into a geopandas LineString GeoDataFrame.\n\nstreets_gpd = io.geopandas_from_nx(G)\nstreets_gpd.head()\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n\n\n\n\n\n\n\n\n\nnames\nroutes\nhighways\nlevels\nis_tunnel\nis_bridge\ngeom\nstart_nd_key\nend_nd_key\nedge_idx\n\n\n\n\n0\n[beak street]\n[]\n[unclassified]\n[0]\nFalse\nFalse\nLINESTRING (698573.946 5710658.889, 698597.952...\n108070\n25473512\n0\n\n\n1\n[beak street]\n[]\n[unclassified]\n[0]\nFalse\nFalse\nLINESTRING (698573.946 5710658.889, 698556.667...\n108070\n25473371\n0\n\n\n2\n[kingly court]\n[]\n[pedestrian, footway]\n[0]\nTrue\nFalse\nLINESTRING (698573.946 5710658.889, 698573.05 ...\n108070\n5568839679\n0\n\n\n3\n[upper john street]\n[]\n[unclassified]\n[0]\nFalse\nFalse\nLINESTRING (698573.946 5710658.889, 698575.964...\n108070\n25473286\n0\n\n\n4\n[great marlborough street]\n[]\n[tertiary]\n[0]\nFalse\nFalse\nLINESTRING (698482.48 5710892.514, 698538.717 ...\n9791491\n21665965\n0\n\n\n\n\n\n\n\nSince this is now a geopandas GeoDataFrame, you can use it accordingly.\n\nstreets_gpd.plot()\n\n\n\n\n\n\n\n\ngeopandas can now be used to save the file to disk, it can then be accessed and edited from an application such as QGIS.\n\nstreets_gpd.to_file(\n    \"temp/save_streets_demo.gpkg\",\n    driver=\"GPKG\",\n)\n\nINFO:pyogrio._io:Created 594 records"
  },
  {
    "objectID": "recipes/networks/momepy_to_cityseer.html",
    "href": "recipes/networks/momepy_to_cityseer.html",
    "title": "Convert a network from momepy",
    "section": "",
    "text": "Convert a network from momepy to a cityseer compatible networkx graph.\nThe process is for converting momepy networks is similar to that for opening street network datasets via geopandas.\n\nimport geopandas as gpd\nimport momepy\nfrom cityseer.tools import io, plot\n\n/Users/gareth/dev/cityseer-examples/.venv/lib/python3.12/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\nPrepare a momepy street network. Here we will use the momepy example dataset streets which is a GeoDataFrame of street segments.\n\nstreets_gpd = gpd.read_file(\n    momepy.datasets.get_path(\"bubenec\"),\n    layer=\"streets\",\n)\nstreets_gpd.head()\n\n\n\n\n\n\n\n\ngeometry\n\n\n\n\n0\nLINESTRING (1603585.64 6464428.774, 1603413.20...\n\n\n1\nLINESTRING (1603268.502 6464060.781, 1603296.8...\n\n\n2\nLINESTRING (1603607.303 6464181.853, 1603592.8...\n\n\n3\nLINESTRING (1603678.97 6464477.215, 1603675.68...\n\n\n4\nLINESTRING (1603537.194 6464558.112, 1603557.6...\n\n\n\n\n\n\n\n\nstreets_gpd.plot()\n\n\n\n\n\n\n\n\nUse the nx_from_generic_geopandas function to convert the geopandas LineStrings dataset to a networkx graph. This function will automatically create nodes and edges from the LineStrings in the dataset.\n\nG = io.nx_from_generic_geopandas(streets_gpd)\nprint(G)\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 29 nodes and 35 edges"
  },
  {
    "objectID": "recipes/accessibility/osm_accessibility_polys.html",
    "href": "recipes/accessibility/osm_accessibility_polys.html",
    "title": "Park accessibility from OSM data",
    "section": "",
    "text": "Calculate park accessibilities from OSM data.\nThis examples calculates park accessibility for London using OpenStreetMap Polygon data.\n\nfrom cityseer.metrics import layers\nfrom cityseer.tools import graphs, io\nimport matplotlib.pyplot as plt\nfrom osmnx import features\n\nTo start, follow the same approach as shown in the network examples to create the network.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 1500\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\nG = io.osm_graph_from_poly(poly_wgs)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 6706 items.\n\n\nPrepare the parks GeoDataFrame by downloading the data from OpenStreetMap. The osmnx features_from_polygon works well for this purpose. In this instance, we are specifically targeting features that are labelled as a leisure type of park. You can use the same idea to extract other features or land use types.\nIt is important to convert the derivative GeoDataFrame to the same CRS as the network.\n\ndata_gdf = features.features_from_polygon(poly_wgs, tags={\"leisure\": [\"park\"]})\ndata_gdf = data_gdf.to_crs(nodes_gdf.crs)\n# reset index\ndata_gdf = data_gdf.reset_index(level=0, drop=True)\n\ndata_gdf\n\n\n\n\n\n\n\n\ngeometry\nGBV\nbarrier\nleisure\nname\nwikidata\nwikimedia_commons\nwikipedia\naccess\nopening_hours\n...\nbottle\nhistoric\nloc_name\nname:cy\nname:zh\nfoot\nname:ja\nalt_name\ntype\nsurface\n\n\nid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5579381\nPOLYGON ((699189.384 5709943.8, 699189.043 570...\nNaN\nNaN\npark\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\ngrass\n\n\n3241371\nPOLYGON ((699470.032 5711728.944, 699463.775 5...\nActive\nfence\npark\nRussell Square\nQ1346906\nCategory:Russell_Square_Gardens\nen:Russell Square\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3241840\nPOLYGON ((699136.323 5712190.801, 699139.55 57...\nNaN\nfence\npark\nTavistock Square\nQ1936696\nNaN\nen:Tavistock Square\npermissive\n07:30-sunset\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4075108\nPOLYGON ((700241.772 5711256.088, 700243.597 5...\nNaN\nNaN\npark\nLincoln's Inn\nQ69482\nNaN\nen:Lincoln's Inn\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4081049\nPOLYGON ((697602.375 5710597.115, 697665.44 57...\nNaN\nNaN\npark\nGrosvenor Square\nQ932992\nNaN\nen:Grosvenor Square\nyes\nMo-Su 07:30-dusk\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4082589\nPOLYGON ((699169.133 5710522.521, 699170.334 5...\nNaN\nNaN\npark\nLeicester Square\nQ848912\nNaN\nen:Leicester Square\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4253286\nPOLYGON ((699082.827 5711964.714, 699083.941 5...\nNaN\nfence\npark\nWoburn Square\nQ8028979\nNaN\nen:Woburn Square\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4253288\nPOLYGON ((698963.988 5712061.606, 698963.808 5...\nNaN\nfence\npark\nGordon Square\nQ5585854\nNaN\nen:Gordon Square\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4253646\nPOLYGON ((699584.927 5711815.931, 699611.882 5...\nActive\nfence\npark\nQueen Square Gardens\nQ3414013\nNaN\nen:Queen Square, London\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4253657\nPOLYGON ((699910.437 5711532.233, 699874.943 5...\nNaN\nfence\npark\nRed Lion Square\nQ7304535\nNaN\nen:Red Lion Square\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4253887\nPOLYGON ((698115.449 5710348.292, 698119.405 5...\nNaN\nfence\npark\nBerkeley Square\nQ127212\nNaN\nen:Berkeley Square\nyes\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4253932\nPOLYGON ((699870.898 5710562.893, 699873.608 5...\nNaN\nNaN\npark\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4254099\nPOLYGON ((699716.747 5710187.296, 699727.176 5...\nNaN\nNaN\npark\nVictoria Embankment Gardens\nQ7926695\nCategory:Victoria_Embankment_Gardens\nen:Victoria Embankment Gardens\nyes\nJan 01-Feb 15 08:30-16:30,Feb 16-Feb 29 08:30-...\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4256229\nPOLYGON ((698615.632 5710615.991, 698633.72 57...\nNaN\nNaN\npark\nGolden Square\nQ5579811\nNaN\nen:Golden Square\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4256950\nPOLYGON ((699673.205 5710055.344, 699673.178 5...\nNaN\nNaN\npark\nWhitehall Garden\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4256953\nPOLYGON ((699632.625 5709861.45, 699609.71 570...\nNaN\nNaN\npark\nWhitehall Garden\nQ18901051\nNaN\nen:Privy Garden of the Palace of Whitehall\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4272920\nPOLYGON ((698780.057 5711434.937, 698778.086 5...\nNaN\nNaN\npark\nCrabtree Fields\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4358458\nPOLYGON ((698780.409 5710065.433, 698774.297 5...\nNaN\nNaN\npark\nSt James's Square Gardens\nQ500529\nNaN\nen:St James's Square\npermissive\nMo-Fr 10:00-16:30\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4373996\nPOLYGON ((699943.843 5709744.706, 699930.88 57...\nNaN\nNaN\npark\nJubilee Gardens\nQ2290816\nNaN\nNaN\npermissive\n24/7\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4393572\nPOLYGON ((699597.511 5711517.797, 699598.705 5...\nNaN\nfence\npark\nBloomsbury Square Gardens\nQ885408\nNaN\nen:Bloomsbury Square\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n30131571\nPOLYGON ((698717.644 5711636.424, 698722.347 5...\nNaN\nNaN\npark\nWhitfield Gardens\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n30613392\nPOLYGON ((700001.375 5711083.483, 699989.142 5...\nNaN\nfence\npark\nLincoln's Inn Fields\nQ2736153\nNaN\nen:Lincoln's Inn Fields\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n38310101\nPOLYGON ((698169.651 5710815.626, 698174.877 5...\nNaN\nNaN\npark\nHanover Square\nQ3783111\nNaN\nen:Hanover Square, Westminster\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n38318550\nPOLYGON ((697694.563 5710327.204, 697699.041 5...\nNaN\nNaN\npark\nMount Street Gardens\nQ6923901\nNaN\nen:Mount Street Gardens\nNaN\nMo-Sa 08:00-17:00; Su,PH 09:00-17:00\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n40879988\nPOLYGON ((698941.172 5710700.987, 698972.984 5...\nNaN\nNaN\npark\nSt Anne's Churchyard\nQ18748717\nNaN\nen:St Anne's Churchyard\nNaN\nweek 1-13 Mo-Su 10:00-16:00; week 14-43 10:00-...\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n41117901\nPOLYGON ((699231.843 5710970.608, 699225.581 5...\nNaN\nNaN\npark\nNaN\nNaN\nNaN\nNaN\nyes\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n55736532\nPOLYGON ((699677.177 5712135.764, 699677.997 5...\nNaN\nNaN\npark\nBrunswick Square Gardens\nQ4979544\nNaN\nen:Brunswick Square\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n55737057\nPOLYGON ((699889.676 5712020.139, 699885.9 571...\nNaN\nNaN\npark\nCoram's Fields\nQ1131898\nCategory:Coram's Fields\nen:Coram's Fields\nNaN\nNaN\n...\nno\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n87079253\nPOLYGON ((698284.966 5709536.508, 698293.537 5...\nNaN\nNaN\npark\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n148004650\nPOLYGON ((698126.464 5711132.172, 698126.288 5...\nNaN\nNaN\npark\nCavendish Square\nQ5055036\nNaN\nen:Cavendish Square\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n154116823\nPOLYGON ((697490.773 5711412.593, 697470.912 5...\nNaN\nNaN\npark\nPaddington Street Gardens South\nQ15265011\nNaN\nen:Paddington Street Gardens\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n161024051\nPOLYGON ((700293.75 5710609.096, 700295.862 57...\nNaN\nfence\npark\nVictoria Embankment Gardens\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n368199014\nPOLYGON ((698984.135 5711072.821, 698985.147 5...\nNaN\nfence\npark\nSoho Square Gardens\nQ2705335\nCategory:Soho_Square\nen:Soho Square\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n374960368\nPOLYGON ((698635.692 5709611.129, 698652.371 5...\nNaN\nNaN\npark\nSt. James's Park\nQ216914\nNaN\nen:St James's Park\nyes\nMo-Su 05:00-00:00\n...\nNaN\npark\nSt. James's Park\nParc Iago Sant\n圣詹姆士公园\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n374969316\nPOLYGON ((698857.167 5709732.666, 698824.199 5...\nNaN\nNaN\npark\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nyes\nNaN\nNaN\nNaN\nNaN\n\n\n383999575\nPOLYGON ((698502.689 5711443.431, 698530.335 5...\nNaN\nNaN\npark\nPearson Square\nQ67199266\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n747150853\nPOLYGON ((698874.805 5711610.457, 698884.695 5...\nNaN\nNaN\npark\nAlfred Place Gardens\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n803099035\nPOLYGON ((699279.695 5712391.179, 699278.264 5...\nNaN\nNaN\npark\nCartwright Gardens\nQ19600673\nNaN\nen:Cartwright Gardens\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nカートライト・ガーデンズ\nNaN\nNaN\nNaN\n\n\n863554956\nPOLYGON ((698548.21 5709661.801, 698533.411 57...\nNaN\nNaN\npark\nThe Green Park\nQ119892\nNaN\nen:Green Park\nNaN\nNaN\n...\nNaN\npark\nNaN\nNaN\n绿园\nNaN\nNaN\nGreen Park\nNaN\nNaN\n\n\n1066129483\nPOLYGON ((697725.772 5710203.851, 697729.543 5...\nNaN\nNaN\npark\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1098763494\nPOLYGON ((698632.144 5711655.736, 698650.639 5...\nNaN\nNaN\npark\nThe Poets' Park\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n41 rows × 50 columns\n\n\n\nOnce the data has been prepared, use the layers.compute_accessibilities method to compute accessibilities. The landuse_column_label and the target accessibility keys should correspond to the data in the input GeoDataFrame. Use the max_netw_assign_dist parameter to configurethe distance for network assignment.\n\n# compute pub accessibility\ndistances = [100, 200, 400, 800]\nnodes_gdf, data_gdf = layers.compute_accessibilities(\n    data_gdf,\n    landuse_column_label=\"leisure\",\n    accessibility_keys=[\"park\"],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing land-use accessibility for: park\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.data:Assigning 41 data entries to network nodes (max_dist: 100).\nINFO:cityseer.data:Collected 325 potential node assignments from data entries.\nINFO:cityseer.data:Finished assigning data. 325 assignments added to 306 nodes.\nINFO:cityseer.graph:Barriers unset and R-tree cleared.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 100m, Beta: 0.04, Walking Time: 1.25 minutes.\nINFO:cityseer.config:Distance: 200m, Beta: 0.02, Walking Time: 2.5 minutes.\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\nINFO:cityseer.config:Distance: 800m, Beta: 0.005, Walking Time: 10.0 minutes.\n\n\nThe output columns are named cc_{key}_{distance}_{type}. Where the keys will correspond to the input accessibility keys and the distances will correspond to the input distances. The types will correspond to either non-weighted nw or distance weighted wt count, or else the distance to the nearest instance of a given landuse.\nStandard GeoPandas functionality can be used to explore, visualise, or save the results.\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_park_100_nw', 'cc_park_100_wt', 'cc_park_200_nw',\n       'cc_park_200_wt', 'cc_park_400_nw', 'cc_park_400_wt', 'cc_park_800_nw',\n       'cc_park_800_wt', 'cc_park_nearest_max_800'],\n      dtype='object')\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_park_nearest_max_800\",\n    cmap=\"viridis_r\",\n    legend=False,\n    ax=ax,\n)\ndata_gdf.plot(\n    markersize=2,\n    edgecolor=None,\n    color=\"grey\",\n    legend=False,\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(697035.8123208123),\n np.float64(700647.6928482385),\n np.float64(5709138.304744158),\n np.float64(5712549.39964246))"
  },
  {
    "objectID": "recipes/accessibility/gpd_mixed_uses.html",
    "href": "recipes/accessibility/gpd_mixed_uses.html",
    "title": "Calculate mixed land-uses.",
    "section": "",
    "text": "Calculate mixed landuses from a geopandas GeoDataFrame.\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import layers\nfrom cityseer.tools import graphs, io\n\nTo start, follow the same approach as shown in the network examples to create the network.\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 104026 items.\n\n\nRead-in the dataset from the source Geopackage or Shapefile Geopandas.\n\nprems_gpd = gpd.read_file(\"data/madrid_premises/madrid_premises.gpkg\")\nprems_gpd.head()\n\n\n\n\n\n\n\n\nindex\nlocal_id\nlocal_distr_id\nlocal_distr_desc\nlocal_neighb_id\nlocal_neighb_desc\nlocal_neighb_code\nlocal_census_section_id\nlocal_census_section_desc\nsection_id\nsection_desc\ndivision_id\ndivision_desc\nepigraph_id\nepigraph_desc\neasting\nnorthing\ngeometry\n\n\n\n\n0\n0\n10003324\n1\nCENTRO\n105\nUNIVERSIDAD\n5\n1091\n91\nI\nhospitality\n56\nfood_bev\n561001\nRESTAURANTE\n440181.6\n4475586.5\nPOINT (440181.6 4475586.5)\n\n\n1\n1\n10003330\n1\nCENTRO\n105\nUNIVERSIDAD\n5\n1115\n115\nR\nart_rec_entert\n90\ncreat_entert\n900003\nTEATRO Y ACTIVIDADES ESCENICAS REALIZADAS EN D...\n440000.6\n4474761.5\nPOINT (440000.6 4474761.5)\n\n\n2\n2\n10003356\n1\nCENTRO\n104\nJUSTICIA\n4\n1074\n74\nI\nhospitality\n56\nfood_bev\n561004\nBAR RESTAURANTE\n440618.6\n4474692.5\nPOINT (440618.6 4474692.5)\n\n\n3\n3\n10003364\n1\nCENTRO\n104\nJUSTICIA\n4\n1075\n75\nG\nwholesale_retail_motor\n47\nretail\n472401\nCOMERCIO AL POR MENOR DE PAN Y PRODUCTOS DE PA...\n440666.6\n4474909.5\nPOINT (440666.6 4474909.5)\n\n\n4\n4\n10003367\n1\nCENTRO\n106\nSOL\n6\n1119\n119\nG\nwholesale_retail_motor\n47\nretail\n477701\nCOMERCIO AL POR MENOR DE JOYAS, RELOJERIA Y BI...\n440378.6\n4474380.5\nPOINT (440378.6 4474380.5)\n\n\n\n\n\n\n\nIdentify or prepare any columns and land uses of interest, for which you want to compute accessibilities.\n\nprems_gpd.division_desc.unique()\n\narray(['food_bev', 'creat_entert', 'retail', 'services', 'education',\n       'accommod', 'Real Estate Activities',\n       'Residential Care Activities',\n       'Social Services Without Accommodation',\n       'Graphic Arts and Reproduction of Recorded Media',\n       'Sale and Repair of Motor Vehicles and Motorcycles',\n       'Decontamination and Other Waste Management Services',\n       'Gambling and Betting Activities', 'sports_rec', 'health',\n       'Wholesale Trade and Middlemen, Except for Motor Vehicles and Motorcycles',\n       'Telecommunications',\n       'Financial Services, Except Insurance and Pension Funds',\n       'Associative Activities', 'Veterinary Activities',\n       'Auxiliary Services to Financial Services and Insurance',\n       'Insurance, Reinsurance, and Pension Funds, Except Compulsory Social Security',\n       'Rental Activities',\n       'Office Administrative and Other Business Support Activities',\n       'Technical Services of Architecture and Engineering; Technical Testing and Analysis',\n       'Other Manufacturing Industries',\n       'Storage and Activities Related to Transport',\n       'Specialized Construction Activities and Building Finishing',\n       'Clothing Manufacturing',\n       'Activities of Travel Agencies, Tour Operators, Reservation Services, and Related Activities',\n       'Land Transport and Pipeline Transport',\n       'Other Professional, Scientific, and Technical Activities',\n       'Computer Repair, Personal Effects, and Household Items',\n       'Publishing (Includes Software)', 'Postal and Courier Activities',\n       'Food Industry', 'Advertising and Market Research',\n       'Public Administration and Defense; Compulsory Social Security',\n       'Film, Video, and TV Program Activities, Sound Recording, and Music Publishing, Sound Recording and Music Publishing',\n       'Legal and Accounting Activities',\n       'Building Promotion and Construction',\n       'Supply of Electricity, Gas, Steam, and Air Conditioning',\n       'Activities of Libraries, Archives, Museums, and Other Cultural Activities',\n       'Paper Industry',\n       'Manufacturing of Computer, Electronic, and Optical Products',\n       'Security and Investigation Activities',\n       'Leather and Footwear Industry',\n       'Repair and Installation of Machinery and Equipment',\n       'Manufacturing of Metal Products, Except Machinery and Equipment',\n       'Furniture Manufacturing',\n       'Building Services and Gardening Activities', 'Chemical Industry',\n       'Programming, Consultancy, and Other Computer-Related Activities',\n       'Manufacturing of Other Non-Metallic Mineral Products',\n       'Textile Industry', 'Research and Development',\n       'Activities of Head Offices; Management Consultancy Activities',\n       'Pharmaceutical Product Manufacturing',\n       'Manufacturing of Machinery and Equipment N.E.C.',\n       'Manufacturing of Motor Vehicles, Trailers, and Semi-Trailers',\n       'Information Services',\n       'Manufacturing of Rubber and Plastic Products',\n       'Manufacturing of Electrical Equipment',\n       'Manufacturing of Other Transport Equipment', 'Civil Engineering',\n       'Wood and Cork Industry, Except Furniture; Basketry and Basketwork',\n       'Waste Collection, Treatment, and Disposal; Materials Recovery',\n       'Activities of Extraterritorial Organizations and Bodies',\n       'Air Transport', 'Employment Activities',\n       'Agriculture, Livestock, Hunting, and Related Service Activities',\n       'Metallurgy; Manufacturing of Iron, Steel, and Ferro-Alloy Products',\n       'Broadcasting and Television Programming and Broadcasting Activities',\n       'Wastewater Collection and Treatment', 'Beverage Manufacturing',\n       'Water Collection, Treatment, and Supply',\n       'Support Activities for Extractive Industries',\n       'Other Extractive Industries', 'Forestry and Logging',\n       'Tobacco Industry'], dtype=object)\n\n\nOnce the land use and network data has been prepared, use the layers.compute_mixed_uses method to compute accessibilities to land uses. The landuse_column_label should correspond to the data in the input GeoDataFrame.\n\n# compute pub accessibility\ndistances = [100, 200, 400, 800]\nnodes_gdf, prems_gpd = layers.compute_mixed_uses(\n    prems_gpd,\n    landuse_column_label=\"division_desc\",\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing mixed-use measures.\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.data:Assigning 117358 data entries to network nodes (max_dist: 100).\nINFO:cityseer.data:Collected 198773 potential node assignments from data entries.\nINFO:cityseer.data:Finished assigning data. 198773 assignments added to 24576 nodes.\nINFO:cityseer.graph:Barriers unset and R-tree cleared.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 100m, Beta: 0.04, Walking Time: 1.25 minutes.\nINFO:cityseer.config:Distance: 200m, Beta: 0.02, Walking Time: 2.5 minutes.\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\nINFO:cityseer.config:Distance: 800m, Beta: 0.005, Walking Time: 10.0 minutes.\n\n\nThe output columns are named cc_{key}_{distance}_{type}. Where the keys will correspond to the form of mixed-use measure and the distances will correspond to the input distances. The measures are available in non-weighted nw or distance weighted wt form.\nStandard GeoPandas functionality can be used to explore, visualise, or save the results.\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_hill_q0_100_nw', 'cc_hill_q0_100_wt',\n       'cc_hill_q1_100_nw', 'cc_hill_q1_100_wt', 'cc_hill_q2_100_nw',\n       'cc_hill_q2_100_wt', 'cc_hill_q0_200_nw', 'cc_hill_q0_200_wt',\n       'cc_hill_q1_200_nw', 'cc_hill_q1_200_wt', 'cc_hill_q2_200_nw',\n       'cc_hill_q2_200_wt', 'cc_hill_q0_400_nw', 'cc_hill_q0_400_wt',\n       'cc_hill_q1_400_nw', 'cc_hill_q1_400_wt', 'cc_hill_q2_400_nw',\n       'cc_hill_q2_400_wt', 'cc_hill_q0_800_nw', 'cc_hill_q0_800_wt',\n       'cc_hill_q1_800_nw', 'cc_hill_q1_800_wt', 'cc_hill_q2_800_nw',\n       'cc_hill_q2_800_wt'],\n      dtype='object')\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_hill_q0_400_wt\",\n    cmap=\"hot\",\n    legend=False,\n    ax=ax,\n)\nprems_gpd.plot(\n    column=\"division_desc\",\n    cmap=\"tab20\",\n    markersize=1,\n    edgecolor=None,\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(439000, 439000 + 2500)\nax.set_ylim(4473000, 4473000 + 2500)\nax.axis(False)\n\n(np.float64(439000.0),\n np.float64(441500.0),\n np.float64(4473000.0),\n np.float64(4475500.0))"
  },
  {
    "objectID": "recipes/accessibility/accessibility_metro.html",
    "href": "recipes/accessibility/accessibility_metro.html",
    "title": "Cityseer Guide",
    "section": "",
    "text": "import geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import layers\nfrom cityseer.tools import graphs, io\n\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 104026 items.\n\n\n\nprems_gpd = gpd.read_file(\"data/madrid_premises/madrid_premises.gpkg\")\nprems_gpd.head()\n\n\n\n\n\n\n\n\nindex\nlocal_id\nlocal_distr_id\nlocal_distr_desc\nlocal_neighb_id\nlocal_neighb_desc\nlocal_neighb_code\nlocal_census_section_id\nlocal_census_section_desc\nsection_id\nsection_desc\ndivision_id\ndivision_desc\nepigraph_id\nepigraph_desc\neasting\nnorthing\ngeometry\n\n\n\n\n0\n0\n10003324\n1\nCENTRO\n105\nUNIVERSIDAD\n5\n1091\n91\nI\nhospitality\n56\nfood_bev\n561001\nRESTAURANTE\n440181.6\n4475586.5\nPOINT (440181.6 4475586.5)\n\n\n1\n1\n10003330\n1\nCENTRO\n105\nUNIVERSIDAD\n5\n1115\n115\nR\nart_rec_entert\n90\ncreat_entert\n900003\nTEATRO Y ACTIVIDADES ESCENICAS REALIZADAS EN D...\n440000.6\n4474761.5\nPOINT (440000.6 4474761.5)\n\n\n2\n2\n10003356\n1\nCENTRO\n104\nJUSTICIA\n4\n1074\n74\nI\nhospitality\n56\nfood_bev\n561004\nBAR RESTAURANTE\n440618.6\n4474692.5\nPOINT (440618.6 4474692.5)\n\n\n3\n3\n10003364\n1\nCENTRO\n104\nJUSTICIA\n4\n1075\n75\nG\nwholesale_retail_motor\n47\nretail\n472401\nCOMERCIO AL POR MENOR DE PAN Y PRODUCTOS DE PA...\n440666.6\n4474909.5\nPOINT (440666.6 4474909.5)\n\n\n4\n4\n10003367\n1\nCENTRO\n106\nSOL\n6\n1119\n119\nG\nwholesale_retail_motor\n47\nretail\n477701\nCOMERCIO AL POR MENOR DE JOYAS, RELOJERIA Y BI...\n440378.6\n4474380.5\nPOINT (440378.6 4474380.5)\n\n\n\n\n\n\n\n\n# compute accessibility\ndistances = [800, 1600]\nnodes_gdf, prems_gpd = layers.compute_accessibilities(\n    prems_gpd,\n    landuse_column_label=\"division_desc\",\n    accessibility_keys=[\"retail\"],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n# keep a copy before adding GTFS for comparison\nfor col in nodes_gdf.columns:\n    if col.startswith(\"cc_\"):\n        nodes_gdf[f\"{col}_not\"] = nodes_gdf[col]\n\nINFO:cityseer.metrics.layers:Computing land-use accessibility for: retail\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.data:Assigning 117358 data entries to network nodes (max_dist: 100).\nINFO:cityseer.data:Finished assigning data. 198773 assignments added to 24576 nodes.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 800m, Beta: 0.005, Walking Time: 10.0 minutes.\nINFO:cityseer.config:Distance: 1600m, Beta: 0.0025, Walking Time: 20.0 minutes.\n\n\n\nnetwork_structure, stops, avg_stop_pairs = io.add_transport_gtfs(\n    \"data/madrid_gtfs/madrid_metro\",\n    network_structure,\n    nodes_gdf.crs,\n)\n\nINFO:cityseer.tools.io:Loading GTFS data from data/madrid_gtfs/madrid_metro\nINFO:cityseer.tools.io:Loaded 1272 stops and 2360 stop times\nINFO:cityseer.tools.io:Adding GTFS stops to network nodes (with street linking logic).\nINFO:cityseer.tools.io:Generating segment durations between stops.\nINFO:cityseer.tools.io:Adding GTFS segments to network edges.\nINFO:cityseer.graph:Edge R-tree built successfully with 104026 items.\n\n\n\n# convert stops to geopandas\nstops_gdf = gpd.GeoDataFrame(\n    stops,\n    geometry=gpd.points_from_xy(stops[\"stop_lon\"], stops[\"stop_lat\"]),\n    crs=4326,  # Adjust the CRS to suit your data if needed\n)\nstops_gdf = stops_gdf.to_crs(streets_gpd.crs.to_epsg())\nstops_gdf\n\n\n\n\n\n\n\n\nstop_id\nstop_code\nstop_name\nstop_desc\nstop_lat\nstop_lon\nzone_id\nstop_url\nlocation_type\nparent_station\nstop_timezone\nwheelchair_boarding\navg_wait_time\ngeometry\n\n\n\n\n0\ngtfs-data/madrid_gtfs/madrid_metro-par_4_1\n1\nPLAZA DE CASTILLA\nPaseo de la Castellana 189\n40.46690\n-3.68917\nA\nhttp://www.crtm.es\n0\nest_90_21\nNaN\n0\n430.357143\nPOINT (441575.052 4479808.7)\n\n\n1\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1\n1\nPlaza de Castilla\nPaseo de la Castellana 189\n40.46682\n-3.68918\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441574.135 4479799.826)\n\n\n2\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1040\n1\nAscensor\nPlaza de Castilla 9\n40.46555\n-3.68877\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441607.793 4479658.584)\n\n\n3\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1043\n1\nIntercambiador Superficie\nPaseo de la Castellana 191 B\n40.46728\n-3.68915\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441577.077 4479850.867)\n\n\n4\ngtfs-data/madrid_gtfs/madrid_metro-acc_4_1_1044\n1\nAscensor\nPaseo de la Castellana 189\n40.46702\n-3.68918\nNaN\nhttp://www.crtm.es\n2\nest_90_21\nNaN\n0\nNaN\nPOINT (441574.308 4479822.026)\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1267\ngtfs-data/madrid_gtfs/madrid_metro-est_4_234\n234\nHOSPITAL SEVERO OCHOA\nAvda Orellana 3\n40.32177\n-3.76797\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\nPOINT (434754.721 4463754.488)\n\n\n1268\ngtfs-data/madrid_gtfs/madrid_metro-est_4_235\n235\nLEGANES CENTRAL\nCalle Virgen del Camino 1\n40.32899\n-3.77154\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\nPOINT (434458.401 4464558.532)\n\n\n1269\ngtfs-data/madrid_gtfs/madrid_metro-est_4_236\n236\nSAN NICASIO\nAvda Mar Mediterráneo SN\n40.33616\n-3.77587\nB1\nhttp://www.crtm.es\n1\nNaN\nEurope/Madrid\n2\nNaN\nPOINT (434097.544 4465357.604)\n\n\n1270\ngtfs-data/madrid_gtfs/madrid_metro-par_4_237\n237\nOPERA\nPlaza de Isabel II 9\n40.41809\n-3.70928\nA\nhttp://www.crtm.es\n0\nest_4_36\nNaN\n0\n13.214286\nPOINT (439826.687 4474404.289)\n\n\n1271\ngtfs-data/madrid_gtfs/madrid_metro-par_4_238\n238\nPRINCIPE PIO\nPaseo de la Florida 2\n40.42099\n-3.72033\nA\nhttp://www.crtm.es\n0\nest_90_18\nNaN\n1\n13.214286\nPOINT (438891.852 4474733.771)\n\n\n\n\n1272 rows × 14 columns\n\n\n\n\nnodes_gdf, prems_gpd = layers.compute_accessibilities(\n    prems_gpd,\n    landuse_column_label=\"division_desc\",\n    accessibility_keys=[\"retail\"],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing land-use accessibility for: retail\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.data:Assigning 117358 data entries to network nodes (max_dist: 100).\nINFO:cityseer.data:Finished assigning data. 198773 assignments added to 24576 nodes.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 800m, Beta: 0.005, Walking Time: 10.0 minutes.\nINFO:cityseer.config:Distance: 1600m, Beta: 0.0025, Walking Time: 20.0 minutes.\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_retail_800_nw', 'cc_retail_800_wt',\n       'cc_retail_1600_nw', 'cc_retail_1600_wt', 'cc_retail_nearest_max_1600',\n       'cc_retail_800_nw_not', 'cc_retail_800_wt_not', 'cc_retail_1600_nw_not',\n       'cc_retail_1600_wt_not', 'cc_retail_nearest_max_1600_not'],\n      dtype='object')\n\n\n\nnodes_gdf[\"cc_retail_800_wt_diff\"] = (\n    nodes_gdf[\"cc_retail_800_wt\"] - nodes_gdf[\"cc_retail_800_wt_not\"]\n)\n\n\nfig, axes = plt.subplots(3, 1, figsize=(8, 20), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_retail_800_wt_not\",\n    cmap=\"magma\",\n    legend=True,\n    ax=axes[0],\n    vmax=450,\n)\naxes[0].set_title(\n    \"Retail Accessibility without Metro Stops\",\n    fontsize=8,\n    color=\"#ddd\",\n)\nstops_gdf.plot(ax=axes[0], color=\"red\", markersize=1)\n\nnodes_gdf.plot(\n    column=\"cc_retail_800_wt\",\n    cmap=\"magma\",\n    legend=True,\n    ax=axes[1],\n    vmax=450,\n)\naxes[1].set_title(\n    \"Retail Accessibility with Metro Stops\",\n    fontsize=8,\n    color=\"#ddd\",\n)\nstops_gdf.plot(ax=axes[1], color=\"red\", markersize=1)\n\nnodes_gdf.plot(\n    column=\"cc_retail_800_wt_diff\",\n    cmap=\"viridis\",\n    legend=True,\n    ax=axes[2],\n)\naxes[2].set_title(\n    \"Retail Accessibility with difference due to Metro Stops\",\n    fontsize=8,\n    color=\"#ddd\",\n)\n\nfor ax in axes:\n    prems_gpd[prems_gpd[\"division_desc\"] == \"retail\"].plot(\n        markersize=1,\n        edgecolor=None,\n        color=\"white\",\n        legend=False,\n        ax=ax,\n    )\n    ax.set_xlim(438500, 438500 + 3500)\n    ax.set_ylim(4472500, 4472500 + 3500)\n    ax.axis(False)\n\nplt.tight_layout()"
  },
  {
    "objectID": "recipes/accessibility/gpd_accessibility.html",
    "href": "recipes/accessibility/gpd_accessibility.html",
    "title": "Landuse accessibility from GeoPandas data",
    "section": "",
    "text": "Calculate landuse accessibilities from a geopandas GeoDataFrame.\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import layers\nfrom cityseer.tools import graphs, io\n\nTo start, follow the same approach as shown in the network examples to create the network.\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 104026 items.\n\n\nRead-in the dataset from the source Geopackage or Shapefile Geopandas.\n\nprems_gpd = gpd.read_file(\"data/madrid_premises/madrid_premises.gpkg\")\nprems_gpd.head()\n\n\n\n\n\n\n\n\nindex\nlocal_id\nlocal_distr_id\nlocal_distr_desc\nlocal_neighb_id\nlocal_neighb_desc\nlocal_neighb_code\nlocal_census_section_id\nlocal_census_section_desc\nsection_id\nsection_desc\ndivision_id\ndivision_desc\nepigraph_id\nepigraph_desc\neasting\nnorthing\ngeometry\n\n\n\n\n0\n0\n10003324\n1\nCENTRO\n105\nUNIVERSIDAD\n5\n1091\n91\nI\nhospitality\n56\nfood_bev\n561001\nRESTAURANTE\n440181.6\n4475586.5\nPOINT (440181.6 4475586.5)\n\n\n1\n1\n10003330\n1\nCENTRO\n105\nUNIVERSIDAD\n5\n1115\n115\nR\nart_rec_entert\n90\ncreat_entert\n900003\nTEATRO Y ACTIVIDADES ESCENICAS REALIZADAS EN D...\n440000.6\n4474761.5\nPOINT (440000.6 4474761.5)\n\n\n2\n2\n10003356\n1\nCENTRO\n104\nJUSTICIA\n4\n1074\n74\nI\nhospitality\n56\nfood_bev\n561004\nBAR RESTAURANTE\n440618.6\n4474692.5\nPOINT (440618.6 4474692.5)\n\n\n3\n3\n10003364\n1\nCENTRO\n104\nJUSTICIA\n4\n1075\n75\nG\nwholesale_retail_motor\n47\nretail\n472401\nCOMERCIO AL POR MENOR DE PAN Y PRODUCTOS DE PA...\n440666.6\n4474909.5\nPOINT (440666.6 4474909.5)\n\n\n4\n4\n10003367\n1\nCENTRO\n106\nSOL\n6\n1119\n119\nG\nwholesale_retail_motor\n47\nretail\n477701\nCOMERCIO AL POR MENOR DE JOYAS, RELOJERIA Y BI...\n440378.6\n4474380.5\nPOINT (440378.6 4474380.5)\n\n\n\n\n\n\n\nIdentify or prepare any columns and land uses of interest, for which you want to compute accessibilities.\n\nprems_gpd.division_desc.unique()\n\narray(['food_bev', 'creat_entert', 'retail', 'services', 'education',\n       'accommod', 'Real Estate Activities',\n       'Residential Care Activities',\n       'Social Services Without Accommodation',\n       'Graphic Arts and Reproduction of Recorded Media',\n       'Sale and Repair of Motor Vehicles and Motorcycles',\n       'Decontamination and Other Waste Management Services',\n       'Gambling and Betting Activities', 'sports_rec', 'health',\n       'Wholesale Trade and Middlemen, Except for Motor Vehicles and Motorcycles',\n       'Telecommunications',\n       'Financial Services, Except Insurance and Pension Funds',\n       'Associative Activities', 'Veterinary Activities',\n       'Auxiliary Services to Financial Services and Insurance',\n       'Insurance, Reinsurance, and Pension Funds, Except Compulsory Social Security',\n       'Rental Activities',\n       'Office Administrative and Other Business Support Activities',\n       'Technical Services of Architecture and Engineering; Technical Testing and Analysis',\n       'Other Manufacturing Industries',\n       'Storage and Activities Related to Transport',\n       'Specialized Construction Activities and Building Finishing',\n       'Clothing Manufacturing',\n       'Activities of Travel Agencies, Tour Operators, Reservation Services, and Related Activities',\n       'Land Transport and Pipeline Transport',\n       'Other Professional, Scientific, and Technical Activities',\n       'Computer Repair, Personal Effects, and Household Items',\n       'Publishing (Includes Software)', 'Postal and Courier Activities',\n       'Food Industry', 'Advertising and Market Research',\n       'Public Administration and Defense; Compulsory Social Security',\n       'Film, Video, and TV Program Activities, Sound Recording, and Music Publishing, Sound Recording and Music Publishing',\n       'Legal and Accounting Activities',\n       'Building Promotion and Construction',\n       'Supply of Electricity, Gas, Steam, and Air Conditioning',\n       'Activities of Libraries, Archives, Museums, and Other Cultural Activities',\n       'Paper Industry',\n       'Manufacturing of Computer, Electronic, and Optical Products',\n       'Security and Investigation Activities',\n       'Leather and Footwear Industry',\n       'Repair and Installation of Machinery and Equipment',\n       'Manufacturing of Metal Products, Except Machinery and Equipment',\n       'Furniture Manufacturing',\n       'Building Services and Gardening Activities', 'Chemical Industry',\n       'Programming, Consultancy, and Other Computer-Related Activities',\n       'Manufacturing of Other Non-Metallic Mineral Products',\n       'Textile Industry', 'Research and Development',\n       'Activities of Head Offices; Management Consultancy Activities',\n       'Pharmaceutical Product Manufacturing',\n       'Manufacturing of Machinery and Equipment N.E.C.',\n       'Manufacturing of Motor Vehicles, Trailers, and Semi-Trailers',\n       'Information Services',\n       'Manufacturing of Rubber and Plastic Products',\n       'Manufacturing of Electrical Equipment',\n       'Manufacturing of Other Transport Equipment', 'Civil Engineering',\n       'Wood and Cork Industry, Except Furniture; Basketry and Basketwork',\n       'Waste Collection, Treatment, and Disposal; Materials Recovery',\n       'Activities of Extraterritorial Organizations and Bodies',\n       'Air Transport', 'Employment Activities',\n       'Agriculture, Livestock, Hunting, and Related Service Activities',\n       'Metallurgy; Manufacturing of Iron, Steel, and Ferro-Alloy Products',\n       'Broadcasting and Television Programming and Broadcasting Activities',\n       'Wastewater Collection and Treatment', 'Beverage Manufacturing',\n       'Water Collection, Treatment, and Supply',\n       'Support Activities for Extractive Industries',\n       'Other Extractive Industries', 'Forestry and Logging',\n       'Tobacco Industry'], dtype=object)\n\n\nOnce the land use and network data has been prepared, use the layers.compute_accessibilities method to compute accessibilities to land uses. The landuse_column_label and the target accessibility keys should correspond to the data in the input GeoDataFrame.\n\n# compute accessibility\ndistances = [100, 200, 400, 800]\nnodes_gdf, prems_gpd = layers.compute_accessibilities(\n    prems_gpd,\n    landuse_column_label=\"division_desc\",\n    accessibility_keys=[\"food_bev\", \"creat_entert\", \"retail\"],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing land-use accessibility for: food_bev, creat_entert, retail\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.data:Assigning 117358 data entries to network nodes (max_dist: 100).\nINFO:cityseer.data:Collected 198773 potential node assignments from data entries.\nINFO:cityseer.data:Finished assigning data. 198773 assignments added to 24576 nodes.\nINFO:cityseer.graph:Barriers unset and R-tree cleared.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 100m, Beta: 0.04, Walking Time: 1.25 minutes.\nINFO:cityseer.config:Distance: 200m, Beta: 0.02, Walking Time: 2.5 minutes.\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\nINFO:cityseer.config:Distance: 800m, Beta: 0.005, Walking Time: 10.0 minutes.\n\n\nThe output columns are named cc_{key}_{distance}_{type}. Where the keys will correspond to the input accessibility keys and the distances will correspond to the input distances. The types will correspond to either non-weighted nw or distance weighted wt count, or else the distance to the nearest instance of a given landuse.\nStandard GeoPandas functionality can be used to explore, visualise, or save the results.\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_food_bev_100_nw', 'cc_food_bev_100_wt',\n       'cc_food_bev_200_nw', 'cc_food_bev_200_wt', 'cc_food_bev_400_nw',\n       'cc_food_bev_400_wt', 'cc_food_bev_800_nw', 'cc_food_bev_800_wt',\n       'cc_food_bev_nearest_max_800', 'cc_creat_entert_100_nw',\n       'cc_creat_entert_100_wt', 'cc_creat_entert_200_nw',\n       'cc_creat_entert_200_wt', 'cc_creat_entert_400_nw',\n       'cc_creat_entert_400_wt', 'cc_creat_entert_800_nw',\n       'cc_creat_entert_800_wt', 'cc_creat_entert_nearest_max_800',\n       'cc_retail_100_nw', 'cc_retail_100_wt', 'cc_retail_200_nw',\n       'cc_retail_200_wt', 'cc_retail_400_nw', 'cc_retail_400_wt',\n       'cc_retail_800_nw', 'cc_retail_800_wt', 'cc_retail_nearest_max_800'],\n      dtype='object')\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_retail_400_wt\",\n    cmap=\"inferno\",\n    legend=False,\n    ax=ax,\n)\nprems_gpd[prems_gpd[\"division_desc\"] == \"retail\"].plot(\n    markersize=1,\n    edgecolor=None,\n    color=\"white\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(439000, 439000 + 2500)\nax.set_ylim(4473000, 4473000 + 2500)\nax.axis(False)\n\n(np.float64(439000.0),\n np.float64(441500.0),\n np.float64(4473000.0),\n np.float64(4475500.0))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_food_bev_200_wt\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nprems_gpd[prems_gpd[\"division_desc\"] == \"food_bev\"].plot(\n    markersize=1,\n    edgecolor=None,\n    color=\"white\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(439000, 439000 + 2500)\nax.set_ylim(4473000, 4473000 + 2500)\nax.axis(False)\n\n(np.float64(439000.0),\n np.float64(441500.0),\n np.float64(4473000.0),\n np.float64(4475500.0))\n\n\n\n\n\n\n\n\n\n\nnodes_gdf[\"cc_creat_entert_nearest_max_800\"].fillna(800, inplace=True)\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_creat_entert_nearest_max_800\",\n    cmap=\"viridis_r\",\n    legend=False,\n    ax=ax,\n)\nprems_gpd[prems_gpd[\"division_desc\"] == \"creat_entert\"].plot(\n    markersize=2,\n    edgecolor=None,\n    color=\"white\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(439000, 439000 + 2500)\nax.set_ylim(4473000, 4473000 + 2500)\nax.axis(False)\n\n/var/folders/9_/5x31j5x55819zxycf85n4cp40000gq/T/ipykernel_40677/3453596325.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nodes_gdf[\"cc_creat_entert_nearest_max_800\"].fillna(800, inplace=True)\n\n\n(np.float64(439000.0),\n np.float64(441500.0),\n np.float64(4473000.0),\n np.float64(4475500.0))"
  },
  {
    "objectID": "recipes/accessibility/index.html",
    "href": "recipes/accessibility/index.html",
    "title": "Accessibilities",
    "section": "",
    "text": "The following two examples use the layers.compute_accessibilities method to compute accessibilities to land uses. In general, the same network pre-processing steps can be followed as shown for these network preparation steps or for the network centrality steps. A data set is their necessary for identifying the locations of different land uses and it is the impossible to compete accessibilities over the network using the layers.compute_accessibilities method.\nThis method requires:\nThe output GeoDataFrame will contain new columns for each landuse in the following three forms.\nThe last example follows a similar approach, but computes mixed land-uses using the layers.compute_mixed_uses method.",
    "crumbs": [
      "Cityseer Recipes",
      "Accessibilities"
    ]
  },
  {
    "objectID": "recipes/accessibility/index.html#landuse-accessibility-from-geopandas-data",
    "href": "recipes/accessibility/index.html#landuse-accessibility-from-geopandas-data",
    "title": "Accessibilities",
    "section": "Landuse accessibility from geopandas data",
    "text": "Landuse accessibility from geopandas data\nCalculate landuse accessibilities from a geopandas GeoDataFrame.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Accessibilities"
    ]
  },
  {
    "objectID": "recipes/accessibility/index.html#landuse-accessibility-from-osm-data",
    "href": "recipes/accessibility/index.html#landuse-accessibility-from-osm-data",
    "title": "Accessibilities",
    "section": "Landuse accessibility from OSM data",
    "text": "Landuse accessibility from OSM data\nCalculate landuse accessibilities from OpenStreetMap.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Accessibilities"
    ]
  },
  {
    "objectID": "recipes/accessibility/index.html#parks-accessibility-from-osm-data",
    "href": "recipes/accessibility/index.html#parks-accessibility-from-osm-data",
    "title": "Accessibilities",
    "section": "Parks accessibility from OSM data",
    "text": "Parks accessibility from OSM data\nCalculate park accessibilities from OSM Polygon data.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Accessibilities"
    ]
  },
  {
    "objectID": "recipes/accessibility/index.html#calculating-mixed-uses",
    "href": "recipes/accessibility/index.html#calculating-mixed-uses",
    "title": "Accessibilities",
    "section": "Calculating mixed-uses",
    "text": "Calculating mixed-uses\nCalculate mixed land-uses.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Accessibilities"
    ]
  },
  {
    "objectID": "recipes/accessibility/index.html#adding-gtfs-transport-data",
    "href": "recipes/accessibility/index.html#adding-gtfs-transport-data",
    "title": "Accessibilities",
    "section": "Adding GTFS transport data",
    "text": "Adding GTFS transport data\n\nGTFS transport data support is still experimental.\n\nAdd GTFS transportation data to the network.\nNotebook",
    "crumbs": [
      "Cityseer Recipes",
      "Accessibilities"
    ]
  },
  {
    "objectID": "recipes/accessibility/osm_accessibility.html",
    "href": "recipes/accessibility/osm_accessibility.html",
    "title": "Landuse accessibility from OSM data",
    "section": "",
    "text": "Calculate landuse accessibilities from OSM data.\nThis examples calculates landuse accessibility to pubs and restaurants for London using OpenStreetMap data.\n\nfrom cityseer.metrics import layers\nfrom cityseer.tools import graphs, io\nimport matplotlib.pyplot as plt\nfrom osmnx import features\n\nTo start, follow the same approach as shown in the network examples to create the network.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 1500\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\nG = io.osm_graph_from_poly(poly_wgs)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 6706 items.\n\n\nPrepare the amenities GeoDataFrame by downloading the data from OpenStreetMap. The osmnx features_from_polygon works well for this purpose. In this instance, we are specifically targeting features that are labelled as an amenity type of either pub or restaurant. You can use the same idea to extract other features or land use types.\nIt is important to convert the derivative GeoDataFrame to the same CRS as the network.\n\ndata_gdf = features.features_from_polygon(\n    poly_wgs, tags={\"amenity\": [\"pub\", \"restaurant\"]}\n)\ndata_gdf = data_gdf.to_crs(nodes_gdf.crs)\ndata_gdf\n\n\n\n\n\n\n\n\n\ngeometry\naddr:city\naddr:country\naddr:housenumber\naddr:postcode\naddr:street\namenity\ncheck_date\ncontact:email\ncontact:phone\n...\naccess:conditional\nnote:access\nname:gsw\nnote:name:en\nnote:name:zh\nwebsite:en\nserving_system:buffet\nbuilding:use\nfloor\ntype\n\n\nelement\nid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnode\n21593236\nPOINT (699869.619 5711280.678)\nLondon\nGB\n12\nWC2A 3HP\nGate Street\npub\n2023-04-18\ninfo@theshiptavern.co.uk\n+44 20 7405 1992\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n25471087\nPOINT (699749.16 5710787.29)\nLondon\nNaN\n39\nNaN\nBow Street\npub\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n25475914\nPOINT (699606.322 5711699.239)\nNaN\nNaN\nNaN\nNaN\nNaN\npub\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n25746185\nPOINT (700308.36 5710758.42)\nLondon\nNaN\nNaN\nWC2R 3LD\nNaN\npub\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n26699558\nPOINT (699071.215 5711168.671)\nNaN\nNaN\nNaN\nNaN\nNaN\npub\n2024-09-10\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nway\n995954627\nPOLYGON ((699270.101 5710540.727, 699277.571 5...\nLondon\nNaN\n24\nWC2H 0HX\nCharing Cross Road\nrestaurant\n2024-10-07\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1016903732\nPOLYGON ((699039.571 5710804.095, 699036.453 5...\nNaN\nNaN\nNaN\nNaN\nNaN\nrestaurant\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1060462032\nPOLYGON ((700144.125 5710144.723, 700142.327 5...\nLondon\nNaN\nNaN\nSE1 8XX\nBelvedere Road\nrestaurant\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nretail\nNaN\nNaN\n\n\n1072559143\nPOLYGON ((699383.906 5710631.863, 699382.376 5...\nLondon\nNaN\n17\nWC2E 9AX\nGarrick Street\nrestaurant\nNaN\nNaN\n+44 20 3675 0930\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1194233515\nPOLYGON ((700109.233 5711375.71, 700111.379 57...\nLondon\nNaN\n283-288\nWC1V 7HP\nHigh Holborn\npub\n2023-08-03\nNaN\n+44 20 7242 5669\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nGround\nNaN\n\n\n\n\n1431 rows × 253 columns\n\n\n\nSome preparatory data cleaning is typically necessary. This example extracts the particular rows and columns of interest for the subsequent steps of analysis.\n\n# extract nodes\ndata_gdf = data_gdf.loc[\"node\"]\n# reset index\ndata_gdf = data_gdf.reset_index(level=0, drop=True)\n# extract relevant columns\ndata_gdf = data_gdf[[\"amenity\", \"geometry\"]]\ndata_gdf.head()\n\n\n\n\n\n\n\n\namenity\ngeometry\n\n\n\n\n0\npub\nPOINT (699869.619 5711280.678)\n\n\n1\npub\nPOINT (699749.16 5710787.29)\n\n\n2\npub\nPOINT (699606.322 5711699.239)\n\n\n3\npub\nPOINT (700308.36 5710758.42)\n\n\n4\npub\nPOINT (699071.215 5711168.671)\n\n\n\n\n\n\n\nOnce the land use and network data has been prepared, use the layers.compute_accessibilities method to compute accessibilities to land uses. The landuse_column_label and the target accessibility keys should correspond to the data in the input GeoDataFrame.\n\n# compute pub accessibility\ndistances = [100, 200, 400, 800]\nnodes_gdf, data_gdf = layers.compute_accessibilities(\n    data_gdf,\n    landuse_column_label=\"amenity\",\n    accessibility_keys=[\"pub\", \"restaurant\"],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing land-use accessibility for: pub, restaurant\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.data:Assigning 701 data entries to network nodes (max_dist: 100).\nINFO:cityseer.data:Collected 1173 potential node assignments from data entries.\nINFO:cityseer.data:Finished assigning data. 1173 assignments added to 704 nodes.\nINFO:cityseer.graph:Barriers unset and R-tree cleared.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 100m, Beta: 0.04, Walking Time: 1.25 minutes.\nINFO:cityseer.config:Distance: 200m, Beta: 0.02, Walking Time: 2.5 minutes.\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\nINFO:cityseer.config:Distance: 800m, Beta: 0.005, Walking Time: 10.0 minutes.\n\n\nThe output columns are named cc_{key}_{distance}_{type}. Where the keys will correspond to the input accessibility keys and the distances will correspond to the input distances. The types will correspond to either non-weighted nw or distance weighted wt count, or else the distance to the nearest instance of a given landuse.\nStandard GeoPandas functionality can be used to explore, visualise, or save the results.\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_pub_100_nw', 'cc_pub_100_wt', 'cc_pub_200_nw',\n       'cc_pub_200_wt', 'cc_pub_400_nw', 'cc_pub_400_wt', 'cc_pub_800_nw',\n       'cc_pub_800_wt', 'cc_pub_nearest_max_800', 'cc_restaurant_100_nw',\n       'cc_restaurant_100_wt', 'cc_restaurant_200_nw', 'cc_restaurant_200_wt',\n       'cc_restaurant_400_nw', 'cc_restaurant_400_wt', 'cc_restaurant_800_nw',\n       'cc_restaurant_800_wt', 'cc_restaurant_nearest_max_800'],\n      dtype='object')\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_restaurant_400_wt\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\ndata_gdf[data_gdf[\"amenity\"] == \"restaurant\"].plot(\n    markersize=2,\n    edgecolor=None,\n    color=\"white\",\n    legend=False,\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(697035.8123208123),\n np.float64(700647.6928482385),\n np.float64(5709134.052621752),\n np.float64(5712638.694212982))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_pub_nearest_max_800\",\n    cmap=\"viridis_r\",\n    legend=False,\n    ax=ax,\n)\ndata_gdf[data_gdf[\"amenity\"] == \"pub\"].plot(\n    markersize=2,\n    edgecolor=None,\n    color=\"white\",\n    legend=False,\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(697035.8123208123),\n np.float64(700647.6928482385),\n np.float64(5709196.42405734),\n np.float64(5712635.724144622))"
  },
  {
    "objectID": "recipes/networks/network_from_bounds.html",
    "href": "recipes/networks/network_from_bounds.html",
    "title": "OSM network from a boundary file",
    "section": "",
    "text": "Use a custom boundary file to create a networkx graph from OSM.\nIf you have a boundary file in a GeoPackage, shapefile, or similar format, then you can load this file and use it as the boundary for creating a network from OSM.\n\nimport geopandas as gpd\nfrom cityseer.tools import io, plot\n\nUse geopandas to load the boundary file. Check that your file path is correct!\n\nbounds_gpd = gpd.read_file(\"data/madrid_bounds/madrid_bounds.gpkg\")\nbounds_gpd\n\n\n\n\n\n\n\n\nCODDIS\nNOMDIS\nCOD_BAR\nNOMBRE\nShape_Leng\nCOD_DIS_TX\nBARRIO_MAY\nCOD_DISBAR\nNUM_BAR\nBARRIO_MT\nCOD_DISB\ngeometry\n\n\n\n\n0\n1\nCentro\n011\nPalacio\n0.0\n01\nPALACIO\n11\n1\nPALACIO\n1-1\nPOLYGON ((441182.611 4463570.002, 441178.708 4...\n\n\n\n\n\n\n\nExtract the EPSG code from the boundary file.\n\nepsg_code = bounds_gpd.crs.to_epsg()\nprint(epsg_code)\nprint(bounds_gpd.crs.is_projected)\n\n25830\nTrue\n\n\nIf the geometry is not in a projected coordinate system, reproject it to a locally projected coordinate system before doing buffering or simplification. This can be done with the built-in to_crs method in geopandas. The EPSG code for the UTM zone can be found at epsg.io. For example, if your boundary is in the UTM zone 30N, you can use code 32630.\nFor the currently opened file, the boundary is already in a projected coordinate system, so we can skip this step. When working with a file that does need to reprojected, then you can use the following code to project your CRS to a given EPSG code.\n\n# shown as example - unnecessary step for current dataset\nbounds_gpd = bounds_gpd.to_crs(epsg=25830)\nprint(epsg_code)\nprint(bounds_gpd.crs.is_projected)\n\n25830\nTrue\n\n\nConvert the GeoDataFrame into a Polygon using the geopandas union_all method. This will create a single unified shapely geometry.\n\nbounds_geom = bounds_gpd.union_all()\nbounds_geom\n\n\n\n\n\n\n\n\nIf the geometries are complex, then the OSM data request may fail due to URL length limitations (because each coordinate has to be passed in the URL). To avoid this, you can use the convex_hull or else the simplify method to reduce the number of points in the geometry.\n\nbounds_geom_simpl = bounds_geom.convex_hull\nbounds_geom_simpl\n\n\n\n\n\n\n\n\nIt is best practise to buffer the geometry by an amount matching the farthest distance used for centrality or accessibility calculations, which prevents edge roll-off effects.\n\nbounds_geom_buff = bounds_geom_simpl.buffer(100)\nbounds_geom_buff\n\n\n\n\n\n\n\n\nThe shapely Polygon can now be used as before to download and prepare an OSM graph.\n\n# simplification turned off for this example\nG = io.osm_graph_from_poly(\n    bounds_geom_buff,\n    poly_crs_code=epsg_code,\n    simplify=False,\n)\nprint(G)\n\nWARNING:cityseer.tools.io:Merging node 12288331228 into 256149889 due to identical x, y coords.\nWARNING:cityseer.tools.io:Merging node 12119257161 into 12119257160 due to identical x, y coords.\nWARNING:cityseer.tools.io:Merging node 12290337809 into 2334349237 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: t\nWARNING:cityseer.tools.io:Unable to parse level info: t\nWARNING:cityseer.tools.io:Unable to parse level info: t\nWARNING:cityseer.tools.io:Unable to parse level info: t\nWARNING:cityseer.tools.io:Unable to parse level info: t\nWARNING:cityseer.tools.io:Unable to parse level info: 1-2\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 771636/771636 [00:15&lt;00:00, 49490.12it/s]\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 692056/692056 [00:00&lt;00:00, 1122310.89it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 771636/771636 [00:40&lt;00:00, 18932.66it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 692056/692056 [00:32&lt;00:00, 21315.84it/s]\n\n\nMultiGraph with 217449 nodes and 297029 edges\n\n\nSetting the x_lim and y_lim extents will effectively zoom-in so that the results of the query can be seen more clearly.\n\nplot.plot_nx(\n    G,\n    plot_geoms=True,\n    x_lim=(439500, 439500 + 2000),\n    y_lim=(4473500, 4473500 + 2000),\n)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n100%|██████████| 297029/297029 [00:05&lt;00:00, 53590.98it/s]"
  },
  {
    "objectID": "recipes/networks/create_from_bbox.html",
    "href": "recipes/networks/create_from_bbox.html",
    "title": "OSM network from a bounding box",
    "section": "",
    "text": "Use a bounding box to create a networkx graph from OpenStreetMap data.\n\nfrom shapely import geometry\n\nfrom cityseer.tools import io, plot\n\nUse a shapely Polygon in WGS84 coordinates to define a boundary for the graph.\n\npoly_wgs = geometry.box(\n    -0.14115725966109327, 51.509220662095714, -0.12676440185383622, 51.51820111033659\n)\npoly_wgs\n\n\n\n\n\n\n\n\nUse the osm_graph_from_poly function available from the cityseer package’s io module.\nThe function expects a shapely polygon and returns a networkx graph. cityseer will automatically extract the graph topology while also creating accurate street geometries represented as shapely LineString geometries, which are linked to the graph’s edges through the geom edge attribute.\n\nG = io.osm_graph_from_poly(poly_wgs)\nprint(G)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n\n\nMultiGraph with 382 nodes and 591 edges\n\n\nThe plot_nx function can be used to visualize the graph. It accepts a cityseer prepared networkx graph and will plot street geometries when the plot_geoms parameter is set to True.\n\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\n\n\n\n\n\n\n\nIf using a different CRS, then specify this using the poly_crs_code parameter. For example, if you are using UTM zone 30N, then set this to the corresponding EPSG code, in this case 32630.\n\npoly_utm = geometry.box(698361, 5710348, 699361, 5711348)\nG_utm = io.osm_graph_from_poly(poly_utm, poly_crs_code=32630)\nprint(G_utm)\nplot.plot_nx(G_utm, plot_geoms=True)\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 381 nodes and 595 edges\n\n\n\n\n\n\n\n\n\ncityseer will set node and edge geometry coordinates to the local projected UTM coordinate reference system. If you want to create the resulting graph in a specific CRS, then specify this using the to_crs_code parameter. For example, in the UK you might want to use the British National Grid, which has the EPSG code 27700.\n\nG_bng = io.osm_graph_from_poly(poly_wgs, to_crs_code=27700)\nprint(G_bng)\nplot.plot_nx(G_bng, plot_geoms=True)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 27700.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 380 nodes and 589 edges\n\n\n\n\n\n\n\n\n\ncityseer will automatically attempt to clean-up the graph by removing unnecessary nodes and simplifying the graph. If you only want basic cleaning without simplification, then set the simplify parameter to False. Note that in this case the graph has significantly more nodes and edges because simplification has not been applied.\n\nG_raw = io.osm_graph_from_poly(poly_wgs, simplify=False)\nprint(G_raw)\nplot.plot_nx(G_raw, plot_geoms=True)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 1913 nodes and 2211 edges"
  },
  {
    "objectID": "recipes/networks/create_dual_graph.html",
    "href": "recipes/networks/create_dual_graph.html",
    "title": "Create a Dual Graph",
    "section": "",
    "text": "Create a dual graph representation from a primal graph.\nFor purposes of visualisation and intuition, it is preferable to work with the network in its dual representation. This way, metrics such as centrality and accessibility are calculated relative to streets instead of intersections. The advantage is that you can then visualise the results on the street network itself. Additionally, angular distances (typically used for Space Syntax) are more intuitive to calculate on the dual graph. That said, nothing stops you from working with the primal graph if you prefer.\n\nfrom cityseer.tools import graphs, io, plot\n\nFirst, create a primal graph as before.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 500\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\nG = io.osm_graph_from_poly(poly_wgs)\nprint(G)\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 320 nodes and 487 edges\n\n\n\n\n\n\n\n\n\nA dual graph representation can then be created using the nx_to_dual function available from the cityseer package’s graphs module.\n\nG_dual = graphs.nx_to_dual(G)\nprint(G_dual)\n\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n\n\nMultiGraph with 487 nodes and 1151 edges\n\n\nNotice that the dual graph will have the same number of nodes as the primal graph’s number of edges, since the edges have been converted to nodes. The new edges are created by splitting the original edges at their midpoints, and then welding corresponding segments together across intersections. True representations of street geometries are therefore preserved in the dual graph, allowing for accurate calculations of metric distances and angular deviation.\n\nplot.plot_nx(G_dual, plot_geoms=True)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges"
  },
  {
    "objectID": "recipes/networks/create_from_buffered_point.html",
    "href": "recipes/networks/create_from_buffered_point.html",
    "title": "OSM network from a buffered coordinate",
    "section": "",
    "text": "Use a buffered point to create a networkx graph from OSM.\nUse this approach when you have a centre-point, such as a longitude and latitude, and you wish to create a network within a certain radius distance.\n\nfrom cityseer.tools import io, plot\n\nDefine a longitude and latitude, and a buffer distance in meters.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 500\n\nA geometry can now be created using the buffered_point_poly function available from the cityseer package’s io module.\n\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\nprint(epsg_code)\npoly_wgs\n\n4326\n\n\n\n\n\n\n\n\n\nYou can then use this geometry to specify the boundaries to be used for creating a network using the osm_graph_from_poly function.\n\nG = io.osm_graph_from_poly(poly_wgs)\nprint(G)\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 320 nodes and 487 edges\n\n\n\n\n\n\n\n\n\nSet the projected parameter to True if you would rather use the local UTM projection for the boundary.\n\npoly_utm, epsg_code = io.buffered_point_poly(lng, lat, buffer, projected=True)\nprint(epsg_code)\npoly_utm\n\n32630\n\n\n\n\n\n\n\n\n\nIn this case, remember to set the poly_crs parameter to the appropriate UTM CRS if using the resultant geometry as a parameter for the osm_graph_from_poly function.\n\nG_utm = io.osm_graph_from_poly(poly_utm, poly_crs_code=epsg_code)\nprint(G_utm)\nplot.plot_nx(G_utm, plot_geoms=True)\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 320 nodes and 487 edges"
  },
  {
    "objectID": "recipes/networks/osmnx_to_cityseer.html",
    "href": "recipes/networks/osmnx_to_cityseer.html",
    "title": "Convert a network from osmnx",
    "section": "",
    "text": "Convert a network from osmnx to a cityseer compatible networkx graph.\n\nimport osmnx as ox\nfrom cityseer.tools import plot, io\n\nUse one of the available osmnx methods to create a networkx graph.\n\nlng, lat = -0.14115725966109327, 51.509220662095714\nbuff = 500\n\nmulti_di_graph = ox.graph_from_point((lat, lng), dist=buff, simplify=True)\nprint(multi_di_graph)\n\nMultiDiGraph with 1529 nodes and 4145 edges\n\n\nUse the nx_from_osm_nx function from the cityseer io module to convert the osmnx dataset to a cityseer compatible networkx graph.\n\nG = io.nx_from_osm_nx(multi_di_graph)\nprint(G)\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.io:Converting OSMnx MultiDiGraph to cityseer MultiGraph.\nWARNING:cityseer.tools.util:The to_crs_code parameter 4326 is not a projected CRS\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges\n\n\nMultiGraph with 1529 nodes and 2332 edges"
  },
  {
    "objectID": "recipes/networks/network_from_relation_id.html",
    "href": "recipes/networks/network_from_relation_id.html",
    "title": "OSM network from a relation id",
    "section": "",
    "text": "Use an OSM relation id to create a networkx graph from OSM.\nUse OpenStreetMap to identify a boundary relations id. Then, use osmnx to retireve the relation id as a GeoDataFrame.\n\nimport osmnx as ox\n\nfrom cityseer.tools import io, plot\n\nIn this case, we’ll retrieve the London Soho boundary relation 17710512. For this, we can use the osmnx geocode_to_gdf function with the by_osmid parameter set to True. Note the preceding R prepended to the id as per the API documentation.\n\nbounds_gdf = ox.geocode_to_gdf(\n    \"R17710512\",  # OSM relation ID\n    by_osmid=True,\n)\nbounds_gdf\n\n\n\n\n\n\n\n\ngeometry\nbbox_west\nbbox_south\nbbox_east\nbbox_north\nplace_id\nosm_type\nosm_id\nlat\nlon\nclass\ntype\nplace_rank\nimportance\naddresstype\nname\ndisplay_name\n\n\n\n\n0\nPOLYGON ((-0.14183 51.5151, -0.14162 51.51449,...\n-0.141829\n51.509966\n-0.129378\n51.516365\n259863049\nrelation\n17710512\n51.514065\n-0.135049\nplace\nsuburb\n19\n0.552695\nneighbourhood\nSoho\nSoho, City of Westminster, Greater London, Eng...\n\n\n\n\n\n\n\nConvert the GeoDataFrame into a unified Polygon using the geopandas union_all method.\n\n# returns a geoDataFrame - union for the geom\nbounds_geom = bounds_gdf.union_all()\nbounds_geom\n\n\n\n\n\n\n\n\nIf the geometry is complex, then the subsequent OSM API request (which happens behind the scenes) can fail due to a long URL request. In this case, you can take the geometrically simpler convex_hull instead. Alternatively, you can simplify the geometry, but remember to use spatial units matching the CRS of the geometry.\n\nbounds_geom = bounds_geom.convex_hull\nbounds_geom\n\n\n\n\n\n\n\n\nThe shapely geometry can then be passed to the cityseer osm_graph_from_poly function, as per other examples.\n\nG = io.osm_graph_from_poly(bounds_geom)\nprint(G)\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n\n\nMultiGraph with 144 nodes and 210 edges\n\n\n\nplot.plot_nx(G, plot_geoms=True)\n\nINFO:cityseer.tools.plot:Preparing graph nodes\nINFO:cityseer.tools.plot:Preparing graph edges"
  },
  {
    "objectID": "recipes/live_nodes.html",
    "href": "recipes/live_nodes.html",
    "title": "Setting live or non-live nodes",
    "section": "",
    "text": "Set a note status to live=True or live=False based on whether it intersect the original boundary.\nThis is used for demarcating nodes that fall within the original unbuffered boundary when calculating measures. This allows for the original boundary to be delineated from the buffered surrounding extents, which is normally included for purposes of avoiding edge roll-off. The algorithms will continue to consider parts of the network where nodes are not live (therefore preventing edge roll-off), but will not compute metrics for these nodes (reducing unnecessary computation).\n\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import networks\nfrom cityseer.tools import graphs, io\nfrom shapely import geometry\n\nWhen using this approach it is best to work in a projector coordinate reference system. In this example we will cast the buffered point polygon to projected CRS by using the projected=True parameter.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 500\npoly_utm, epsg_code = io.buffered_point_poly(lng, lat, buffer, projected=True)\npoly_utm\n\n\n\n\n\n\n\n\nSince the Polygon is in a projected CRS, the buffering step can proceed with a distance defined in metres. Here the Polygon is buffered by 400m since this is the maximum distance considered for the centrality analysis in the next step.\n\npol_buff = poly_utm.buffer(400)\npol_buff\n\n\n\n\n\n\n\n\nThe buffer polygon can then be used as an argument for retrieving the OSM network. The poly_crs_code and to_crs_code parameters need to be set so that the function knows which CRS the input geometry is in, and which CRS to convert the network to.\n\nG = io.osm_graph_from_poly(pol_buff, poly_crs_code=epsg_code, to_crs_code=epsg_code)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\n100%|██████████| 9574/9574 [00:00&lt;00:00, 53513.86it/s]\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\n100%|██████████| 8905/8905 [00:00&lt;00:00, 1094674.01it/s]\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\n100%|██████████| 9574/9574 [00:00&lt;00:00, 19250.07it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 8905/8905 [00:00&lt;00:00, 24650.31it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 5145/5145 [00:00&lt;00:00, 1659721.13it/s]\n100%|██████████| 5145/5145 [00:00&lt;00:00, 10442.56it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 4476/4476 [00:00&lt;00:00, 63468.42it/s]\n100%|██████████| 3094/3094 [00:00&lt;00:00, 334782.57it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 3871/3871 [00:00&lt;00:00, 1087703.54it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2952/2952 [00:00&lt;00:00, 1751037.39it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2348/2348 [00:00&lt;00:00, 308750.85it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2952/2952 [00:00&lt;00:00, 177692.10it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2937/2937 [00:00&lt;00:00, 1278666.27it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2348/2348 [00:00&lt;00:00, 34263.76it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2966/2966 [00:00&lt;00:00, 293375.76it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2961/2961 [00:00&lt;00:00, 1754143.24it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2348/2348 [00:00&lt;00:00, 135246.24it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2962/2962 [00:00&lt;00:00, 475523.56it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2962/2962 [00:00&lt;00:00, 1277220.98it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2348/2348 [00:00&lt;00:00, 88577.52it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2963/2963 [00:00&lt;00:00, 516208.63it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2348/2348 [00:00&lt;00:00, 57349.15it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2348/2348 [00:00&lt;00:00, 313857.66it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2963/2963 [00:00&lt;00:00, 476998.65it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 2348/2348 [00:00&lt;00:00, 579171.12it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2326/2326 [00:00&lt;00:00, 55185.40it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2326/2326 [00:01&lt;00:00, 1468.02it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2698/2698 [00:00&lt;00:00, 69898.16it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 2133/2133 [00:00&lt;00:00, 603429.81it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2117/2117 [00:00&lt;00:00, 54698.65it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2117/2117 [00:00&lt;00:00, 6290.36it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2592/2592 [00:00&lt;00:00, 213156.79it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 2088/2088 [00:00&lt;00:00, 862828.25it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2083/2083 [00:00&lt;00:00, 56612.21it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 2083/2083 [00:00&lt;00:00, 4523.22it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2536/2536 [00:00&lt;00:00, 305434.46it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 2050/2050 [00:00&lt;00:00, 1089774.80it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 2048/2048 [00:00&lt;00:00, 56403.26it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2530/2530 [00:00&lt;00:00, 1688667.91it/s]\nINFO:cityseer.tools.graphs:Snapping gapped endings.\n100%|██████████| 2048/2048 [00:00&lt;00:00, 18030.25it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2626/2626 [00:00&lt;00:00, 1712679.57it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 2048/2048 [00:00&lt;00:00, 14949.47it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 3074/3074 [00:00&lt;00:00, 458525.93it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 2301/2301 [00:00&lt;00:00, 655377.80it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 1956/1956 [00:00&lt;00:00, 34370.76it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 2197/2197 [00:00&lt;00:00, 1675738.48it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1424/1424 [00:00&lt;00:00, 11760.50it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 2213/2213 [00:00&lt;00:00, 190349.13it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1424/1424 [00:00&lt;00:00, 56733.08it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1424/1424 [00:02&lt;00:00, 633.45it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1725/1725 [00:00&lt;00:00, 43771.55it/s]\nINFO:cityseer.tools.util:Creating edges STR tree.\n100%|██████████| 1629/1629 [00:00&lt;00:00, 1666875.14it/s]\nINFO:cityseer.tools.graphs:Splitting opposing edges.\n100%|██████████| 1089/1089 [00:00&lt;00:00, 13079.31it/s]\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1634/1634 [00:00&lt;00:00, 392975.50it/s]\nINFO:cityseer.tools.util:Creating nodes STR tree\n100%|██████████| 1089/1089 [00:00&lt;00:00, 57539.46it/s]\nINFO:cityseer.tools.graphs:Consolidating nodes.\n100%|██████████| 1089/1089 [00:01&lt;00:00, 970.97it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\n100%|██████████| 1418/1418 [00:00&lt;00:00, 75465.65it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 901/901 [00:00&lt;00:00, 160893.56it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\n100%|██████████| 1346/1346 [00:00&lt;00:00, 112845.21it/s]\nINFO:cityseer.tools.graphs:Ironing edges.\n100%|██████████| 1336/1336 [00:00&lt;00:00, 21940.19it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\n100%|██████████| 1332/1332 [00:00&lt;00:00, 399543.23it/s]\nINFO:cityseer.tools.graphs:Removing dangling nodes.\n100%|██████████| 861/861 [00:00&lt;00:00, 847324.20it/s]\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 856/856 [00:00&lt;00:00, 322667.77it/s]\n\n\nSince the network and the source geometry are in the same CRS, it is possible to demarcate each node as either live=True or live=False based on whether it intersects the original geometry.\nThis can be done by iterating through the nodes and checking if they intersect the original geometry. If they do, the node is set to live=True, otherwise it is set to live=False.\n\nfor node_idx, node_data in G.nodes(data=True):\n    node_pnt = geometry.Point(node_data[\"x\"], node_data[\"y\"])\n    if node_pnt.intersects(poly_utm):\n        G.nodes[node_idx][\"live\"] = True\n    else:\n        G.nodes[node_idx][\"live\"] = False\n\nMetrics can then be computed based on the target distance without encountering edge roll-off.\n\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(\n    G_dual,\n)\ndistances = [400]\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\nnodes_gdf.head()\n\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\n100%|██████████| 1314/1314 [00:00&lt;00:00, 36674.13it/s]\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n100%|██████████| 1314/1314 [00:01&lt;00:00, 751.64it/s]\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\n100%|██████████| 1314/1314 [00:00&lt;00:00, 12201.22it/s]\n100%|██████████| 1314/1314 [00:00&lt;00:00, 4381.52it/s]\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\n100%|██████████| 1314/1314 [00:01&lt;00:00, 1310.09it/s]\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\n\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\nprimal_edge\nprimal_edge_node_a\nprimal_edge_node_b\nprimal_edge_idx\ndual_node\ncc_beta_400\ncc_cycles_400\ncc_density_400\ncc_farness_400\ncc_harmonic_400\ncc_hillier_400\ncc_betweenness_400\ncc_betweenness_beta_400\n\n\n\n\n25257319_25257320_k0\n0\n698204.726812\n5.710187e+06\nFalse\n1\nLINESTRING (698235.492 5710213.589, 698232.233...\n25257320\n25257319\n0\nPOINT (698204.726812 5710187.371082)\n0.0\n0.0\n0.0\n0.0\n0.0\nNaN\n0.0\n0.0\n\n\n108252_25257054_k0\n1\n698153.709285\n5.710642e+06\nFalse\n1\nLINESTRING (698138.426 5710664.248, 698144.112...\n108252\n25257054\n0\nPOINT (698153.709285 5710641.538834)\n0.0\n0.0\n0.0\n0.0\n0.0\nNaN\n0.0\n0.0\n\n\n108252_452229727_k0\n2\n698123.239970\n5.710685e+06\nFalse\n1\nLINESTRING (698138.426 5710664.248, 698133.018...\n108252\n452229727\n0\nPOINT (698123.23997 5710685.118712)\n0.0\n0.0\n0.0\n0.0\n0.0\nNaN\n0.0\n0.0\n\n\n108252_12391|03078±57552|08253_k0\n3\n698120.890901\n5.710655e+06\nFalse\n1\nLINESTRING (698103.385 5710645.919, 698131.137...\n108252\n12391|03078±57552|08253\n0\nPOINT (698120.890901 5710655.116857)\n0.0\n0.0\n0.0\n0.0\n0.0\nNaN\n0.0\n0.0\n\n\n108252_10825|82720±25257|82720±12373|16592_k0\n4\n698183.290484\n5.710684e+06\nFalse\n1\nLINESTRING (698228.148 5710703.651, 698222.24 ...\n108252\n10825|82720±25257|82720±12373|16592\n0\nPOINT (698183.290484 5710683.927691)\n0.0\n0.0\n0.0\n0.0\n0.0\nNaN\n0.0\n0.0\n\n\n\n\n\n\n\nMeasures will only have been computed for live nodes.\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_harmonic_400\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(697663.3353532758),\n np.float64(699986.2102806268),\n np.float64(5709670.722888798),\n np.float64(5711930.195587498))\n\n\n\n\n\n\n\n\n\nTo print or save only live nodes, filter the data frame accordingly.\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_filtered = nodes_gdf[nodes_gdf.live]\nnodes_filtered.plot(\n    column=\"cc_harmonic_400\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(698266.6364452019),\n np.float64(699469.3803111856),\n np.float64(5710222.983618274),\n np.float64(5711471.82779159))"
  },
  {
    "objectID": "recipes/centrality/gpd_metric_centrality.html",
    "href": "recipes/centrality/gpd_metric_centrality.html",
    "title": "Metric distance network centrality",
    "section": "",
    "text": "Calculate metric distance centralities from a geopandas GeoDataFrame.\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import networks\nfrom cityseer.tools import graphs, io\n\nPrepare the network as shown in other examples. Working with the dual graph is recommended.\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n\n\nUse network_structure_from_nx from the cityseer package’s io module to prepare the GeoDataFrames and NetworkStructure.\n\n# prepare the data structures\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(\n    G_dual,\n)\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 104026 items.\n\n\nUse the node_centrality_shortest function from the cityseer package’s networks module to calculate shortest metric distance centralities. The function requires a NetworkStructure and nodes GeoDataFrame prepared with the network_structure_from_nx function in the previous step.\nThe function can calculate centralities for numerous distances at once via the distances parameter, which accepts a list of distances.\nThe function returns the nodes GeoDataFrame with the outputs of the centralities added as columns. The columns are named cc_{centrality}_{distance}. Standard geopandas functionality can be used to explore, visualise, or save the results. See the documentation for more information on the available centrality formulations.\n\ndistances = [500, 2000]\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\nnodes_gdf.head()\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 500m, Beta: 0.008, Walking Time: 6.25 minutes.\nINFO:cityseer.config:Distance: 2000m, Beta: 0.002, Walking Time: 25.0 minutes.\n\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\nprimal_edge\nprimal_edge_node_a\nprimal_edge_node_b\nprimal_edge_idx\ndual_node\n...\ncc_farness_500\ncc_farness_2000\ncc_harmonic_500\ncc_harmonic_2000\ncc_hillier_500\ncc_hillier_2000\ncc_betweenness_500\ncc_betweenness_2000\ncc_betweenness_beta_500\ncc_betweenness_beta_2000\n\n\n\n\nx454839.5-y4476885.3_x454855.9-y4476818.6_k0\n0\n454848.067543\n4.476852e+06\nTrue\n1\nLINESTRING (454855.9 4476818.6, 454849.1 44768...\nx454855.9-y4476818.6\nx454839.5-y4476885.3\n0\nPOINT (454848.067543 4476852.042507)\n...\n7418.207031\n163780.625000\n0.199088\n0.315512\n0.121323\n0.148589\n0.0\n0.0\n0.000000\n0.000000\n\n\nx454833.6-y4476910.5_x454839.5-y4476885.3_k0\n1\n454836.577015\n4.476898e+06\nTrue\n1\nLINESTRING (454839.5 4476885.3, 454838 4476891...\nx454839.5-y4476885.3\nx454833.6-y4476910.5\n0\nPOINT (454836.577015 4476897.9067)\n...\n10061.338867\n162550.625000\n0.294068\n0.401464\n0.143520\n0.155527\n127.0\n1032.0\n18.257139\n174.897049\n\n\nx454839.5-y4476885.3_x454877.1-y4476893.6_k0\n2\n454858.300000\n4.476889e+06\nTrue\n1\nLINESTRING (454839.5 4476885.3, 454877.1 44768...\nx454839.5-y4476885.3\nx454877.1-y4476893.6\n0\nPOINT (454858.3 4476889.45)\n...\n8638.165039\n167096.218750\n0.313121\n0.424865\n0.133825\n0.151296\n99.0\n753.0\n18.619455\n135.658371\n\n\nx454823.1-y4476952.1_x454833.6-y4476910.5_k0\n3\n454828.362585\n4.476931e+06\nTrue\n1\nLINESTRING (454833.6 4476910.5, 454830.4 44769...\nx454833.6-y4476910.5\nx454823.1-y4476952.1\n0\nPOINT (454828.362585 4476931.303206)\n...\n10452.838867\n161802.000000\n0.281164\n0.389349\n0.153068\n0.160202\n158.0\n1308.0\n17.099850\n212.337875\n\n\nx454758.1-y4476894.6_x454833.6-y4476910.5_k0\n4\n454795.845199\n4.476903e+06\nTrue\n1\nLINESTRING (454758.1 4476894.6, 454769.8 44768...\nx454833.6-y4476910.5\nx454758.1-y4476894.6\n0\nPOINT (454795.845199 4476902.571916)\n...\n9720.206055\n166860.140625\n0.197214\n0.307718\n0.126026\n0.151510\n0.0\n0.0\n0.000000\n0.000000\n\n\n\n\n5 rows × 26 columns\n\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_beta_500', 'cc_beta_2000', 'cc_cycles_500',\n       'cc_cycles_2000', 'cc_density_500', 'cc_density_2000', 'cc_farness_500',\n       'cc_farness_2000', 'cc_harmonic_500', 'cc_harmonic_2000',\n       'cc_hillier_500', 'cc_hillier_2000', 'cc_betweenness_500',\n       'cc_betweenness_2000', 'cc_betweenness_beta_500',\n       'cc_betweenness_beta_2000'],\n      dtype='object')\n\n\n\nnodes_gdf[\"cc_betweenness_2000\"].describe()\n\ncount     47129.000000\nmean       9697.500000\nstd       14681.911133\nmin           0.000000\n25%         701.000000\n50%        3823.000000\n75%       12501.000000\nmax      237420.000000\nName: cc_betweenness_2000, dtype: float64\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_harmonic_500\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_betweenness_2000\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\nAlternatively, you can define the distance thresholds using a list of minutes instead.\n\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    minutes=[15],\n)\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 1200m, Beta: 0.00333, Walking Time: 15.0 minutes.\n\n\nThe function will map the minutes values into the equivalent distances, which are reported in the logged output.\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_beta_500', 'cc_beta_2000', 'cc_cycles_500',\n       'cc_cycles_2000', 'cc_density_500', 'cc_density_2000', 'cc_farness_500',\n       'cc_farness_2000', 'cc_harmonic_500', 'cc_harmonic_2000',\n       'cc_hillier_500', 'cc_hillier_2000', 'cc_betweenness_500',\n       'cc_betweenness_2000', 'cc_betweenness_beta_500',\n       'cc_betweenness_beta_2000', 'cc_beta_1200', 'cc_cycles_1200',\n       'cc_density_1200', 'cc_farness_1200', 'cc_harmonic_1200',\n       'cc_hillier_1200', 'cc_betweenness_1200', 'cc_betweenness_beta_1200'],\n      dtype='object')\n\n\nAs per the function logging outputs, 15 minutes has been mapped to 1200m at default speed_m_s, so the corresponding outputs can be visualised using the 1200m columns. Use the configurable speed_m_s parameter to set a custom metres per second walking speed.\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_harmonic_1200\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\nFor spatial-impedance weighted forms of centralities (beta variants), you can specify the beta parameter explicitly. These will otherwise be extrapolated automatically from the distances or minutes parameters. See the documentation for more information on how spatial impedances are converted to distance thresholds.\n\nnodes_gdf = networks.node_centrality_shortest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    betas=[0.01],\n)\n\nINFO:cityseer.metrics.networks:Computing shortest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_beta_500', 'cc_beta_2000', 'cc_cycles_500',\n       'cc_cycles_2000', 'cc_density_500', 'cc_density_2000', 'cc_farness_500',\n       'cc_farness_2000', 'cc_harmonic_500', 'cc_harmonic_2000',\n       'cc_hillier_500', 'cc_hillier_2000', 'cc_betweenness_500',\n       'cc_betweenness_2000', 'cc_betweenness_beta_500',\n       'cc_betweenness_beta_2000', 'cc_beta_1200', 'cc_cycles_1200',\n       'cc_density_1200', 'cc_farness_1200', 'cc_harmonic_1200',\n       'cc_hillier_1200', 'cc_betweenness_1200', 'cc_betweenness_beta_1200',\n       'cc_beta_400', 'cc_cycles_400', 'cc_density_400', 'cc_farness_400',\n       'cc_harmonic_400', 'cc_hillier_400', 'cc_betweenness_400',\n       'cc_betweenness_beta_400'],\n      dtype='object')\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_beta_400\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))"
  },
  {
    "objectID": "recipes/centrality/gpd_angular_centrality.html",
    "href": "recipes/centrality/gpd_angular_centrality.html",
    "title": "Angular distance network centrality",
    "section": "",
    "text": "Calculate angular (geometric or “simplest”) distance centralities from a geopandas GeoDataFrame.\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom cityseer.metrics import networks\nfrom cityseer.tools import graphs, io\n\nPrepare the network as shown in other examples. Working with the dual graph is recommended.\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG_dual = graphs.nx_to_dual(G)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\n\n\nUse network_structure_from_nx from the cityseer package’s io module to prepare the GeoDataFrames and NetworkStructure.\n\n# prepare the data structures\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(\n    G_dual,\n)\n\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 104026 items.\n\n\nUse the node_centrality_simplest function from the cityseer package’s networks module to calculate shortest angular (geometric or “simplest”) distance centralities. The function requires a NetworkStructure and nodes GeoDataFrame prepared with the network_structure_from_nx function in the previous step.\nThe function can calculate centralities for numerous distances at once via the distances parameter, which accepts a list of distances.\nThe function returns the nodes GeoDataFrame with the outputs of the centralities added as columns. The columns are named cc_{centrality}_{distance}_ang. Standard geopandas functionality can be used to explore, visualise, or save the results. See the documentation for more information on the available centrality formulations.\n\ndistances = [500, 2000]\nnodes_gdf = networks.node_centrality_simplest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=distances,\n)\nnodes_gdf.head()\n\nINFO:cityseer.metrics.networks:Computing simplest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 500m, Beta: 0.008, Walking Time: 6.25 minutes.\nINFO:cityseer.config:Distance: 2000m, Beta: 0.002, Walking Time: 25.0 minutes.\n\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\nprimal_edge\nprimal_edge_node_a\nprimal_edge_node_b\nprimal_edge_idx\ndual_node\ncc_density_500_ang\ncc_density_2000_ang\ncc_harmonic_500_ang\ncc_harmonic_2000_ang\ncc_hillier_500_ang\ncc_hillier_2000_ang\ncc_farness_500_ang\ncc_farness_2000_ang\ncc_betweenness_500_ang\ncc_betweenness_2000_ang\n\n\n\n\nx454839.5-y4476885.3_x454855.9-y4476818.6_k0\n0\n454848.067543\n4.476852e+06\nTrue\n1\nLINESTRING (454855.9 4476818.6, 454849.1 44768...\nx454855.9-y4476818.6\nx454839.5-y4476885.3\n0\nPOINT (454848.067543 4476852.042507)\n30.0\n124.0\n12.848804\n26.465605\n10.168567\n18.186932\n88.508049\n845.442261\n0.0\n0.0\n\n\nx454833.6-y4476910.5_x454839.5-y4476885.3_k0\n1\n454836.577015\n4.476898e+06\nTrue\n1\nLINESTRING (454839.5 4476885.3, 454838 4476891...\nx454839.5-y4476885.3\nx454833.6-y4476910.5\n0\nPOINT (454836.577015 4476897.9067)\n36.0\n127.0\n14.853752\n28.316143\n10.232138\n18.836437\n126.659744\n856.265991\n136.0\n968.0\n\n\nx454839.5-y4476885.3_x454877.1-y4476893.6_k0\n2\n454858.300000\n4.476889e+06\nTrue\n1\nLINESTRING (454839.5 4476885.3, 454877.1 44768...\nx454839.5-y4476885.3\nx454877.1-y4476893.6\n0\nPOINT (454858.3 4476889.45)\n33.0\n125.0\n12.366441\n24.028734\n9.009537\n16.524494\n120.871918\n945.566040\n106.0\n752.0\n\n\nx454823.1-y4476952.1_x454833.6-y4476910.5_k0\n3\n454828.362585\n4.476931e+06\nTrue\n1\nLINESTRING (454833.6 4476910.5, 454830.4 44769...\nx454833.6-y4476910.5\nx454823.1-y4476952.1\n0\nPOINT (454828.362585 4476931.303206)\n36.0\n124.0\n15.039588\n28.382860\n10.302912\n18.803555\n125.789688\n817.717712\n165.0\n1180.0\n\n\nx454758.1-y4476894.6_x454833.6-y4476910.5_k0\n4\n454795.845199\n4.476903e+06\nTrue\n1\nLINESTRING (454758.1 4476894.6, 454769.8 44768...\nx454833.6-y4476910.5\nx454758.1-y4476894.6\n0\nPOINT (454795.845199 4476902.571916)\n33.0\n125.0\n9.605127\n21.297651\n8.002337\n16.290869\n136.085236\n959.126282\n0.0\n0.0\n\n\n\n\n\n\n\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_density_500_ang', 'cc_density_2000_ang',\n       'cc_harmonic_500_ang', 'cc_harmonic_2000_ang', 'cc_hillier_500_ang',\n       'cc_hillier_2000_ang', 'cc_farness_500_ang', 'cc_farness_2000_ang',\n       'cc_betweenness_500_ang', 'cc_betweenness_2000_ang'],\n      dtype='object')\n\n\n\nnodes_gdf[\"cc_betweenness_2000_ang\"].describe()\n\ncount     47129.000000\nmean       8083.850098\nstd       15415.607422\nmin           0.000000\n25%         374.000000\n50%        2210.000000\n75%        8528.000000\nmax      227236.000000\nName: cc_betweenness_2000_ang, dtype: float64\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_harmonic_500_ang\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_betweenness_2000_ang\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))\n\n\n\n\n\n\n\n\n\nAlternatively, you can define the distance thresholds using a list of minutes instead.\n\nnodes_gdf = networks.node_centrality_simplest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    minutes=[15],\n)\n\nINFO:cityseer.metrics.networks:Computing simplest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 1200m, Beta: 0.00333, Walking Time: 15.0 minutes.\n\n\nThe function will map the minutes values into the equivalent distances, which are reported in the logged output.\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node', 'cc_density_500_ang', 'cc_density_2000_ang',\n       'cc_harmonic_500_ang', 'cc_harmonic_2000_ang', 'cc_hillier_500_ang',\n       'cc_hillier_2000_ang', 'cc_farness_500_ang', 'cc_farness_2000_ang',\n       'cc_betweenness_500_ang', 'cc_betweenness_2000_ang',\n       'cc_density_1200_ang', 'cc_harmonic_1200_ang', 'cc_hillier_1200_ang',\n       'cc_farness_1200_ang', 'cc_betweenness_1200_ang'],\n      dtype='object')\n\n\nAs per the function logging outputs, 15 minutes has been mapped to 1200m at default speed_m_s, so the corresponding outputs can be visualised using the 1200m columns. Use the configurable speed_m_s parameter to set a custom metres per second walking speed.\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_harmonic_1200_ang\",\n    cmap=\"magma\",\n    legend=False,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))"
  },
  {
    "objectID": "recipes/continuity/continuity_os_open.html",
    "href": "recipes/continuity/continuity_os_open.html",
    "title": "OS Open Roads",
    "section": "",
    "text": "The following example uses the OS Open Roads dataset, which is available under the Open Government License.\n© Crown copyright and database right 2022"
  },
  {
    "objectID": "recipes/continuity/continuity_os_open.html#data-source",
    "href": "recipes/continuity/continuity_os_open.html#data-source",
    "title": "OS Open Roads",
    "section": "",
    "text": "The following example uses the OS Open Roads dataset, which is available under the Open Government License.\n© Crown copyright and database right 2022"
  },
  {
    "objectID": "recipes/continuity/continuity_os_open.html#preparation",
    "href": "recipes/continuity/continuity_os_open.html#preparation",
    "title": "OS Open Roads",
    "section": "Preparation",
    "text": "Preparation\nThe following example assumes:\n\nThat the notebook is being run from a cloned cityseer-api repository.\nThat the above dataset has been downloaded to temp/os_open_roads/oproad_gb.gpkg as a relative path. If running this notebook directly from within a clone of the cityseer-api repo, then this equates to the cityseer-api/temp/os_open_roads/oproad_gb.gpkg path. Please edit the paths and path setup in this cell if you are using different directories.\n\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nrepo_path = Path.cwd()\nif str(repo_path).endswith(\"continuity\"):\n    repo_path = Path.cwd() / \"../..\"\nif not str(repo_path.resolve()).endswith(\"cityseer-examples\"):\n    raise ValueError(\n        \"Please check your notebook working directory relative to your project and data paths.\"\n    )\n\nopen_roads_path = Path(repo_path / \"temp/os_open_roads/oproad_gb.gpkg\")\nprint(\"data path:\", open_roads_path)\nprint(\"path exists:\", open_roads_path.exists())\n\ndata path: /Users/gareth/dev/benchmark-urbanism/cityseer-examples/examples/continuity/../../temp/os_open_roads/oproad_gb.gpkg\npath exists: True\n\n\n\nExtents\nInstead of loading the entire dataset, we’ll use a bounding box to only load an area of interest.\n\nfrom pyproj import Transformer\nfrom shapely import geometry\n\nfrom cityseer.tools import io\n\n# create graph - only UK locations will work for OS Open Roads data\n# stratford-upon-avon\n# lng, lat, buffer_dist, plot_buffer = -1.7063649924889566, 52.19277374082795, 2500, 2000\n# london\nlng, lat, buffer_dist, plot_buffer = (\n    -0.13039709427587876,\n    51.516434828344366,\n    6000,\n    5000,\n)\n# transform from WGS to BNG\ntransformer = Transformer.from_crs(\"EPSG:4326\", \"EPSG:27700\")\neasting, northing = transformer.transform(lat, lng)\n# calculate bbox relative to centroid\ncentroid = geometry.Point(easting, northing)\ntarget_bbox: tuple[float, float, float, float] = centroid.buffer(buffer_dist).bounds  # type: ignore\nplot_bbox: tuple[float, float, float, float] = centroid.buffer(plot_buffer).bounds  # type: ignore\n\n\n\nLoad\nWe can now load the OS Open Roads dataset\n\n# load OS Open Roads data from downloaded geopackage\nG_open = io.nx_from_open_roads(open_roads_path, target_bbox=target_bbox)\n\nINFO:cityseer.tools.io:Nodes: 24778\nINFO:cityseer.tools.io:Edges: 32723\nINFO:cityseer.tools.io:Dropped 463 edges where not both start and end nodes were present.\nINFO:cityseer.tools.io:Running basic graph cleaning\nINFO:cityseer.tools.graphs:Removing filler nodes.\n100%|██████████| 24778/24778 [00:00&lt;00:00, 33240.53it/s]\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 10.\n100%|██████████| 30681/30681 [00:00&lt;00:00, 50838.55it/s]"
  },
  {
    "objectID": "recipes/continuity/continuity_os_open.html#observe-continuity-metrics",
    "href": "recipes/continuity/continuity_os_open.html#observe-continuity-metrics",
    "title": "OS Open Roads",
    "section": "Observe continuity metrics",
    "text": "Observe continuity metrics\nThis step runs the continuity analysis using the specified heuristic.\n\nimport matplotlib.pyplot as plt\n\nfrom cityseer.tools import io, plot\nfrom cityseer.metrics import observe\n\n# methods can be \"names\", \"routes\", \"highways\"\n\nprint(\"Continuity by street names\")\nG_cont, NamesContReport = observe.street_continuity(G_open, method=\"names\")\nNamesContReport.report_by_count(n_items=5)\nNamesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by route numbers\")\nG_cont, RoutesContReport = observe.street_continuity(G_cont, method=\"routes\")\nRoutesContReport.report_by_count(n_items=5)\nRoutesContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by highway types\")\nG_cont, HwyContReport = observe.street_continuity(G_cont, method=\"highways\")\nHwyContReport.report_by_count(n_items=5)\nHwyContReport.report_by_length(n_items=5)\n\nprint(\"Continuity by overlapping routes and names types\")\nG_cont, HybridContReport = observe.hybrid_street_continuity(G_cont)\nHybridContReport.report_by_count(n_items=5)\nHybridContReport.report_by_length(n_items=5)\n\nContinuity by street names\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for names.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 31274.62it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 82 - finchley road\nINFO:cityseer.metrics.observe:Count: 62 - harrow road\nINFO:cityseer.metrics.observe:Count: 58 - old kent road\nINFO:cityseer.metrics.observe:Count: 57 - king's road\nINFO:cityseer.metrics.observe:Count: 46 - clapham road\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 5.4km - harrow road\nINFO:cityseer.metrics.observe:Length: 5.34km - finchley road\nINFO:cityseer.metrics.observe:Length: 4.48km - outer circle\nINFO:cityseer.metrics.observe:Length: 3.7km - westway\nINFO:cityseer.metrics.observe:Length: 3.28km - old kent road\n\n\nContinuity by route numbers\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 109845.11it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 142 - a1\nINFO:cityseer.metrics.observe:Count: 135 - a10\nINFO:cityseer.metrics.observe:Count: 129 - a41\nINFO:cityseer.metrics.observe:Count: 128 - a107\nINFO:cityseer.metrics.observe:Count: 116 - a5\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 9.1km - a41\nINFO:cityseer.metrics.observe:Length: 8.1km - a1\nINFO:cityseer.metrics.observe:Length: 7.96km - a10\nINFO:cityseer.metrics.observe:Length: 7.76km - a3220\nINFO:cityseer.metrics.observe:Length: 7.12km - a107\n\n\nContinuity by highway types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for highways.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 156124.61it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 5056 - a road\nINFO:cityseer.metrics.observe:Count: 2510 - minor road\nINFO:cityseer.metrics.observe:Count: 1711 - primary road\nINFO:cityseer.metrics.observe:Count: 1487 - b road\nINFO:cityseer.metrics.observe:Count: 463 - secondary access road\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 336.17km - a road\nINFO:cityseer.metrics.observe:Length: 181.0km - minor road\nINFO:cityseer.metrics.observe:Length: 116.88km - primary road\nINFO:cityseer.metrics.observe:Length: 105.99km - b road\nINFO:cityseer.metrics.observe:Length: 33.74km - secondary access road\n\n\nContinuity by overlapping routes and names types\n\n\nINFO:cityseer.metrics.observe:Calculating metrics for routes.\n100%|██████████| 30609/30609 [00:00&lt;00:00, 118874.56it/s]\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street counts.\nINFO:cityseer.metrics.observe:Count: 230 - a1\nINFO:cityseer.metrics.observe:Count: 204 - a41\nINFO:cityseer.metrics.observe:Count: 162 - a40\nINFO:cityseer.metrics.observe:Count: 162 - a10\nINFO:cityseer.metrics.observe:Count: 154 - a107\nINFO:cityseer.metrics.observe:Reporting top 5 continuity observations by street lengths.\nINFO:cityseer.metrics.observe:Length: 14.76km - a41\nINFO:cityseer.metrics.observe:Length: 13.1km - a1\nINFO:cityseer.metrics.observe:Length: 12.38km - a40\nINFO:cityseer.metrics.observe:Length: 10.98km - a3220\nINFO:cityseer.metrics.observe:Length: 9.46km - a10\n\n\n\nfor method, shape_exp, descriptor, cmap, inverse, col_by_categ in zip(\n    [\"names\", \"routes\", \"highways\", \"hybrid\"],  #\n    [1, 0.75, 0.5, 1],  #\n    [\"Street names\", \"Routes\", \"Road types\", \"Hybrid routes & names\"],  #\n    [\"plasma\", \"viridis\", \"tab10\", \"tab10\"],  #\n    [False, False, True, False],  #\n    [False, False, True, True],\n):\n    print(f\"Plotting results for method: {method}\")\n    # plot\n    bg_colour = \"#1d1d1d\"\n    fig, axes = plt.subplots(\n        2, 1, dpi=150, figsize=(8, 12), facecolor=bg_colour, constrained_layout=True\n    )\n    fig.suptitle(\n        f\"OS Open Roads plotted by {descriptor} continuity\",\n        fontsize=\"small\",\n        ha=\"center\",\n    )\n    # by count\n    plot.plot_nx_edges(\n        axes[0],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_count\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[0].set_xlabel(f\"{descriptor} by count\", fontsize=\"x-small\")  # type: ignore\n    # by length\n    plot.plot_nx_edges(\n        axes[1],  # type: ignore\n        nx_multigraph=G_cont,\n        edge_metrics_key=f\"{method}_cont_by_length\",\n        bbox_extents=plot_bbox,\n        cmap_key=cmap,\n        lw_min=0.5,\n        lw_max=2,\n        edge_label_key=f\"{method}_cont_by_label\",\n        colour_by_categorical=col_by_categ,\n        shape_exp=shape_exp,\n        face_colour=bg_colour,\n        invert_plot_order=inverse,\n    )\n    axes[1].set_xlabel(f\"{descriptor} by length (metres)\", fontsize=\"x-small\")  # type: ignore\n    plt.show()\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: names\n\n\n30609it [00:00, 469577.59it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:02&lt;00:00, 11117.21it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 545878.18it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:03&lt;00:00, 10180.88it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: routes\n\n\n30609it [00:00, 464096.40it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:03&lt;00:00, 9764.13it/s] \nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 694550.28it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 30609/30609 [00:03&lt;00:00, 8866.57it/s] \n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: highways\n\n\n30609it [00:00, 532384.47it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 6/6 [00:02&lt;00:00,  2.75it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 593554.44it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 6/6 [00:02&lt;00:00,  2.96it/s]\n\n\n\n\n\n\n\n\n\nINFO:cityseer.tools.plot:Extracting edge geometries\n\n\nPlotting results for method: hybrid\n\n\n30609it [00:00, 652573.79it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:02&lt;00:00,  5.26it/s]\nINFO:cityseer.tools.plot:Extracting edge geometries\n30609it [00:00, 700114.25it/s]\nINFO:cityseer.tools.plot:Generating plot\n100%|██████████| 11/11 [00:01&lt;00:00,  5.77it/s]"
  },
  {
    "objectID": "recipes/stats/osm_stats.html",
    "href": "recipes/stats/osm_stats.html",
    "title": "Statistics from OSM data",
    "section": "",
    "text": "Calculate building statistics from osmnx data.\n\nimport matplotlib.pyplot as plt\nimport momepy\nimport pandas as pd\nimport seaborn as sns\nfrom cityseer.metrics import layers\nfrom cityseer.tools import graphs, io\nfrom matplotlib import colors\nfrom osmnx import features\n\n/Users/gareth/dev/benchmark-urbanism/cityseer-examples/.venv/lib/python3.12/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\nTo start, follow the same approach as shown in the network examples to create the network.\n\nlng, lat = -0.13396079424572427, 51.51371088849723\nbuffer = 1500\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\nG = io.osm_graph_from_poly(poly_wgs)\nG = graphs.nx_decompose(G, 50)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nWARNING:cityseer.tools.io:Merging node 12450391665 into 25544116 due to identical x, y coords.\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nWARNING:cityseer.tools.io:Unable to parse level info: -`;-4\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 32630.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Decomposing graph to maximum edge lengths of 50.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 8875 items.\n\n\nPrepare the buildings GeoDataFrame by downloading the data from OpenStreetMap. The osmnx features_from_polygon works well for this purpose. In this instance, we are specifically targeting features that are labelled as an building.\nIt is important to convert the derivative GeoDataFrame to the same CRS as the network.\n\ndata_gdf = features.features_from_polygon(poly_wgs, tags={\"building\": True})\ndata_gdf = data_gdf.to_crs(G.graph[\"crs\"])\ndata_gdf.tail()\n\n\n\n\n\n\n\n\n\ngeometry\naddr:city\naddr:postcode\naddr:street\nbrand\nbrand:wikidata\nbrand:wikipedia\nbuilding\nemail\nname\n...\nname:th\nname:tt\nname:ur\nname:vec\nname:vi\nname:war\nname:wuu\nname:yi\nname:yue\nbuilding:flats\n\n\nelement\nid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nway\n1374498886\nPOLYGON ((699072.276 5711987.717, 699073.651 5...\nLondon\nWC1H 0PD\nGordon Square\nNaN\nNaN\nNaN\nkiosk\nNaN\nGarden Kiosk\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1374681344\nPOLYGON ((700334.357 5710842.473, 700337.684 5...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\ncommercial\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1374681345\nPOLYGON ((700347.126 5710850.783, 700337.684 5...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nyes\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1374681346\nPOLYGON ((700335.868 5710827.778, 700339.655 5...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\ncommercial\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1374820282\nPOLYGON ((699547.129 5710318.314, 699559.064 5...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nyes\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 554 columns\n\n\n\nSome preparatory data cleaning is typically necessary. This example extracts the particular rows and columns of interest for the subsequent steps of analysis.\n\nbldg_way = data_gdf.loc[\"way\"]\nbldg_way = bldg_way.reset_index(level=0, drop=True)\nbldg_way = bldg_way[[\"geometry\"]]\nbldg_way.head()\n\n\n\n\n\n\n\n\ngeometry\n\n\n\n\n0\nPOLYGON ((699578.37 5711981.881, 699573.237 57...\n\n\n1\nPOLYGON ((699509.329 5711958.943, 699502.917 5...\n\n\n2\nPOLYGON ((699771.225 5711711.453, 699763.808 5...\n\n\n3\nPOLYGON ((699408.814 5712013.541, 699453.773 5...\n\n\n4\nPOLYGON ((698517.969 5709739.367, 698517.359 5...\n\n\n\n\n\n\n\n\nbldg_rel = data_gdf.loc[\"relation\"]\nbldg_rel = bldg_rel.reset_index(level=0, drop=True)\nbldg_rel = bldg_rel[[\"geometry\"]]\nbldg_rel.head()\n\n\n\n\n\n\n\n\ngeometry\n\n\n\n\n0\nPOLYGON ((698284.165 5711770.625, 698310.212 5...\n\n\n1\nPOLYGON ((699365.964 5709570.204, 699366.296 5...\n\n\n2\nPOLYGON ((699421.233 5709690.565, 699431.714 5...\n\n\n3\nPOLYGON ((699578.614 5709619.103, 699586.076 5...\n\n\n4\nPOLYGON ((699708.798 5710453.42, 699717.241 57...\n\n\n\n\n\n\n\n\nbldgs_gpd = pd.concat([bldg_way, bldg_rel], axis=0)\nbldgs_gpd = bldgs_gpd.explode(ignore_index=True)\nbldgs_gpd = bldgs_gpd.reset_index(drop=True)\nbldgs_gpd.head()\n\n\n\n\n\n\n\n\ngeometry\n\n\n\n\n0\nPOLYGON ((699578.37 5711981.881, 699573.237 57...\n\n\n1\nPOLYGON ((699509.329 5711958.943, 699502.917 5...\n\n\n2\nPOLYGON ((699771.225 5711711.453, 699763.808 5...\n\n\n3\nPOLYGON ((699408.814 5712013.541, 699453.773 5...\n\n\n4\nPOLYGON ((698517.969 5709739.367, 698517.359 5...\n\n\n\n\n\n\n\n\nbldgs_gpd[\"area\"] = bldgs_gpd.geometry.area\nbldgs_gpd[\"perimeter\"] = bldgs_gpd.geometry.length\nbldgs_gpd[\"compactness\"] = momepy.circular_compactness(bldgs_gpd.geometry)\nbldgs_gpd[\"orientation\"] = momepy.orientation(bldgs_gpd.geometry)\nbldgs_gpd[\"shape_index\"] = momepy.shape_index(bldgs_gpd.geometry)\n\n\nbldgs_gpd.geometry.type.unique()\n\narray(['Polygon'], dtype=object)\n\n\nUse the layers.compute_stats method to compute statistics for numeric columns in the GeoDataFrame. These are specified with the stats_column_labels argument. These statistics are computed over the network using network distances. In the case of weighted variances, the contribution of any particular point is weighted by the distance from the point of measure.\n\ndistances = [100, 200]\nnodes_gdf, bldgs_gpd = layers.compute_stats(\n    bldgs_gpd,\n    stats_column_labels=[\n        \"area\",\n        \"perimeter\",\n        \"compactness\",\n        \"orientation\",\n        \"shape_index\",\n    ],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing statistics.\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.data:Assigning 9768 data entries to network nodes (max_dist: 100).\nINFO:cityseer.data:Collected 89624 potential node assignments from data entries.\nINFO:cityseer.data:Finished assigning data. 89624 assignments added to 4849 nodes.\nINFO:cityseer.graph:Barriers unset and R-tree cleared.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 100m, Beta: 0.04, Walking Time: 1.25 minutes.\nINFO:cityseer.config:Distance: 200m, Beta: 0.02, Walking Time: 2.5 minutes.\n\n\nThis will generate a set of columns containing count, sum, min, max, mean, and var, in unweighted nw and weighted wt versions (where applicable) for each of the input distance thresholds.\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node',\n       ...\n       'cc_shape_index_sum_200_nw', 'cc_shape_index_sum_200_wt',\n       'cc_shape_index_mean_200_nw', 'cc_shape_index_mean_200_wt',\n       'cc_shape_index_count_200_nw', 'cc_shape_index_count_200_wt',\n       'cc_shape_index_var_200_nw', 'cc_shape_index_var_200_wt',\n       'cc_shape_index_max_200', 'cc_shape_index_min_200'],\n      dtype='object', length=110)\n\n\nThe result in columns can be explored with conventional Python ecosystem tools such as seaborn and matplotlib.\n\nsns.histplot(\n    data=nodes_gdf,\n    x=\"cc_area_mean_100_wt\",\n    bins=50,\n)\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_area_mean_100_wt\",\n    cmap=\"hot\",\n    legend=False,\n    vmin=0,\n    vmax=1000,\n    norm=colors.LogNorm(),  # Apply log normalization\n    ax=ax,\n)\nbldgs_gpd.plot(\n    column=\"area\",\n    cmap=\"hot\",\n    legend=False,\n    vmin=0,\n    vmax=1000,\n    alpha=0.5,\n    norm=colors.LogNorm(),  # Apply log normalization\n    ax=ax,\n)\nax.axis(False)\n\n(np.float64(697102.5282020274),\n np.float64(700585.1041845226),\n np.float64(5709114.861675241),\n np.float64(5712536.396237949))"
  },
  {
    "objectID": "recipes/stats/gpd_stats.html",
    "href": "recipes/stats/gpd_stats.html",
    "title": "Statistics from geopandas data",
    "section": "",
    "text": "Calculate building statistics from a geopandas GeoDataFrame.\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom cityseer.metrics import layers\nfrom cityseer.tools import graphs, io\n\nTo start, follow the same approach as shown in the network examples to create the network.\n\nstreets_gpd = gpd.read_file(\"data/madrid_streets/street_network.gpkg\")\nstreets_gpd = streets_gpd.explode(reset_index=True)\nG = io.nx_from_generic_geopandas(streets_gpd)\nG = graphs.nx_decompose(G, 50)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(G_dual)\n\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Decomposing graph to maximum edge lengths of 50.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 195313 items.\n\n\nRead-in the dataset from the source Geopackage or Shapefile Geopandas.\n\nbldgs_gpd = gpd.read_file(\"data/madrid_buildings/madrid_bldgs.gpkg\")\nbldgs_gpd.head()\n\n\n\n\n\n\n\n\nmean_height\narea\nperimeter\ncompactness\norientation\nvolume\nfloor_area_ratio\nform_factor\ncorners\nshape_index\nfractal_dimension\ngeometry\n\n\n\n\n0\nNaN\n187.418714\n58.669276\n0.491102\n40.235999\nNaN\nNaN\nNaN\n4\n0.700787\n1.026350\nPOLYGON ((448688.642 4492911, 448678.351 44928...\n\n\n1\n7.0\n39.082821\n26.992208\n0.472874\n10.252128\n273.579749\n78.165643\n5.410857\n4\n0.687658\n1.041691\nPOLYGON ((440862.665 4482604.017, 440862.64 44...\n\n\n2\n7.0\n39.373412\n27.050303\n0.475086\n10.252128\n275.613883\n78.746824\n5.400665\n4\n0.689265\n1.040760\nPOLYGON ((440862.681 4482608.269, 440862.665 4...\n\n\n3\n7.5\n37.933979\n26.739878\n0.464266\n10.252129\n284.504846\n75.867959\n5.513124\n4\n0.681371\n1.045072\nPOLYGON ((440862.705 4482612.365, 440862.681 4...\n\n\n4\n7.0\n39.013701\n26.972641\n0.472468\n10.183618\n273.095907\n78.027402\n5.412350\n4\n0.687363\n1.041798\nPOLYGON ((440880.29 4482607.963, 440880.274 44...\n\n\n\n\n\n\n\nUse the layers.compute_stats method to compute statistics for numeric columns in the GeoDataFrame. These are specified with the stats_column_labels argument. These statistics are computed over the network using network distances. In the case of weighted variances, the contribution of any particular point is weighted by the distance from the point of measure.\n\ndistances = [100, 200]\nnodes_gdf, bldgs_gpd = layers.compute_stats(\n    bldgs_gpd,\n    stats_column_labels=[\n        \"area\",\n        \"perimeter\",\n        \"compactness\",\n        \"orientation\",\n        \"shape_index\",\n    ],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=distances,\n)\n\nINFO:cityseer.metrics.layers:Computing statistics.\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.data:Assigning 135302 data entries to network nodes (max_dist: 100).\nINFO:cityseer.data:Collected 1282627 potential node assignments from data entries.\nINFO:cityseer.data:Finished assigning data. 1282627 assignments added to 89639 nodes.\nINFO:cityseer.graph:Barriers unset and R-tree cleared.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 100m, Beta: 0.04, Walking Time: 1.25 minutes.\nINFO:cityseer.config:Distance: 200m, Beta: 0.02, Walking Time: 2.5 minutes.\n\n\nThis will generate a set of columns containing count, sum, min, max, mean, and var, in unweighted nw and weighted wt versions (where applicable) for each of the input distance thresholds.\n\nnodes_gdf.columns\n\nIndex(['ns_node_idx', 'x', 'y', 'live', 'weight', 'primal_edge',\n       'primal_edge_node_a', 'primal_edge_node_b', 'primal_edge_idx',\n       'dual_node',\n       ...\n       'cc_shape_index_sum_200_nw', 'cc_shape_index_sum_200_wt',\n       'cc_shape_index_mean_200_nw', 'cc_shape_index_mean_200_wt',\n       'cc_shape_index_count_200_nw', 'cc_shape_index_count_200_wt',\n       'cc_shape_index_var_200_nw', 'cc_shape_index_var_200_wt',\n       'cc_shape_index_max_200', 'cc_shape_index_min_200'],\n      dtype='object', length=110)\n\n\nThe result in columns can be explored with conventional Python ecosystem tools such as seaborn and matplotlib.\n\nsns.histplot(\n    data=nodes_gdf,\n    x=\"cc_orientation_mean_200_wt\",\n    bins=50,\n)\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8), facecolor=\"#1d1d1d\")\nnodes_gdf.plot(\n    column=\"cc_orientation_mean_200_wt\",\n    cmap=\"Dark2\",\n    legend=False,\n    vmin=0,\n    vmax=45,\n    ax=ax,\n)\nbldgs_gpd.plot(\n    column=\"orientation\",\n    cmap=\"Dark2\",\n    legend=False,\n    vmin=0,\n    vmax=45,\n    alpha=0.5,\n    ax=ax,\n)\nax.set_xlim(438500, 438500 + 3500)\nax.set_ylim(4472500, 4472500 + 3500)\nax.axis(False)\n\n(np.float64(438500.0),\n np.float64(442000.0),\n np.float64(4472500.0),\n np.float64(4476000.0))"
  },
  {
    "objectID": "class/5_urban.html",
    "href": "class/5_urban.html",
    "title": "Urban Analytics",
    "section": "",
    "text": "Building upon our previous explorations of Python, Shapely, and GeoPandas, this lesson introduces the broader Python geospatial ecosystem. We will focus on two particularly useful libraries: osmnx for acquiring urban data from OpenStreetMap, and momepy for conducting urban morphological analysis.",
    "crumbs": [
      "Python 101",
      "Urban Analytics"
    ]
  },
  {
    "objectID": "class/5_urban.html#osmnx",
    "href": "class/5_urban.html#osmnx",
    "title": "Urban Analytics",
    "section": "osmnx",
    "text": "osmnx\nosmnx is a Python package that simplifies downloading and working with geospatial data from OpenStreetMap (OSM), such as building footprints or points of interest.\nThis example demonstrates how to download building footprints within a 1km radius of a specified location in Nicosia, Cyprus, defined by its coordinates. osmnx provides several methods for downloading data; here, we will use features_from_point.\n\n# Define the point of interest (latitude, longitude) and distance\ncenter_point = (35.17526, 33.36402)\ndistance_m = 1000\n\n# Download building footprints\ngdf_buildings = ox.features_from_point(\n    center_point, tags={\"building\": True}, dist=distance_m\n)\n\nosmnx returns GeoDataFrames which, as shown in the previous lesson, are ideal for spatial analysis in Python. Note the tags={\"building\": True} argument, which instructs osmnx to fetch all features tagged as buildings in OSM. By changing these tags, you can also download other types of features, such as roads or parks.\nIt is good practice to inspect the data you have downloaded. The head() function displays the first few rows of the GeoDataFrame, allowing you to quickly check the data structure and attributes.\n\n# Display the first few rows of the buildings GeoDataFrame\ngdf_buildings.head()\n\n\n\n\n\n\n\n\n\ngeometry\namenity\nbuilding\nbus\nname\npublic_transport\naddr:city\naddr:housenumber\naddr:postcode\naddr:street\n...\nindoor_seating\ntomb\nname:hy\nwikipedia:hy\nconstruction\ntheatre:type\nassociation\nhouse\ntype\ninscription\n\n\nelement\nid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnode\n4338033483\nPOINT (33.36625 35.18368)\nbus_station\nyes\nyes\nİtimat (Lefkoşa Mağusa Servis)\nstation\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n5206675859\nPOINT (33.35992 35.17344)\nNaN\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n12027040593\nPOINT (33.35773 35.17435)\nNaN\nyes\nNaN\nApostolic Nunciature to Cyprus\nNaN\nNicosia\n1\n1010\nPafou\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nrelation\n2580980\nPOLYGON ((33.36224 35.17641, 33.3628 35.17652,...\nNaN\nyes\nNaN\nBüyük Han\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nOTTOMAN\n\n\n2785751\nPOLYGON ((33.36028 35.17739, 33.36019 35.17701...\nNaN\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nMüftü Raci Sokak\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nNaN\n\n\n\n\n5 rows × 170 columns\n\n\n\nYou can also plot the downloaded data:\n\n# Set up a plot\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Plot the buildings\ngdf_buildings.plot(ax=ax)\n\n# Set the title and remove the axis for a cleaner look\nax.set_title(f\"Buildings around {center_point} ({distance_m}m radius)\")\nax.axis(\"off\")\n\n(np.float64(33.351370125),\n np.float64(33.376489175),\n np.float64(35.164918945000004),\n np.float64(35.185606754999995))\n\n\n\n\n\n\n\n\n\nFor more detailed information on different ways to query OSM features data, refer to the osmnx features documentation.",
    "crumbs": [
      "Python 101",
      "Urban Analytics"
    ]
  },
  {
    "objectID": "class/5_urban.html#data-preparation",
    "href": "class/5_urban.html#data-preparation",
    "title": "Urban Analytics",
    "section": "Data Preparation",
    "text": "Data Preparation\nTo streamline the subsequent analysis, it is advisable to first filter for the types of geometry you intend to work with. In this instance, we are interested in polygon or multi-polygon geometries and will discard other types, such as points or linestrings.\n\n# Filter out non-polygon geometries\ngdf_buildings = gdf_buildings[\n    gdf_buildings.geometry.type.isin(['Polygon', 'MultiPolygon'])\n]\n\ngdf_buildings.head()\n\n\n\n\n\n\n\n\n\ngeometry\namenity\nbuilding\nbus\nname\npublic_transport\naddr:city\naddr:housenumber\naddr:postcode\naddr:street\n...\nindoor_seating\ntomb\nname:hy\nwikipedia:hy\nconstruction\ntheatre:type\nassociation\nhouse\ntype\ninscription\n\n\nelement\nid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrelation\n2580980\nPOLYGON ((33.36224 35.17641, 33.3628 35.17652,...\nNaN\nyes\nNaN\nBüyük Han\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nOTTOMAN\n\n\n2785751\nPOLYGON ((33.36028 35.17739, 33.36019 35.17701...\nNaN\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nMüftü Raci Sokak\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nNaN\n\n\n3403727\nPOLYGON ((33.36277 35.17718, 33.36274 35.17688...\nNaN\nyes\nNaN\nKumarcılar Hanı\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nNaN\n\n\n8756098\nPOLYGON ((33.36483 35.17161, 33.36483 35.17161...\nNaN\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nNaN\n\n\n8762332\nPOLYGON ((33.36003 35.17852, 33.36002 35.17849...\nNaN\nhouse\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nNaN\n\n\n\n\n5 rows × 170 columns\n\n\n\nSecondly, we will reset the index so that all features are neatly indexed from zero upwards, without duplicates.\n\n# Reset the index\ngdf_buildings = gdf_buildings.reset_index(drop=True)\n\ngdf_buildings.head()\n\n\n\n\n\n\n\n\ngeometry\namenity\nbuilding\nbus\nname\npublic_transport\naddr:city\naddr:housenumber\naddr:postcode\naddr:street\n...\nindoor_seating\ntomb\nname:hy\nwikipedia:hy\nconstruction\ntheatre:type\nassociation\nhouse\ntype\ninscription\n\n\n\n\n0\nPOLYGON ((33.36224 35.17641, 33.3628 35.17652,...\nNaN\nyes\nNaN\nBüyük Han\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nOTTOMAN\n\n\n1\nPOLYGON ((33.36028 35.17739, 33.36019 35.17701...\nNaN\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nMüftü Raci Sokak\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nNaN\n\n\n2\nPOLYGON ((33.36277 35.17718, 33.36274 35.17688...\nNaN\nyes\nNaN\nKumarcılar Hanı\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nNaN\n\n\n3\nPOLYGON ((33.36483 35.17161, 33.36483 35.17161...\nNaN\nyes\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nNaN\n\n\n4\nPOLYGON ((33.36003 35.17852, 33.36002 35.17849...\nNaN\nhouse\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nmultipolygon\nNaN\n\n\n\n\n5 rows × 170 columns\n\n\n\nThirdly, we will drop any columns not relevant to our analysis. In this case, we will retain the geometry column and the building column.\n\ngdf_buildings = gdf_buildings[['geometry', 'building']]\n\ngdf_buildings.head()\n\n\n\n\n\n\n\n\ngeometry\nbuilding\n\n\n\n\n0\nPOLYGON ((33.36224 35.17641, 33.3628 35.17652,...\nyes\n\n\n1\nPOLYGON ((33.36028 35.17739, 33.36019 35.17701...\nyes\n\n\n2\nPOLYGON ((33.36277 35.17718, 33.36274 35.17688...\nyes\n\n\n3\nPOLYGON ((33.36483 35.17161, 33.36483 35.17161...\nyes\n\n\n4\nPOLYGON ((33.36003 35.17852, 33.36002 35.17849...\nhouse\n\n\n\n\n\n\n\nBefore performing morphological analysis, it is necessary to ensure your data is in a projected Coordinate Reference System (CRS). Morphological metrics often involve measurements of distance and area, which are only accurate in a projected CRS. For Nicosia, we will use EPSG:3035 (ETRS89 / LAEA Europe), a European projection.\n\n# Set the target CRS\ngdf_buildings_proj = gdf_buildings.to_crs(3035)\n\nLet’s replot the building data to ensure everything is in order.\n\n# Set up a plot\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Plot the buildings\ngdf_buildings_proj.plot(ax=ax)\n\n# Set the title and remove axis\nax.set_title(f\"Buildings around {center_point} ({distance_m}m radius)\")\nax.axis(\"off\")\n\n(np.float64(6433775.66431334),\n np.float64(6436461.588935598),\n np.float64(1669215.3095963916),\n np.float64(1672018.7854921184))",
    "crumbs": [
      "Python 101",
      "Urban Analytics"
    ]
  },
  {
    "objectID": "class/5_urban.html#momepy",
    "href": "class/5_urban.html#momepy",
    "title": "Urban Analytics",
    "section": "momepy",
    "text": "momepy\nmomepy is a library for the quantitative analysis of urban form – also known as urban morphology. It operates primarily on GeoDataFrames and provides a range of functions for calculating various morphological metrics.\nBy way of example, we will explore two of these functions.\n\nBuilding Orientations\nmomepy can calculate the orientation of building footprints using the orientation function.\n\n# Calculate building orientation\ngdf_buildings_proj['orientation'] = momepy.orientation(gdf_buildings_proj)\n\nfig, ax = plt.subplots(figsize=(10, 10))\ngdf_buildings_proj.plot(ax=ax, column='orientation', cmap='Spectral')\nax.set_title(f\"Building orientations\")\nax.axis(\"off\")\n\n(np.float64(6433775.66431334),\n np.float64(6436461.588935598),\n np.float64(1669215.3095963916),\n np.float64(1672018.7854921184))\n\n\n\n\n\n\n\n\n\n\n\nShared Walls\nmomepy can calculate shared wall lengths between buildings using the shared_walls function.\n\n# Calculate shared wall lengths\ngdf_buildings_proj['shared_wall_length'] = momepy.shared_walls(gdf_buildings_proj)\n\nfig, ax = plt.subplots(figsize=(10, 10))\ngdf_buildings_proj.plot(ax=ax, column='shared_wall_length', cmap='hot')\nax.set_title(f\"Building shared wall lengths\")\nax.axis(\"off\")\n\n(np.float64(6433775.66431334),\n np.float64(6436461.588935598),\n np.float64(1669215.3095963916),\n np.float64(1672018.7854921184))\n\n\n\n\n\n\n\n\n\nMany other functions are available in momepy for calculating various morphological metrics. For a comprehensive list, please refer to the momepy documentation.",
    "crumbs": [
      "Python 101",
      "Urban Analytics"
    ]
  },
  {
    "objectID": "class/5_urban.html#summary",
    "href": "class/5_urban.html#summary",
    "title": "Urban Analytics",
    "section": "Summary",
    "text": "Summary\nThis has been a brief exploration of the broader Python geospatial ecosystem, focusing on osmnx for downloading urban data from OpenStreetMap and momepy for conducting urban morphology analysis. This is just a small sample of what these and other tools can achieve.\nRemember that with GeoPandas, you can export your data. So, after downloading data and running any variety of metrics using available Python packages, you can then export the file, which can be further visualised or manipulated with packages such as QGIS. For example, you can export your data to a GeoPackage file using the to_file method:\ngdf_buildings_proj.to_file(\"nicosia_buildings_metrics.gpkg\", driver=\"GPKG\")",
    "crumbs": [
      "Python 101",
      "Urban Analytics"
    ]
  },
  {
    "objectID": "class/1_notebooks.html",
    "href": "class/1_notebooks.html",
    "title": "Notebooks",
    "section": "",
    "text": "Computational notebooks provide an interactive environment for combining code, its results, and explanatory text. They are particularly well-suited for iterative tasks such as data analysis, as they allow you to test and document your work step-by-step. Features like automatic setup, immediate feedback, and the ease of experimentation make notebooks an accessible way to learn Python, especially when compared to more traditional programming approaches.",
    "crumbs": [
      "Python 101",
      "Notebooks"
    ]
  },
  {
    "objectID": "class/1_notebooks.html#google-colab",
    "href": "class/1_notebooks.html#google-colab",
    "title": "Notebooks",
    "section": "Google Colab",
    "text": "Google Colab\nGoogle Colab is a cloud-based platform that lets you run notebooks without any local installation. This makes it useful for quickly exploring datasets or prototyping analytical workflows.\n\nGetting Started\n\nAccess: Visit Google Colab and sign in with a Google account.\nCreate a New Notebook: Click “File &gt; New Notebook.”\nUpload an Existing Notebook: Upload a .ipynb file via “File &gt; Upload Notebook.”",
    "crumbs": [
      "Python 101",
      "Notebooks"
    ]
  },
  {
    "objectID": "class/1_notebooks.html#overview",
    "href": "class/1_notebooks.html#overview",
    "title": "Notebooks",
    "section": "Overview",
    "text": "Overview\nA notebook is made up of cells, which can contain either executable code or formatted text.\n\nCode Cells: For Python code execution. Outputs appear below the cell.\nText Cells: Markdown-based cells for documentation or context.",
    "crumbs": [
      "Python 101",
      "Notebooks"
    ]
  },
  {
    "objectID": "class/1_notebooks.html#running-code",
    "href": "class/1_notebooks.html#running-code",
    "title": "Notebooks",
    "section": "Running Code",
    "text": "Running Code\nTo run a code cell, select it and then either press Shift+Enter or click the play button. Here’s an example:\n\n2 + 2\n\n4\n\n\nThe output appears below the cell.\nAnother example:\n\nx = 5\nprint(x)\n\n5",
    "crumbs": [
      "Python 101",
      "Notebooks"
    ]
  },
  {
    "objectID": "class/1_notebooks.html#implicit-output",
    "href": "class/1_notebooks.html#implicit-output",
    "title": "Notebooks",
    "section": "Implicit Output",
    "text": "Implicit Output\nA handy feature of notebooks is that the value of the last expression in a code cell is automatically displayed as output:\n\n# The value of 'x' will be displayed\nx = 42\nx\n\n42\n\n\nIf you need to display the values of other variables, or variables that aren’t on the last line of a cell, use the print() function:\n\n# Explicitly displaying values\nx = 42\nprint(x)  # This will show the value of 'x'\n\ny = x * 2\ny  # Automatically displayed\n\n42\n\n\n84",
    "crumbs": [
      "Python 101",
      "Notebooks"
    ]
  },
  {
    "objectID": "class/1_notebooks.html#editing-and-rerunning",
    "href": "class/1_notebooks.html#editing-and-rerunning",
    "title": "Notebooks",
    "section": "Editing and Rerunning",
    "text": "Editing and Rerunning\nNotebooks are designed for iterative work. You can easily update and rerun code cells to see the impact of your changes. This flexibility is a core advantage of using notebooks.\n\nVariables and Memory State\nIn an active notebook session, variables defined in one cell remain available in subsequent cells. This allows later cells to build upon the work of earlier ones. While this is a powerful feature, it’s important to be aware that running cells out of sequence, or changing earlier cells without rerunning those that depend on them, can lead to confusion or errors.\n\n\nHow Variables Persist\nAs mentioned, variables you define in one cell can be accessed by other cells that are run later:\n\n# Define a variable\ncity_name = \"Madrid\"\n\nOnce the city_name variable is defined by running its cell, other cells can use it without needing to define it again.\n\nprint(\"The selected city is:\", city_name)\n\nThe selected city is: Madrid\n\n\nIf the defining cell is not run, a subsequent cell using city_name will raise an error.\n\n\nModifying Variables\nIf you change the value of a variable, you must rerun the cell where it’s defined to update its value in the notebook’s memory.\n\n# Update the variable\ncity_name = \"Barcelona\"\n\nSubsequent cells will then use the updated variable:\n\nprint(\"The selected city is now:\", city_name)\n\nThe selected city is now: Barcelona\n\n\n\n\nExecution Order and State\nThe order in which you execute cells is crucial as it determines the notebook’s current state. Running cells out of their logical order can lead to errors or unexpected outcomes.\nTo avoid such issues:\n\nExecute cells in logical order, starting from the top.\nRerun dependent cells after modifying variables.\nPeriodically use “Restart & Run All” to ensure consistency.\n\n\n\nExecution Order Matters\nThe execution order directly affects the notebook’s environment. Variables, functions, and imported libraries become available only after their respective defining cells have been executed. For instance:\n\n# Define a variable\nx = 10\nx\n\n10\n\n\nThe x variable is now defined and available for subsequent cells:\n\ny = x * 2\ny\n\n20\n\n\nIf x’s value is changed in its defining cell, dependent cells must be rerun to use the new value:\n\nz = y + 5\nz\n\n25\n\n\nThe third cell will fail if the preceding cell (defining y) has not been run. Similarly, if the cell defining y is modified (e.g., y = x * 3), the cell using z must be rerun. Otherwise, z will be based on an outdated y.",
    "crumbs": [
      "Python 101",
      "Notebooks"
    ]
  },
  {
    "objectID": "class/1_notebooks.html#adding-text",
    "href": "class/1_notebooks.html#adding-text",
    "title": "Notebooks",
    "section": "Adding Text",
    "text": "Adding Text\nText cells use Markdown, which is a lightweight markup language. Markdown employs simple characters for formatting, enabling you to create headings, bold or italic text, lists, and tables. For a comprehensive guide, please refer to the linked documentation.\n### Observations\n\nThis notebook _demonstrates the basics_ of using computational notebooks for interactive **coding** and **documentation**.",
    "crumbs": [
      "Python 101",
      "Notebooks"
    ]
  },
  {
    "objectID": "class/1_notebooks.html#tips",
    "href": "class/1_notebooks.html#tips",
    "title": "Notebooks",
    "section": "Tips",
    "text": "Tips\n\nTroubleshooting Errors: Ensure all preceding cells have been run.\nCollaborating: Share notebooks via “Share” in the top-right corner. Adjust permissions for viewing or editing.\nSaving Progress: Regularly save your work to Google Drive via “File &gt; Save a Copy in Drive.”\nRestarting the Environment: Use “Runtime &gt; Restart Runtime” to reset the notebook’s state and rerun all cells from the beginning.",
    "crumbs": [
      "Python 101",
      "Notebooks"
    ]
  },
  {
    "objectID": "class/3_spatial.html",
    "href": "class/3_spatial.html",
    "title": "Spatial (Shapely)",
    "section": "",
    "text": "Shapely is a Python library for creating and manipulating geometric objects such as points, lines, and polygons. It offers an intuitive way to work with these shapes within a Cartesian coordinate system. Widely used in spatial analysis, Shapely also underpins other libraries like GeoPandas, which is designed for handling geospatial data.\nIn a nutshell, Shapely allows you to:\n\nCreate points, lines, and polygons.\nAnalyse spatial relationships such as containment, intersection, and proximity.\nCarry out geometric operations like buffering, union, and intersection.\nIntegrate with libraries such as GeoPandas for more advanced geospatial tasks.\n\nFor more comprehensive details, please refer to the Shapely API documentation.\nIn this lesson, we’ll explore the fundamentals of Shapely and its applications in urban contexts. You’ll learn how to model spatial relationships and perform various geometric operations using this library.\n\n\n\n\n\n\nNote\n\n\n\nThis lesson assumes some familiarity with fundamental GIS concepts. We won’t be covering basics such as coordinate reference systems or spatial predicates in detail. However, if you’ve used tools like QGIS, you’ll find concepts such as spatial types (points, linestrings, polygons) and operations (buffering, predicates) quite familiar.\n\n\n\n\nBasic Geometry\nShapely uses its geometry module to construct basic geometric shapes.\nPoints are the most fundamental geometric objects in Shapely, serving as the building blocks for more complex shapes.\n\nfrom shapely.geometry import Point, LineString, Polygon\n\npt = Point(0, 0)\npt\n\n\n\n\n\n\n\n\nLinestrings represent sequences of connected points. You can define them using a series of XY coordinate pairs or a list of Point objects.\n\nline = LineString([(0, 5), (5, 0), (10, 5)])\n\nline\n\n\n\n\n\n\n\n\nPolygons are closed shapes defined by a sequence of coordinates. Similar to linestrings, you can create them from a list of points or coordinate tuples.\n\npoly = Polygon([(0, 0), (0, 10), (10, 10), (10, 0)])\npoly\n\n\n\n\n\n\n\n\nShapely geometries come with useful properties that provide common information. For instance, you can easily retrieve a polygon’s area:\n\npoly.area\n\n100.0\n\n\nSimilarly, you can get the length of a linestring:\n\nline.length\n\n14.142135623730951\n\n\nOther handy properties include centroids, x and y coordinates, and WKT (Well-Known Text) representations:\n\npoly.centroid\n\n\n\n\n\n\n\n\n\npt.x, pt.y\n\n(0.0, 0.0)\n\n\n\nline.wkt\n\n'LINESTRING (0 5, 5 0, 10 5)'\n\n\n\n\nOperations and Predicates\nShapely supports a range of typical GIS spatial operations and predicates. For example, you can measure the distance between two spatial objects:\n\npt.distance(line)\n\n3.5355339059327378\n\n\nCrucially, Shapely operates using Cartesian coordinates. For accurate distance calculations or predicate operations, ensure your geometries are in a projected coordinate reference system and share the same system. Objects must share the same coordinate system for accurate results.\nThe Shapely documentation provides comprehensive details on all available operations and predicates. For instance, the geometry.Point page describes everything related to point geometries.\n\npt_buff = pt.buffer(2)\n\npt_buff\n\n\n\n\n\n\n\n\nAs an example, the documentation shows that the Point geometry has a buffer method. This method accepts a distance parameter and returns a polygon representing the buffered area.\nCommon spatial predicates are also readily available. For example, you can use the within method to check if a point is located inside a polygon:\n\npt.within(poly)\n\nFalse\n\n\nIf a point is on a polygon’s boundary, within returns False, but intersects returns True.\n\npoly.intersects(pt)\n\nTrue\n\n\n\n\nBuffers, Unions, and Differencing\nOther common geometric operations include buffer. For instance, let’s create a buffer around a linestring:\n\nline_buff = line.buffer(2)\n\nline_buff\n\n\n\n\n\n\n\n\nYou can use the union method to combine two polygons into a single, unified geometry:\n\npoly2 = Polygon([(5, 5), (5, 15), (15, 15), (15, 5)])\n\nunion_poly = poly.union(poly2)\n\nunion_poly\n\n\n\n\n\n\n\n\nOperations like difference also behave intuitively, as you might expect from GIS software:\n\ndiff_poly = poly.difference(pt_buff)\n\ndiff_poly\n\n\n\n\n\n\n\n\nSome operations offer configurable parameters for finer control. For example, the buffer method includes cap_style and join_style parameters, which allow you to control the appearance of the buffer’s ends and joins around a line.\n\nbuffer_round = line.buffer(2, cap_style=1, join_style=1)\n\nbuffer_round\n\n\n\n\n\n\n\n\n\n\nWorkflows\nShapely’s spatial operations and predicates closely mirror those found in GIS software like QGIS. This means tasks you might perform in a graphical user interface (UI) can often be replicated in Python, and vice-versa. Python becomes particularly advantageous for complex or lengthy workflows, as scripting enables advanced processing that can be cumbersome or difficult to achieve through a UI.\nLet’s consider a simple example: modelling streets and checking if they are within a specified distance threshold of particular land uses.\n\nstreet = LineString([(0, 0), (10, 0)])\nstreet_buffer = street.buffer(5, cap_style=1, join_style=1)\n\nstreet_buffer\n\n\n\n\n\n\n\n\n\nland_use = Point(3, 4)\nland_use\n\n\n\n\n\n\n\n\n\nis_within = land_use.within(street_buffer)\nis_within\n\nTrue\n\n\n\ndistance_to_street = land_use.distance(street)\ndistance_to_street\n\n4.0\n\n\nIn real-world scenarios, GeoPandas is frequently used for such workflows. It excels at handling multiple features, managing coordinate reference systems, performing file input/output (I/O), and plotting.\n\n\nExercises\n\nCreate two points and calculate the distance between them.\nCreate a polygon and check if a point is inside it.\nCreate two polygons and check if they intersect.\nCreate a LineString with at least three points.\nCreate a list of points and a polygon. Check which points are inside the polygon.",
    "crumbs": [
      "Python 101",
      "Spatial (Shapely)"
    ]
  },
  {
    "objectID": "class/6_data_science.html",
    "href": "class/6_data_science.html",
    "title": "Data Science",
    "section": "",
    "text": "Data science encompasses a wide array of methods to extract insights and knowledge from data. Broadly, these methods can be categorised:\n\nExploratory Data Analysis: This involves examining datasets to summarise their main characteristics, often with visual methods. It’s a first step to understand data distributions, relationships between variables, and to identify anomalies or patterns.\nUnsupervised Learning: This type of machine learning aims to find hidden patterns or intrinsic structures in input data without pre-existing labels.\n\nDimensionality Reduction: Simplifies complex datasets by reducing the number of variables (features) while preserving underlying information.\nClustering: Groups data points based on their similarity, helping to identify distinct segments or typologies within the data.\n\nSupervised Learning: This involves training a model on a labelled dataset, where the desired output is already known. The goal is to predict the output for new, unseen data. Regression (predicting continuous values) and classification (predicting discrete categories) are common supervised tasks.\n\nThis notebook will briefly demonstrate an example of dimensionality reduction using PCA to understand latent structures in street network centrality measures, and an example of supervised learning using a Random Forest Regressor to predict restaurant accessibility. This is a high-level introduction, and you are encouraged to explore these powerful techniques further.\nFirst, we import the necessary Python packages.\n\nimport matplotlib.pyplot as plt\nimport osmnx as ox\nfrom cityseer.metrics import layers, networks\nfrom cityseer.tools import graphs, io, plot\n\nFirst, we define the geographical area of interest (Nicosia, Cyprus) using longitude and latitude coordinates, and a buffer radius. Then, we use cityseer to:\n\nCreate a buffered polygon area around the center point.\nDownload and simplify the street network within this polygon from OpenStreetMap.\nConvert the primal graph (intersections and streets) to its dual representation (streets as nodes, intersections as edges) so that calculations can be expressed relative to streets.\nExtract the network structure (nodes and edges) into GeoDataFrames.\nCalculate various node centrality measures (network density, harmonic closeness, betweenness) at different distances (500m, 1000m, 2000m, 5000m) using angular analysis (considering turning angles). These measures help quantify the importance or connectivity of each node within the network.\n\nTo learn more about these methods, look at the Cityseer Recipes section.\n\nlng, lat = 33.36402, 35.17526\nbuffer = 2000\n\npoly_wgs, epsg_code = io.buffered_point_poly(lng, lat, buffer)\nG = io.osm_graph_from_poly(poly_wgs, to_crs_code=3035)\nG_dual = graphs.nx_to_dual(G)\nnodes_gdf, _edges_gdf, network_structure = io.network_structure_from_nx(\n    G_dual,\n)\nnodes_gdf = networks.node_centrality_simplest(\n    network_structure=network_structure,\n    nodes_gdf=nodes_gdf,\n    distances=[500, 1000, 2000, 5000],\n)\nnodes_gdf.head()\n\nINFO:cityseer.tools.graphs:Generating interpolated edge geometries.\nINFO:cityseer.tools.io:Converting networkX graph to CRS code 3035.\nINFO:cityseer.tools.io:Processing node x, y coordinates.\nINFO:cityseer.tools.io:Processing edge geom coordinates, if present.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Snapping gapped endings.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating edges STR tree.\nINFO:cityseer.tools.graphs:Splitting opposing edges.\nINFO:cityseer.tools.graphs:Squashing opposing nodes\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.util:Creating nodes STR tree\nINFO:cityseer.tools.graphs:Consolidating nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 25.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 50.\nINFO:cityseer.tools.graphs:Ironing edges.\nINFO:cityseer.tools.graphs:Merging parallel edges within buffer of 1.\nINFO:cityseer.tools.graphs:Removing dangling nodes.\nINFO:cityseer.tools.graphs:Removing filler nodes.\nINFO:cityseer.tools.graphs:Converting graph to dual.\nINFO:cityseer.tools.graphs:Preparing dual nodes\nINFO:cityseer.tools.graphs:Preparing dual edges (splitting and welding geoms)\nINFO:cityseer.tools.io:Preparing node and edge arrays from networkX graph.\nINFO:cityseer.graph:Edge R-tree built successfully with 8255 items.\nINFO:cityseer.metrics.networks:Computing simplest path node centrality.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 500m, Beta: 0.008, Walking Time: 6.25 minutes.\nINFO:cityseer.config:Distance: 1000m, Beta: 0.004, Walking Time: 12.5 minutes.\nINFO:cityseer.config:Distance: 2000m, Beta: 0.002, Walking Time: 25.0 minutes.\nINFO:cityseer.config:Distance: 5000m, Beta: 0.0008, Walking Time: 62.5 minutes.\n\n\n\n\n\n\n\n\n\nns_node_idx\nx\ny\nlive\nweight\nprimal_edge\nprimal_edge_node_a\nprimal_edge_node_b\nprimal_edge_idx\ndual_node\n...\ncc_hillier_2000_ang\ncc_hillier_5000_ang\ncc_farness_500_ang\ncc_farness_1000_ang\ncc_farness_2000_ang\ncc_farness_5000_ang\ncc_betweenness_500_ang\ncc_betweenness_1000_ang\ncc_betweenness_2000_ang\ncc_betweenness_5000_ang\n\n\n\n\n48726322_48726455_k0\n0\n6.433811e+06\n1.668938e+06\nTrue\n1\nLINESTRING (6433846.36 1669056.022, 6433841.38...\n48726322\n48726455\n0\nPOINT (6433811.251957 1668937.860386)\n...\n82.064575\n282.400757\n69.122574\n684.075928\n3889.924561\n43576.597656\n0.0\n0.0\n0.0\n0.0\n\n\n12726|58326±94915|35720_1946128965_k0\n1\n6.433905e+06\n1.668819e+06\nTrue\n1\nLINESTRING (6434031.721 1668984.642, 6434023.1...\n1946128965\n12726|58326±94915|35720\n0\nPOINT (6433905.232527 1668818.937382)\n...\n108.197990\n333.577240\n115.155006\n728.148743\n2816.170654\n38335.277344\n0.0\n0.0\n0.0\n0.0\n\n\n12726|58326±94915|35720_9491513922_k0\n2\n6.433850e+06\n1.668726e+06\nTrue\n1\nLINESTRING (6434031.721 1668984.642, 6434026.0...\n9491513922\n12726|58326±94915|35720\n0\nPOINT (6433850.491637 1668725.511627)\n...\n101.575905\n331.259583\n35.281052\n596.150757\n2441.563232\n37595.414062\n0.0\n0.0\n0.0\n0.0\n\n\n33755185_5125635691_k0\n3\n6.433199e+06\n1.669437e+06\nTrue\n1\nLINESTRING (6433477.844 1669569.725, 6433441.0...\n5125635691\n33755185\n0\nPOINT (6433199.422437 1669436.611537)\n...\n85.126991\n336.120728\n35.293468\n358.534912\n2052.510010\n36278.820312\n0.0\n0.0\n0.0\n0.0\n\n\n48726544_5125635684_k0\n4\n6.433514e+06\n1.669124e+06\nTrue\n1\nLINESTRING (6433584.449 1669178.412, 6433502.0...\n48726544\n5125635684\n0\nPOINT (6433513.812668 1669124.248801)\n...\n94.936363\n325.064850\n87.679543\n579.539551\n2248.284912\n38442.253906\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n5 rows × 30 columns\n\n\n\nNext, we use osmnx to acquire data about restaurants within the previously defined polygonal area (poly_wgs).\n\nox.features_from_polygon queries OpenStreetMap for features tagged with \"amenity\": \"restaurant\".\n.to_crs(epsg=3035) reprojects the downloaded restaurant data to the ETRS89 / LAEA Europe projected coordinate system (EPSG:3035) to ensure consistency with the street network data and enable accurate spatial calculations.\ngdf_rest[[\"amenity\", \"geometry\"]] filters out the amenity and geometry columns.\n.reset_index(drop=True) resets the DataFrame index for cleaner data handling.\n\n\ngdf_rest = ox.features_from_polygon(poly_wgs, tags={\"amenity\": \"restaurant\"})\ngdf_rest = gdf_rest.to_crs(epsg=3035)\ngdf_rest = gdf_rest[[\"amenity\", \"geometry\"]]\ngdf_rest = gdf_rest.reset_index(drop=True)\ngdf_rest.head()\n\n\n\n\n\n\n\n\namenity\ngeometry\n\n\n\n\n0\nrestaurant\nPOINT (6433704.816 1670134.568)\n\n\n1\nrestaurant\nPOINT (6433708.714 1669375.407)\n\n\n2\nrestaurant\nPOINT (6433986.532 1669950.98)\n\n\n3\nrestaurant\nPOINT (6434080.329 1669986.277)\n\n\n4\nrestaurant\nPOINT (6435265.366 1669515.579)\n\n\n\n\n\n\n\nWe can then use cityseer once again to calculate accessibility to restaurants from each node in the street network.\n\nlayers.compute_accessibilities is a function that takes the restaurant locations (gdf_rest) and the street network nodes (nodes_gdf) as input.\nlanduse_column_label=\"amenity\" specifies that the ‘amenity’ column in gdf_rest identifies the type of feature (restaurants in this case).\naccessibility_keys=[\"restaurant\"] tells the function to calculate accessibility specifically for features labellieed as ‘restaurant’.\nnetwork_structure provides the pre-calculated network graph and its properties.\ndistances=[200, 400, 800] specifies the distance thresholds (in meters) at which accessibility should be measured. For each node, this will count how many restaurants are reachable within 200m, 400m, and 800m along the network.\n\nThe function updates nodes_gdf by adding new columns representing these accessibility scores (e.g., cc_restaurant_200_wt - weighted count of restaurants within 200m, cc_restaurant_200_nw - raw count of restaurants within 200m, etc.).\n\nnodes_gdf, gdf_rest = layers.compute_accessibilities(\n    gdf_rest,\n    landuse_column_label=\"amenity\",\n    accessibility_keys=[\"restaurant\"],\n    nodes_gdf=nodes_gdf,\n    network_structure=network_structure,\n    distances=[200, 400, 800],\n)\n\nINFO:cityseer.metrics.layers:Computing land-use accessibility for: restaurant\nINFO:cityseer.metrics.layers:Assigning data to network.\nINFO:cityseer.data:Assigning 185 data entries to network nodes (max_dist: 100).\nINFO:cityseer.data:Finished assigning data. 414 assignments added to 331 nodes.\nINFO:cityseer.config:Metrics computed for:\nINFO:cityseer.config:Distance: 200m, Beta: 0.02, Walking Time: 2.5 minutes.\nINFO:cityseer.config:Distance: 400m, Beta: 0.01, Walking Time: 5.0 minutes.\nINFO:cityseer.config:Distance: 800m, Beta: 0.005, Walking Time: 10.0 minutes.\n\n\nWe now arrive at the Data Science section, which performs Principal Component Analysis (PCA), a dimensionality reduction technique, on the street network centrality measures. The goal is to identify underlying patterns or latent dimensions within these (often correlated) centrality metrics.\n\nStandardScaler() is initialised to standardise the data. PCA is sensitive to the scale of variables, so standardisation (transforming data to have zero mean and unit variance) is a necessary preprocessing step.\nX_scaled = scaler.fit_transform(...) selects the twelve centrality columns (density, harmonic, and betweenness at four different distances) from nodes_gdf and applies the standardisation.\npca = PCA(n_components=4) initialises PCA to extract the top 4 principal components. These components are new, uncorrelated variables that capture the maximum possible variance from the original data.\nX_pca = pca.fit_transform(X_scaled) applies PCA to the scaled centrality data.\nThe next four lines add these four principal components as new columns (pca_1, pca_2, pca_3, pca_4) to the nodes_gdf GeoDataFrame.\nThe subsequent code sets up a 3x1 plot to visualise the spatial distribution of the first three principal components. Each subplot shows the nodes coloured by their score on a principal component. The title of each subplot indicates the percentage of the original data’s variance that is explained by that component. This helps in understanding how much information is retained by each component.\n\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\n# Standardise the data\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(\n    nodes_gdf[\n        [\n            \"cc_density_500_ang\",\n            \"cc_density_1000_ang\",\n            \"cc_density_2000_ang\",\n            \"cc_density_5000_ang\",\n            \"cc_harmonic_500_ang\",\n            \"cc_harmonic_1000_ang\",\n            \"cc_harmonic_2000_ang\",\n            \"cc_harmonic_5000_ang\",\n            \"cc_betweenness_500_ang\",\n            \"cc_betweenness_1000_ang\",\n            \"cc_betweenness_2000_ang\",\n            \"cc_betweenness_5000_ang\",\n        ]\n    ]\n)\n\n# Perform PCA\npca = PCA(n_components=4)\nX_pca = pca.fit_transform(X_scaled)\n\n# Add PCA components to the DataFrame\nnodes_gdf[\"pca_1\"] = X_pca[:, 0]\nnodes_gdf[\"pca_2\"] = X_pca[:, 1]\nnodes_gdf[\"pca_3\"] = X_pca[:, 2]\nnodes_gdf[\"pca_4\"] = X_pca[:, 3]\n\n# plot explained variance\nfig, ax = plt.subplots(3, 1, figsize=(8, 24))\nnodes_gdf.plot(\n    column=\"pca_1\",\n    cmap=\"Reds\",\n    legend=False,\n    ax=ax[0],\n)\nax[0].set_xlim(6433800, 6433800 + 2700)\nax[0].set_ylim(1669400, 1669400 + 2700)\nax[0].axis(False)\nax[0].set_title(\n    \"PCA 1 - explained variance: {:.0%}\".format(pca.explained_variance_ratio_[0])\n)\n\nnodes_gdf.plot(\n    column=\"pca_2\",\n    cmap=\"Reds\",\n    legend=False,\n    ax=ax[1],\n)\nax[1].set_xlim(6433800, 6433800 + 2700)\nax[1].set_ylim(1669400, 1669400 + 2700)\nax[1].axis(False)\nax[1].set_title(\n    \"PCA 2 - explained variance: {:.0%}\".format(pca.explained_variance_ratio_[1])\n)\n\nnodes_gdf.plot(\n    column=\"pca_3\",\n    cmap=\"Reds\",\n    legend=False,\n    ax=ax[2],\n)\nax[2].set_xlim(6433800, 6433800 + 2700)\nax[2].set_ylim(1669400, 1669400 + 2700)\nax[2].axis(False)\nax[2].set_title(\n    \"PCA 3 - explained variance: {:.0%}\".format(pca.explained_variance_ratio_[2])\n)\nplt.tight_layout()\n\n\n\n\n\n\n\n\nThe next cell uses seaborn, a statistical data visualisation library, to create a histogram and a joint plot.\nHistograms are useful for visualising the distribution of a single variable, while joint plots allow for the visualisation of the relationship between two variables along with their individual distributions.\nThe histogram shows the distribution of restaurant accessibility within 800 meters (cc_restaurant_800_wt). The x-axis represents the accessibility values, while the y-axis shows the frequency of these values. The bins=50 argument specifies that the data should be divided into 50 bins for the histogram.\nThe joint plot visualises the relationship between the first principal component (pca_1) and restaurant accessibility within 800 meters (cc_restaurant_800_wt).\n\nimport seaborn as sns\n\nsns.histplot(\n    data=nodes_gdf,\n    x=\"cc_restaurant_800_wt\",\n    bins=50,\n)\nsns.jointplot(\n    data=nodes_gdf,\n    x=\"pca_1\",\n    y=\"cc_restaurant_800_wt\",\n    kind=\"kde\",\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis cell demonstrates use of a Random Forest Regressor model to predict restaurant accessibility (cc_restaurant_800_wt) based on the four principal components (pca_1 to pca_4) derived from the network centrality measures. This is an example of supervised learning.\n\nX is defined as the DataFrame containing the predictor variables (the four PCA components).\ny is defined as the target variable (restaurant accessibility at 800m).\ntrain_test_split(X, y, ...) splits the data into training (80%) and testing (20%) sets. The model will be trained on the training set and evaluated on the unseen testing set. random_state=42 ensures reproducibility of the split.\nregressor = RandomForestRegressor(...) initialises a Random Forest Regressor model. n_estimators=100 means it will use 100 decision trees. criterion=\"squared_error\" specifies the function to measure the quality of a split.\nregressor.fit(X_train, y_train) trains the model using the training data.\ny_pred = regressor.predict(X_test) makes predictions on the test set.\nr2 = r2_score(y_test, y_pred) calculates the R-squared score, a measure of how well the model’s predictions fit the actual values in the test set. An R2 score closer to 1 indicates a better fit. Increasing the size of the training set generally improves the model’s performance, as it has more data to learn from.\nThe model then predicts accessibility for all nodes using regressor.predict(X) and stores these predictions in a new column cc_restaurant_800_wt_pred.\nnodes_gdf[\"cc_restaurant_800_residuals\"] calculates the residuals (the difference between predicted and actual accessibility values).\nThe final part of the cell sets up a 3x1 plot to visualise:\n\nThe actual restaurant accessibility.\nThe predicted restaurant accessibility (with the R2 score in the title).\nThe residuals of the regression, showing where the model over or under-predicts accessibility. A good model would have residuals randomly scattered around zero.\n\n\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\n\nX = nodes_gdf[[\"pca_1\", \"pca_2\", \"pca_3\", \"pca_4\"]]\ny = nodes_gdf[\"cc_restaurant_800_wt\"]\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\nregressor = RandomForestRegressor(\n    n_estimators=100, random_state=42, criterion=\"squared_error\"\n)\nregressor.fit(X_train, y_train)\ny_pred = regressor.predict(X_test)\n\n# R2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"R2 score: \", r2)\n\n# plot residuals\nnodes_gdf[\"cc_restaurant_800_wt_pred\"] = regressor.predict(X)\nnodes_gdf[\"cc_restaurant_800_residuals\"] = (\n    nodes_gdf[\"cc_restaurant_800_wt_pred\"] - nodes_gdf[\"cc_restaurant_800_wt\"]\n)\n\nfig, ax = plt.subplots(3, 1, figsize=(8, 24))\nnodes_gdf.plot(\n    column=\"cc_restaurant_800_wt\",\n    cmap=\"magma\",\n    legend=True,\n    ax=ax[0],\n)\nax[0].set_xlim(6433800, 6433800 + 2700)\nax[0].set_ylim(1669400, 1669400 + 2700)\nax[0].axis(False)\nax[0].set_title(\"Restaurant Accessibility\")\n\nnodes_gdf.plot(\n    column=\"cc_restaurant_800_wt_pred\",\n    cmap=\"magma\",\n    legend=True,\n    ax=ax[1],\n)\nax[1].set_xlim(6433800, 6433800 + 2700)\nax[1].set_ylim(1669400, 1669400 + 2700)\nax[1].axis(False)\nax[1].set_title(\"Predicted Restaurant Accessibility - R2 score: {:.2f}\".format(r2))\n\nnodes_gdf.plot(\n    column=\"cc_restaurant_800_residuals\",\n    cmap=\"coolwarm\",\n    vmax=4,\n    vmin=-4,\n    legend=True,\n    ax=ax[2],\n)\nax[2].set_xlim(6433800, 6433800 + 2700)\nax[2].set_ylim(1669400, 1669400 + 2700)\nax[2].axis(False)\nax[2].set_title(\"Residuals of Random Forest Regression\")\nplt.tight_layout()\n\nR2 score:  0.7574198628880113",
    "crumbs": [
      "Python 101",
      "Data Science"
    ]
  }
]